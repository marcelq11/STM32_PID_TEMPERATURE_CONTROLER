
PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aefc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800b0d0  0800b0d0  0001b0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4ec  0800b4ec  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4ec  0800b4ec  0001b4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4f4  0800b4f4  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4f4  0800b4f4  0001b4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4f8  0800b4f8  0001b4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800b4fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  200001f8  0800b6f4  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000868  0800b6f4  00020868  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5ca  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bf6  00000000  00000000  0003e7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  000423e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  00043970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029842  00000000  00000000  00044d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5ce  00000000  00000000  0006e592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6207  00000000  00000000  0008ab60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00180d67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b80  00000000  00000000  00180dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b0b4 	.word	0x0800b0b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800b0b4 	.word	0x0800b0b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af04      	add	r7, sp, #16
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <BMP280_Read8+0x38>)
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	230a      	movs	r3, #10
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	f107 030f 	add.w	r3, r7, #15
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	21ec      	movs	r1, #236	; 0xec
 8000fa8:	f002 f9c6 	bl	8003338 <HAL_I2C_Mem_Read>
  return tmp;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000240 	.word	0x20000240

08000fbc <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af04      	add	r7, sp, #16
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <BMP280_Read16+0x40>)
 8000fc8:	6818      	ldr	r0, [r3, #0]
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	230a      	movs	r3, #10
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	21ec      	movs	r1, #236	; 0xec
 8000fe0:	f002 f9aa 	bl	8003338 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8000fe4:	7b3b      	ldrb	r3, [r7, #12]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	7b7b      	ldrb	r3, [r7, #13]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000240 	.word	0x20000240

08001000 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffd5 	bl	8000fbc <BMP280_Read16>
 8001012:	4603      	mov	r3, r0
 8001014:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001016:	89fb      	ldrh	r3, [r7, #14]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	b29b      	uxth	r3, r3
 800101c:	b21a      	sxth	r2, r3
 800101e:	89fb      	ldrh	r3, [r7, #14]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21b      	sxth	r3, r3
 8001028:	b29b      	uxth	r3, r3
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af04      	add	r7, sp, #16
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <BMP280_Write8+0x34>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	b29a      	uxth	r2, r3
 800104c:	230a      	movs	r3, #10
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	2301      	movs	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	1dbb      	adds	r3, r7, #6
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	21ec      	movs	r1, #236	; 0xec
 800105c:	f002 f858 	bl	8003110 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000240 	.word	0x20000240

0800106c <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af04      	add	r7, sp, #16
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <BMP280_Read24+0x40>)
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	b29a      	uxth	r2, r3
 800107e:	230a      	movs	r3, #10
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	2303      	movs	r3, #3
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	21ec      	movs	r1, #236	; 0xec
 8001090:	f002 f952 	bl	8003338 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001094:	7b3b      	ldrb	r3, [r7, #12]
 8001096:	041a      	lsls	r2, r3, #16
 8001098:	7b7b      	ldrb	r3, [r7, #13]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	4313      	orrs	r3, r2
 800109e:	7bba      	ldrb	r2, [r7, #14]
 80010a0:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000240 	.word	0x20000240

080010b0 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	4608      	mov	r0, r1
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	4603      	mov	r3, r0
 80010c0:	70fb      	strb	r3, [r7, #3]
 80010c2:	460b      	mov	r3, r1
 80010c4:	70bb      	strb	r3, [r7, #2]
 80010c6:	4613      	mov	r3, r2
 80010c8:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80010ca:	4a48      	ldr	r2, [pc, #288]	; (80011ec <BMP280_Init+0x13c>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80010d0:	787b      	ldrb	r3, [r7, #1]
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d901      	bls.n	80010da <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80010d6:	2303      	movs	r3, #3
 80010d8:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80010da:	4a45      	ldr	r2, [pc, #276]	; (80011f0 <BMP280_Init+0x140>)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d101      	bne.n	80010ea <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	2b05      	cmp	r3, #5
 80010ee:	d901      	bls.n	80010f4 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80010f0:	2305      	movs	r3, #5
 80010f2:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80010f4:	4a3f      	ldr	r2, [pc, #252]	; (80011f4 <BMP280_Init+0x144>)
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80010fa:	78bb      	ldrb	r3, [r7, #2]
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	d901      	bls.n	8001104 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001100:	2305      	movs	r3, #5
 8001102:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001104:	4a3c      	ldr	r2, [pc, #240]	; (80011f8 <BMP280_Init+0x148>)
 8001106:	78bb      	ldrb	r3, [r7, #2]
 8001108:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800110a:	bf00      	nop
 800110c:	20d0      	movs	r0, #208	; 0xd0
 800110e:	f7ff ff37 	bl	8000f80 <BMP280_Read8>
 8001112:	4603      	mov	r3, r0
 8001114:	2b58      	cmp	r3, #88	; 0x58
 8001116:	d1f9      	bne.n	800110c <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001118:	2088      	movs	r0, #136	; 0x88
 800111a:	f7ff ff71 	bl	8001000 <BMP280_Read16LE>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b36      	ldr	r3, [pc, #216]	; (80011fc <BMP280_Init+0x14c>)
 8001124:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001126:	208a      	movs	r0, #138	; 0x8a
 8001128:	f7ff ff6a 	bl	8001000 <BMP280_Read16LE>
 800112c:	4603      	mov	r3, r0
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b33      	ldr	r3, [pc, #204]	; (8001200 <BMP280_Init+0x150>)
 8001132:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001134:	208c      	movs	r0, #140	; 0x8c
 8001136:	f7ff ff63 	bl	8001000 <BMP280_Read16LE>
 800113a:	4603      	mov	r3, r0
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b31      	ldr	r3, [pc, #196]	; (8001204 <BMP280_Init+0x154>)
 8001140:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001142:	208e      	movs	r0, #142	; 0x8e
 8001144:	f7ff ff5c 	bl	8001000 <BMP280_Read16LE>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <BMP280_Init+0x158>)
 800114e:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8001150:	2090      	movs	r0, #144	; 0x90
 8001152:	f7ff ff55 	bl	8001000 <BMP280_Read16LE>
 8001156:	4603      	mov	r3, r0
 8001158:	b21a      	sxth	r2, r3
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <BMP280_Init+0x15c>)
 800115c:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 800115e:	2092      	movs	r0, #146	; 0x92
 8001160:	f7ff ff4e 	bl	8001000 <BMP280_Read16LE>
 8001164:	4603      	mov	r3, r0
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <BMP280_Init+0x160>)
 800116a:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 800116c:	2094      	movs	r0, #148	; 0x94
 800116e:	f7ff ff47 	bl	8001000 <BMP280_Read16LE>
 8001172:	4603      	mov	r3, r0
 8001174:	b21a      	sxth	r2, r3
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <BMP280_Init+0x164>)
 8001178:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800117a:	2096      	movs	r0, #150	; 0x96
 800117c:	f7ff ff40 	bl	8001000 <BMP280_Read16LE>
 8001180:	4603      	mov	r3, r0
 8001182:	b21a      	sxth	r2, r3
 8001184:	4b24      	ldr	r3, [pc, #144]	; (8001218 <BMP280_Init+0x168>)
 8001186:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001188:	2098      	movs	r0, #152	; 0x98
 800118a:	f7ff ff39 	bl	8001000 <BMP280_Read16LE>
 800118e:	4603      	mov	r3, r0
 8001190:	b21a      	sxth	r2, r3
 8001192:	4b22      	ldr	r3, [pc, #136]	; (800121c <BMP280_Init+0x16c>)
 8001194:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001196:	209a      	movs	r0, #154	; 0x9a
 8001198:	f7ff ff32 	bl	8001000 <BMP280_Read16LE>
 800119c:	4603      	mov	r3, r0
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <BMP280_Init+0x170>)
 80011a2:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80011a4:	209c      	movs	r0, #156	; 0x9c
 80011a6:	f7ff ff2b 	bl	8001000 <BMP280_Read16LE>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <BMP280_Init+0x174>)
 80011b0:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80011b2:	209e      	movs	r0, #158	; 0x9e
 80011b4:	f7ff ff24 	bl	8001000 <BMP280_Read16LE>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <BMP280_Init+0x178>)
 80011be:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	015b      	lsls	r3, r3, #5
 80011c4:	b25a      	sxtb	r2, r3
 80011c6:	78bb      	ldrb	r3, [r7, #2]
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b25a      	sxtb	r2, r3
 80011d0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4619      	mov	r1, r3
 80011dc:	20f4      	movs	r0, #244	; 0xf4
 80011de:	f7ff ff29 	bl	8001034 <BMP280_Write8>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000240 	.word	0x20000240
 80011f0:	20000244 	.word	0x20000244
 80011f4:	2000023c 	.word	0x2000023c
 80011f8:	2000022e 	.word	0x2000022e
 80011fc:	2000023a 	.word	0x2000023a
 8001200:	20000230 	.word	0x20000230
 8001204:	20000228 	.word	0x20000228
 8001208:	20000234 	.word	0x20000234
 800120c:	2000022a 	.word	0x2000022a
 8001210:	20000246 	.word	0x20000246
 8001214:	2000024a 	.word	0x2000024a
 8001218:	20000232 	.word	0x20000232
 800121c:	20000238 	.word	0x20000238
 8001220:	2000022c 	.word	0x2000022c
 8001224:	20000236 	.word	0x20000236
 8001228:	20000248 	.word	0x20000248

0800122c <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8001232:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <BMP280_ReadTemperature+0xfc>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d16d      	bne.n	8001316 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800123a:	20f4      	movs	r0, #244	; 0xf4
 800123c:	f7ff fea0 	bl	8000f80 <BMP280_Read8>
 8001240:	4603      	mov	r3, r0
 8001242:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	f023 0303 	bic.w	r3, r3, #3
 800124a:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001254:	7dfb      	ldrb	r3, [r7, #23]
 8001256:	4619      	mov	r1, r3
 8001258:	20f4      	movs	r0, #244	; 0xf4
 800125a:	f7ff feeb 	bl	8001034 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800125e:	20f4      	movs	r0, #244	; 0xf4
 8001260:	f7ff fe8e 	bl	8000f80 <BMP280_Read8>
 8001264:	4603      	mov	r3, r0
 8001266:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001268:	7dbb      	ldrb	r3, [r7, #22]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001270:	7dbb      	ldrb	r3, [r7, #22]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d14f      	bne.n	8001316 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001276:	20f4      	movs	r0, #244	; 0xf4
 8001278:	f7ff fe82 	bl	8000f80 <BMP280_Read8>
 800127c:	4603      	mov	r3, r0
 800127e:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001280:	7dbb      	ldrb	r3, [r7, #22]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001288:	7dbb      	ldrb	r3, [r7, #22]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d000      	beq.n	8001290 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800128e:	e7f2      	b.n	8001276 <BMP280_ReadTemperature+0x4a>
				  break;
 8001290:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001292:	20fa      	movs	r0, #250	; 0xfa
 8001294:	f7ff feea 	bl	800106c <BMP280_Read24>
 8001298:	4603      	mov	r3, r0
 800129a:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	111b      	asrs	r3, r3, #4
 80012a0:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	10da      	asrs	r2, r3, #3
 80012a6:	4b21      	ldr	r3, [pc, #132]	; (800132c <BMP280_ReadTemperature+0x100>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80012ae:	4a20      	ldr	r2, [pc, #128]	; (8001330 <BMP280_ReadTemperature+0x104>)
 80012b0:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80012b4:	fb02 f303 	mul.w	r3, r2, r3
 80012b8:	12db      	asrs	r3, r3, #11
 80012ba:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	111b      	asrs	r3, r3, #4
 80012c0:	4a1a      	ldr	r2, [pc, #104]	; (800132c <BMP280_ReadTemperature+0x100>)
 80012c2:	8812      	ldrh	r2, [r2, #0]
 80012c4:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	1112      	asrs	r2, r2, #4
 80012ca:	4918      	ldr	r1, [pc, #96]	; (800132c <BMP280_ReadTemperature+0x100>)
 80012cc:	8809      	ldrh	r1, [r1, #0]
 80012ce:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012d0:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012d4:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <BMP280_ReadTemperature+0x108>)
 80012d8:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012e0:	139b      	asrs	r3, r3, #14
 80012e2:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a13      	ldr	r2, [pc, #76]	; (8001338 <BMP280_ReadTemperature+0x10c>)
 80012ec:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <BMP280_ReadTemperature+0x10c>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	3380      	adds	r3, #128	; 0x80
 80012fa:	121b      	asrs	r3, r3, #8
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001304:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001308:	edd7 7a01 	vldr	s15, [r7, #4]
 800130c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800133c <BMP280_ReadTemperature+0x110>
 8001310:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001314:	e001      	b.n	800131a <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001316:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001340 <BMP280_ReadTemperature+0x114>
 800131a:	eef0 7a47 	vmov.f32	s15, s14
}
 800131e:	eeb0 0a67 	vmov.f32	s0, s15
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000244 	.word	0x20000244
 800132c:	2000023a 	.word	0x2000023a
 8001330:	20000230 	.word	0x20000230
 8001334:	20000228 	.word	0x20000228
 8001338:	2000024c 	.word	0x2000024c
 800133c:	42c80000 	.word	0x42c80000
 8001340:	c2c60000 	.word	0xc2c60000

08001344 <calculate_discrete_pid>:
* @param[in] measured Input measured value
* @return PID output value
*/
#include "PID_discrete_simple.h"

float32_t calculate_discrete_pid(pid_data_t* pid, float32_t setpoint, float32_t measured){
 8001344:	b5b0      	push	{r4, r5, r7, lr}
 8001346:	b08c      	sub	sp, #48	; 0x30
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001350:	edc7 0a01 	vstr	s1, [r7, #4]
	float32_t u=0, P, I, D, error, integral, derivative;
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	error = setpoint-measured;
 800135a:	ed97 7a02 	vldr	s14, [r7, #8]
 800135e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001366:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	
	//proportional part
	P = pid->p.Kp * error;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	edd3 7a00 	vldr	s15, [r3]
 8001370:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001378:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	//integral part
	integral = pid->previous_integral + (error+pid->previous_error) ; //numerical integrator without anti-windup
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	edd3 6a04 	vldr	s13, [r3, #16]
 8001388:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800138c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001394:	edc7 7a08 	vstr	s15, [r7, #32]
	pid->previous_integral = integral;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6a3a      	ldr	r2, [r7, #32]
 800139c:	615a      	str	r2, [r3, #20]
	I = pid->p.Ki*integral*(pid->p.dt/2.0);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80013a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80013a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ac:	ee17 0a90 	vmov	r0, s15
 80013b0:	f7ff f8ea 	bl	8000588 <__aeabi_f2d>
 80013b4:	4604      	mov	r4, r0
 80013b6:	460d      	mov	r5, r1
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8e3 	bl	8000588 <__aeabi_f2d>
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ca:	f7ff fa5f 	bl	800088c <__aeabi_ddiv>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4620      	mov	r0, r4
 80013d4:	4629      	mov	r1, r5
 80013d6:	f7ff f92f 	bl	8000638 <__aeabi_dmul>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f7ff fc01 	bl	8000be8 <__aeabi_d2f>
 80013e6:	4603      	mov	r3, r0
 80013e8:	61fb      	str	r3, [r7, #28]

	//derivative part
	derivative = (error - pid->previous_error)/pid->p.dt; //numerical derivative without filter
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80013f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80013f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80013fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001402:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->previous_error = error;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800140a:	611a      	str	r2, [r3, #16]
	D = pid->p.Kd*derivative;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001412:	ed97 7a06 	vldr	s14, [r7, #24]
 8001416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141a:	edc7 7a05 	vstr	s15, [r7, #20]
	
	//sum of all parts
	u = P  + I + D; //without saturation
 800141e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001422:	edd7 7a07 	vldr	s15, [r7, #28]
 8001426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142a:	ed97 7a05 	vldr	s14, [r7, #20]
 800142e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001432:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	
	return u;
 8001436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001438:	ee07 3a90 	vmov	s15, r3
}
 800143c:	eeb0 0a67 	vmov.f32	s0, s15
 8001440:	3730      	adds	r7, #48	; 0x30
 8001442:	46bd      	mov	sp, r7
 8001444:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001448 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	4b6e      	ldr	r3, [pc, #440]	; (8001618 <MX_GPIO_Init+0x1d0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a6d      	ldr	r2, [pc, #436]	; (8001618 <MX_GPIO_Init+0x1d0>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b6b      	ldr	r3, [pc, #428]	; (8001618 <MX_GPIO_Init+0x1d0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001476:	4b68      	ldr	r3, [pc, #416]	; (8001618 <MX_GPIO_Init+0x1d0>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a67      	ldr	r2, [pc, #412]	; (8001618 <MX_GPIO_Init+0x1d0>)
 800147c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b65      	ldr	r3, [pc, #404]	; (8001618 <MX_GPIO_Init+0x1d0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b62      	ldr	r3, [pc, #392]	; (8001618 <MX_GPIO_Init+0x1d0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a61      	ldr	r2, [pc, #388]	; (8001618 <MX_GPIO_Init+0x1d0>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b5f      	ldr	r3, [pc, #380]	; (8001618 <MX_GPIO_Init+0x1d0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b5c      	ldr	r3, [pc, #368]	; (8001618 <MX_GPIO_Init+0x1d0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a5b      	ldr	r2, [pc, #364]	; (8001618 <MX_GPIO_Init+0x1d0>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b59      	ldr	r3, [pc, #356]	; (8001618 <MX_GPIO_Init+0x1d0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014be:	4b56      	ldr	r3, [pc, #344]	; (8001618 <MX_GPIO_Init+0x1d0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a55      	ldr	r2, [pc, #340]	; (8001618 <MX_GPIO_Init+0x1d0>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b53      	ldr	r3, [pc, #332]	; (8001618 <MX_GPIO_Init+0x1d0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d6:	4b50      	ldr	r3, [pc, #320]	; (8001618 <MX_GPIO_Init+0x1d0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a4f      	ldr	r2, [pc, #316]	; (8001618 <MX_GPIO_Init+0x1d0>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b4d      	ldr	r3, [pc, #308]	; (8001618 <MX_GPIO_Init+0x1d0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ee:	4b4a      	ldr	r3, [pc, #296]	; (8001618 <MX_GPIO_Init+0x1d0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a49      	ldr	r2, [pc, #292]	; (8001618 <MX_GPIO_Init+0x1d0>)
 80014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b47      	ldr	r3, [pc, #284]	; (8001618 <MX_GPIO_Init+0x1d0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	f244 0181 	movw	r1, #16513	; 0x4081
 800150c:	4843      	ldr	r0, [pc, #268]	; (800161c <MX_GPIO_Init+0x1d4>)
 800150e:	f001 fc61 	bl	8002dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	2140      	movs	r1, #64	; 0x40
 8001516:	4842      	ldr	r0, [pc, #264]	; (8001620 <MX_GPIO_Init+0x1d8>)
 8001518:	f001 fc5c 	bl	8002dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800151c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001522:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4619      	mov	r1, r3
 8001532:	483c      	ldr	r0, [pc, #240]	; (8001624 <MX_GPIO_Init+0x1dc>)
 8001534:	f001 fa8a 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001538:	2332      	movs	r3, #50	; 0x32
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001548:	230b      	movs	r3, #11
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	4834      	ldr	r0, [pc, #208]	; (8001624 <MX_GPIO_Init+0x1dc>)
 8001554:	f001 fa7a 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001558:	2386      	movs	r3, #134	; 0x86
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001568:	230b      	movs	r3, #11
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	482d      	ldr	r0, [pc, #180]	; (8001628 <MX_GPIO_Init+0x1e0>)
 8001574:	f001 fa6a 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001578:	f244 0381 	movw	r3, #16513	; 0x4081
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4822      	ldr	r0, [pc, #136]	; (800161c <MX_GPIO_Init+0x1d4>)
 8001592:	f001 fa5b 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015a8:	230b      	movs	r3, #11
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	481a      	ldr	r0, [pc, #104]	; (800161c <MX_GPIO_Init+0x1d4>)
 80015b4:	f001 fa4a 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015b8:	2340      	movs	r3, #64	; 0x40
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	4814      	ldr	r0, [pc, #80]	; (8001620 <MX_GPIO_Init+0x1d8>)
 80015d0:	f001 fa3c 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	480e      	ldr	r0, [pc, #56]	; (8001620 <MX_GPIO_Init+0x1d8>)
 80015e8:	f001 fa30 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80015ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015fe:	230b      	movs	r3, #11
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_GPIO_Init+0x1d8>)
 800160a:	f001 fa1f 	bl	8002a4c <HAL_GPIO_Init>

}
 800160e:	bf00      	nop
 8001610:	3730      	adds	r7, #48	; 0x30
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40020400 	.word	0x40020400
 8001620:	40021800 	.word	0x40021800
 8001624:	40020800 	.word	0x40020800
 8001628:	40020000 	.word	0x40020000

0800162c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <MX_I2C1_Init+0x74>)
 8001632:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <MX_I2C1_Init+0x78>)
 8001634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_I2C1_Init+0x74>)
 8001638:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <MX_I2C1_Init+0x7c>)
 800163a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <MX_I2C1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_I2C1_Init+0x74>)
 8001644:	2201      	movs	r2, #1
 8001646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_I2C1_Init+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_I2C1_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MX_I2C1_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_I2C1_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_I2C1_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001666:	480e      	ldr	r0, [pc, #56]	; (80016a0 <MX_I2C1_Init+0x74>)
 8001668:	f001 fbce 	bl	8002e08 <HAL_I2C_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001672:	f000 fb99 	bl	8001da8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001676:	2100      	movs	r1, #0
 8001678:	4809      	ldr	r0, [pc, #36]	; (80016a0 <MX_I2C1_Init+0x74>)
 800167a:	f002 fa1d 	bl	8003ab8 <HAL_I2CEx_ConfigAnalogFilter>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001684:	f000 fb90 	bl	8001da8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001688:	2100      	movs	r1, #0
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_I2C1_Init+0x74>)
 800168c:	f002 fa5f 	bl	8003b4e <HAL_I2CEx_ConfigDigitalFilter>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001696:	f000 fb87 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000029c 	.word	0x2000029c
 80016a4:	40005400 	.word	0x40005400
 80016a8:	00808cd2 	.word	0x00808cd2

080016ac <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <MX_I2C4_Init+0x74>)
 80016b2:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <MX_I2C4_Init+0x78>)
 80016b4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <MX_I2C4_Init+0x74>)
 80016b8:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <MX_I2C4_Init+0x7c>)
 80016ba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <MX_I2C4_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MX_I2C4_Init+0x74>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <MX_I2C4_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_I2C4_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MX_I2C4_Init+0x74>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_I2C4_Init+0x74>)
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_I2C4_Init+0x74>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80016e6:	480e      	ldr	r0, [pc, #56]	; (8001720 <MX_I2C4_Init+0x74>)
 80016e8:	f001 fb8e 	bl	8002e08 <HAL_I2C_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80016f2:	f000 fb59 	bl	8001da8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016f6:	2100      	movs	r1, #0
 80016f8:	4809      	ldr	r0, [pc, #36]	; (8001720 <MX_I2C4_Init+0x74>)
 80016fa:	f002 f9dd 	bl	8003ab8 <HAL_I2CEx_ConfigAnalogFilter>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001704:	f000 fb50 	bl	8001da8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001708:	2100      	movs	r1, #0
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_I2C4_Init+0x74>)
 800170c:	f002 fa1f 	bl	8003b4e <HAL_I2CEx_ConfigDigitalFilter>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001716:	f000 fb47 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000250 	.word	0x20000250
 8001724:	40006000 	.word	0x40006000
 8001728:	00808cd2 	.word	0x00808cd2

0800172c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	; 0x30
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a2f      	ldr	r2, [pc, #188]	; (8001808 <HAL_I2C_MspInit+0xdc>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d129      	bne.n	80017a2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	4b2f      	ldr	r3, [pc, #188]	; (800180c <HAL_I2C_MspInit+0xe0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a2e      	ldr	r2, [pc, #184]	; (800180c <HAL_I2C_MspInit+0xe0>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b2c      	ldr	r3, [pc, #176]	; (800180c <HAL_I2C_MspInit+0xe0>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001766:	f44f 7310 	mov.w	r3, #576	; 0x240
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176c:	2312      	movs	r3, #18
 800176e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001778:	2304      	movs	r3, #4
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	4823      	ldr	r0, [pc, #140]	; (8001810 <HAL_I2C_MspInit+0xe4>)
 8001784:	f001 f962 	bl	8002a4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_I2C_MspInit+0xe0>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	4a1f      	ldr	r2, [pc, #124]	; (800180c <HAL_I2C_MspInit+0xe0>)
 800178e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001792:	6413      	str	r3, [r2, #64]	; 0x40
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_I2C_MspInit+0xe0>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80017a0:	e02d      	b.n	80017fe <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C4)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <HAL_I2C_MspInit+0xe8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d128      	bne.n	80017fe <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_I2C_MspInit+0xe0>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	4a16      	ldr	r2, [pc, #88]	; (800180c <HAL_I2C_MspInit+0xe0>)
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	6313      	str	r3, [r2, #48]	; 0x30
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <HAL_I2C_MspInit+0xe0>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80017c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80017c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ca:	2312      	movs	r3, #18
 80017cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80017d6:	2304      	movs	r3, #4
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	4619      	mov	r1, r3
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <HAL_I2C_MspInit+0xec>)
 80017e2:	f001 f933 	bl	8002a4c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_I2C_MspInit+0xe0>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <HAL_I2C_MspInit+0xe0>)
 80017ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f0:	6413      	str	r3, [r2, #64]	; 0x40
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_I2C_MspInit+0xe0>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
}
 80017fe:	bf00      	nop
 8001800:	3730      	adds	r7, #48	; 0x30
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40005400 	.word	0x40005400
 800180c:	40023800 	.word	0x40023800
 8001810:	40020400 	.word	0x40020400
 8001814:	40006000 	.word	0x40006000
 8001818:	40020c00 	.word	0x40020c00

0800181c <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8001832:	2308      	movs	r3, #8
 8001834:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8001836:	2028      	movs	r0, #40	; 0x28
 8001838:	f000 ff40 	bl	80026bc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	2130      	movs	r1, #48	; 0x30
 8001844:	4618      	mov	r0, r3
 8001846:	f000 f829 	bl	800189c <lcd_write>
	HAL_Delay(5);
 800184a:	2005      	movs	r0, #5
 800184c:	f000 ff36 	bl	80026bc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	2130      	movs	r1, #48	; 0x30
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f81f 	bl	800189c <lcd_write>
	HAL_Delay(1);
 800185e:	2001      	movs	r0, #1
 8001860:	f000 ff2c 	bl	80026bc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	2130      	movs	r1, #48	; 0x30
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f815 	bl	800189c <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	2102      	movs	r1, #2
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f80e 	bl	800189c <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	210c      	movs	r1, #12
 8001888:	4618      	mov	r0, r3
 800188a:	f000 f807 	bl	800189c <lcd_write>

	/* clear */
	lcd_clear(lcd);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f89f 	bl	80019d2 <lcd_clear>

}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
 80018a6:	460b      	mov	r3, r1
 80018a8:	71bb      	strb	r3, [r7, #6]
 80018aa:	4613      	mov	r3, r2
 80018ac:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80018ae:	79bb      	ldrb	r3, [r7, #6]
 80018b0:	f023 030f 	bic.w	r3, r3, #15
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	797b      	ldrb	r3, [r7, #5]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80018c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80018c8:	f023 030f 	bic.w	r3, r3, #15
 80018cc:	b25a      	sxtb	r2, r3
 80018ce:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b25b      	sxtb	r3, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80018da:	79bb      	ldrb	r3, [r7, #6]
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	797b      	ldrb	r3, [r7, #5]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 80018ee:	79bb      	ldrb	r3, [r7, #6]
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	b25a      	sxtb	r2, r3
 80018f4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	b25b      	sxtb	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	b299      	uxth	r1, r3
 8001904:	f107 020c 	add.w	r2, r7, #12
 8001908:	2364      	movs	r3, #100	; 0x64
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	2304      	movs	r3, #4
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <lcd_write+0x88>)
 8001910:	f001 fb0a 	bl	8002f28 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001914:	2005      	movs	r0, #5
 8001916:	f000 fed1 	bl	80026bc <HAL_Delay>
}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000250 	.word	0x20000250

08001928 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	2300      	movs	r3, #0
 8001936:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8001942:	2308      	movs	r3, #8
 8001944:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f843 	bl	80019d2 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ffa1 	bl	800189c <lcd_write>
	while(lcd->f_line[i])
 800195a:	e00f      	b.n	800197c <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7818      	ldrb	r0, [r3, #0]
 8001960:	7bbb      	ldrb	r3, [r7, #14]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	7859      	ldrb	r1, [r3, #1]
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	f7ff ff93 	bl	800189c <lcd_write>
		i++;
 8001976:	7bbb      	ldrb	r3, [r7, #14]
 8001978:	3301      	adds	r3, #1
 800197a:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 800197c:	7bbb      	ldrb	r3, [r7, #14]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	785b      	ldrb	r3, [r3, #1]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1e9      	bne.n	800195c <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	21c0      	movs	r1, #192	; 0xc0
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff81 	bl	800189c <lcd_write>
	while(lcd->s_line[i])
 800199a:	e00f      	b.n	80019bc <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7818      	ldrb	r0, [r3, #0]
 80019a0:	7bbb      	ldrb	r3, [r7, #14]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	7c99      	ldrb	r1, [r3, #18]
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	f7ff ff73 	bl	800189c <lcd_write>
		i++;
 80019b6:	7bbb      	ldrb	r3, [r7, #14]
 80019b8:	3301      	adds	r3, #1
 80019ba:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 80019bc:	7bbb      	ldrb	r3, [r7, #14]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	7c9b      	ldrb	r3, [r3, #18]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1e9      	bne.n	800199c <lcd_display+0x74>
	}
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80019e8:	2308      	movs	r3, #8
 80019ea:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	7bfa      	ldrb	r2, [r7, #15]
 80019f2:	2101      	movs	r1, #1
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff51 	bl	800189c <lcd_write>
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a0a:	f000 fdfa 	bl	8002602 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a0e:	f000 f897 	bl	8001b40 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a12:	f7ff fd19 	bl	8001448 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001a16:	f000 fd41 	bl	800249c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001a1a:	f7ff fe07 	bl	800162c <MX_I2C1_Init>
  MX_I2C4_Init();
 8001a1e:	f7ff fe45 	bl	80016ac <MX_I2C4_Init>
  MX_TIM3_Init();
 8001a22:	f000 fbad 	bl	8002180 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001a26:	f000 fcbd 	bl	80023a4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001a2a:	f000 fafd 	bl	8002028 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef status =HAL_UART_Receive(&huart3, tzad, 1, 1);
 8001a2e:	2301      	movs	r3, #1
 8001a30:	2201      	movs	r2, #1
 8001a32:	4933      	ldr	r1, [pc, #204]	; (8001b00 <main+0xfc>)
 8001a34:	4833      	ldr	r0, [pc, #204]	; (8001b04 <main+0x100>)
 8001a36:	f004 feba 	bl	80067ae <HAL_UART_Receive>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  HAL_TIM_Base_Start_IT(&htim3);
 8001a3e:	4832      	ldr	r0, [pc, #200]	; (8001b08 <main+0x104>)
 8001a40:	f003 fb18 	bl	8005074 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 8001a44:	2100      	movs	r1, #0
 8001a46:	4831      	ldr	r0, [pc, #196]	; (8001b0c <main+0x108>)
 8001a48:	f003 fc4e 	bl	80052e8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <main+0x108>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2200      	movs	r2, #0
 8001a52:	635a      	str	r2, [r3, #52]	; 0x34
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001a54:	2301      	movs	r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	2101      	movs	r1, #1
 8001a5a:	482d      	ldr	r0, [pc, #180]	; (8001b10 <main+0x10c>)
 8001a5c:	f7ff fb28 	bl	80010b0 <BMP280_Init>
  HAL_UART_Receive_IT(&huart3, &tzad, 2);
 8001a60:	2202      	movs	r2, #2
 8001a62:	4927      	ldr	r1, [pc, #156]	; (8001b00 <main+0xfc>)
 8001a64:	4827      	ldr	r0, [pc, #156]	; (8001b04 <main+0x100>)
 8001a66:	f004 ff72 	bl	800694e <HAL_UART_Receive_IT>

  disp.addr = (0x4E);
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <main+0x110>)
 8001a6c:	224e      	movs	r2, #78	; 0x4e
 8001a6e:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8001a70:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <main+0x110>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 8001a78:	4826      	ldr	r0, [pc, #152]	; (8001b14 <main+0x110>)
 8001a7a:	f7ff fecf 	bl	800181c <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(data," %.2f",temperature);
 8001a7e:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <main+0x114>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd80 	bl	8000588 <__aeabi_f2d>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4923      	ldr	r1, [pc, #140]	; (8001b1c <main+0x118>)
 8001a8e:	4824      	ldr	r0, [pc, #144]	; (8001b20 <main+0x11c>)
 8001a90:	f007 f8e6 	bl	8008c60 <siprintf>
	  sprintf(data1,"Ta: %.2f",temperature);
 8001a94:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <main+0x114>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fd75 	bl	8000588 <__aeabi_f2d>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4920      	ldr	r1, [pc, #128]	; (8001b24 <main+0x120>)
 8001aa4:	4820      	ldr	r0, [pc, #128]	; (8001b28 <main+0x124>)
 8001aa6:	f007 f8db 	bl	8008c60 <siprintf>
	  sprintf(data2,"Tz: %.2f",set_point);
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <main+0x128>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd6a 	bl	8000588 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	491d      	ldr	r1, [pc, #116]	; (8001b30 <main+0x12c>)
 8001aba:	481e      	ldr	r0, [pc, #120]	; (8001b34 <main+0x130>)
 8001abc:	f007 f8d0 	bl	8008c60 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *)data, (COUNTOF(data)-1), 50);
 8001ac0:	2332      	movs	r3, #50	; 0x32
 8001ac2:	2206      	movs	r2, #6
 8001ac4:	4916      	ldr	r1, [pc, #88]	; (8001b20 <main+0x11c>)
 8001ac6:	480f      	ldr	r0, [pc, #60]	; (8001b04 <main+0x100>)
 8001ac8:	f004 fdde 	bl	8006688 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ad0:	f000 fdf4 	bl	80026bc <HAL_Delay>

	  if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == 1) {
 8001ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad8:	4817      	ldr	r0, [pc, #92]	; (8001b38 <main+0x134>)
 8001ada:	f001 f963 	bl	8002da4 <HAL_GPIO_ReadPin>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d104      	bne.n	8001aee <main+0xea>
		  sprintf((char *)disp.f_line, data2);
 8001ae4:	4913      	ldr	r1, [pc, #76]	; (8001b34 <main+0x130>)
 8001ae6:	4815      	ldr	r0, [pc, #84]	; (8001b3c <main+0x138>)
 8001ae8:	f007 f8ba 	bl	8008c60 <siprintf>
 8001aec:	e003      	b.n	8001af6 <main+0xf2>
	  } else {
		  sprintf((char *)disp.f_line, data1);
 8001aee:	490e      	ldr	r1, [pc, #56]	; (8001b28 <main+0x124>)
 8001af0:	4812      	ldr	r0, [pc, #72]	; (8001b3c <main+0x138>)
 8001af2:	f007 f8b5 	bl	8008c60 <siprintf>
	  }

	  lcd_display(&disp);
 8001af6:	4807      	ldr	r0, [pc, #28]	; (8001b14 <main+0x110>)
 8001af8:	f7ff ff16 	bl	8001928 <lcd_display>
	  sprintf(data," %.2f",temperature);
 8001afc:	e7bf      	b.n	8001a7e <main+0x7a>
 8001afe:	bf00      	nop
 8001b00:	2000030c 	.word	0x2000030c
 8001b04:	200003cc 	.word	0x200003cc
 8001b08:	20000334 	.word	0x20000334
 8001b0c:	20000380 	.word	0x20000380
 8001b10:	2000029c 	.word	0x2000029c
 8001b14:	20000310 	.word	0x20000310
 8001b18:	20000300 	.word	0x20000300
 8001b1c:	0800b0d0 	.word	0x0800b0d0
 8001b20:	20000304 	.word	0x20000304
 8001b24:	0800b0d8 	.word	0x0800b0d8
 8001b28:	200002e8 	.word	0x200002e8
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	0800b0e4 	.word	0x0800b0e4
 8001b34:	200002f4 	.word	0x200002f4
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	20000311 	.word	0x20000311

08001b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b0b4      	sub	sp, #208	; 0xd0
 8001b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b46:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b4a:	2230      	movs	r2, #48	; 0x30
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f006 fc14 	bl	800837c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b54:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b64:	f107 0308 	add.w	r3, r7, #8
 8001b68:	2284      	movs	r2, #132	; 0x84
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f006 fc05 	bl	800837c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b72:	f002 f981 	bl	8003e78 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <SystemClock_Config+0x11c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4a38      	ldr	r2, [pc, #224]	; (8001c5c <SystemClock_Config+0x11c>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
 8001b82:	4b36      	ldr	r3, [pc, #216]	; (8001c5c <SystemClock_Config+0x11c>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <SystemClock_Config+0x120>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b96:	4a32      	ldr	r2, [pc, #200]	; (8001c60 <SystemClock_Config+0x120>)
 8001b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <SystemClock_Config+0x120>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001baa:	2301      	movs	r3, #1
 8001bac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bb0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001bcc:	2348      	movs	r3, #72	; 0x48
 8001bce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bde:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 f958 	bl	8003e98 <HAL_RCC_OscConfig>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001bee:	f000 f8db 	bl	8001da8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf2:	230f      	movs	r3, #15
 8001bf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c12:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c16:	2102      	movs	r1, #2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 fbe1 	bl	80043e0 <HAL_RCC_ClockConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001c24:	f000 f8c0 	bl	8001da8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <SystemClock_Config+0x124>)
 8001c2a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 fdce 	bl	80047e4 <HAL_RCCEx_PeriphCLKConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8001c4e:	f000 f8ab 	bl	8001da8 <Error_Handler>
  }
}
 8001c52:	bf00      	nop
 8001c54:	37d0      	adds	r7, #208	; 0xd0
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40007000 	.word	0x40007000
 8001c64:	00224100 	.word	0x00224100

08001c68 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a28      	ldr	r2, [pc, #160]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d149      	bne.n	8001d0e <HAL_TIM_PeriodElapsedCallback+0xa6>
		  temperature = BMP280_ReadTemperature();
 8001c7a:	f7ff fad7 	bl	800122c <BMP280_ReadTemperature>
 8001c7e:	eef0 7a40 	vmov.f32	s15, s0
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001c84:	edc3 7a00 	vstr	s15, [r3]

		  pwm_duty_f = (999.0*calculate_discrete_pid(&pid1, set_point, temperature));
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	4b23      	ldr	r3, [pc, #140]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001c90:	ed93 7a00 	vldr	s14, [r3]
 8001c94:	eef0 0a47 	vmov.f32	s1, s14
 8001c98:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9c:	4821      	ldr	r0, [pc, #132]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001c9e:	f7ff fb51 	bl	8001344 <calculate_discrete_pid>
 8001ca2:	eef0 7a40 	vmov.f32	s15, s0
 8001ca6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001d28 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001cb0:	edc3 7a00 	vstr	s15, [r3]
		  pwm_duty = 0;
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	801a      	strh	r2, [r3, #0]
		  if(pwm_duty_f<0) pwm_duty=0; else
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001cbc:	edd3 7a00 	vldr	s15, [r3]
 8001cc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc8:	d503      	bpl.n	8001cd2 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	801a      	strh	r2, [r3, #0]
 8001cd0:	e018      	b.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0x9c>
		  if(pwm_duty_f>999.0) pwm_duty = 999; else
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001cd4:	edd3 7a00 	vldr	s15, [r3]
 8001cd8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001d28 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce4:	dd04      	ble.n	8001cf0 <HAL_TIM_PeriodElapsedCallback+0x88>
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ce8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cec:	801a      	strh	r2, [r3, #0]
 8001cee:	e009      	b.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0x9c>
			  pwm_duty = (uint16_t)pwm_duty_f;
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cfa:	ee17 3a90 	vmov	r3, s15
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001d02:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty);
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001d06:	881a      	ldrh	r2, [r3, #0]
 8001d08:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40000400 	.word	0x40000400
 8001d1c:	20000300 	.word	0x20000300
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000004 	.word	0x20000004
 8001d28:	4479c000 	.word	0x4479c000
 8001d2c:	20000214 	.word	0x20000214
 8001d30:	20000218 	.word	0x20000218
 8001d34:	20000380 	.word	0x20000380

08001d38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <HAL_UART_RxCpltCallback+0x60>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d121      	bne.n	8001d8e <HAL_UART_RxCpltCallback+0x56>
			switch(tzad[0])
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_UART_RxCpltCallback+0x64>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b78      	cmp	r3, #120	; 0x78
 8001d50:	d002      	beq.n	8001d58 <HAL_UART_RxCpltCallback+0x20>
 8001d52:	2b7a      	cmp	r3, #122	; 0x7a
 8001d54:	d00b      	beq.n	8001d6e <HAL_UART_RxCpltCallback+0x36>
 8001d56:	e015      	b.n	8001d84 <HAL_UART_RxCpltCallback+0x4c>
			{
			case'x':set_point-=0.5;break;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_UART_RxCpltCallback+0x68>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_UART_RxCpltCallback+0x68>)
 8001d68:	edc3 7a00 	vstr	s15, [r3]
 8001d6c:	e00a      	b.n	8001d84 <HAL_UART_RxCpltCallback+0x4c>
			case'z':set_point+=0.5;break;
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_UART_RxCpltCallback+0x68>)
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_UART_RxCpltCallback+0x68>)
 8001d7e:	edc3 7a00 	vstr	s15, [r3]
 8001d82:	bf00      	nop
			}
		HAL_UART_Receive_IT(&huart3, tzad, 1);
 8001d84:	2201      	movs	r2, #1
 8001d86:	4905      	ldr	r1, [pc, #20]	; (8001d9c <HAL_UART_RxCpltCallback+0x64>)
 8001d88:	4806      	ldr	r0, [pc, #24]	; (8001da4 <HAL_UART_RxCpltCallback+0x6c>)
 8001d8a:	f004 fde0 	bl	800694e <HAL_UART_Receive_IT>
	}
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40004800 	.word	0x40004800
 8001d9c:	2000030c 	.word	0x2000030c
 8001da0:	20000000 	.word	0x20000000
 8001da4:	200003cc 	.word	0x200003cc

08001da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <Error_Handler+0x8>
	...

08001db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <HAL_MspInit+0x44>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <HAL_MspInit+0x44>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_MspInit+0x44>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_MspInit+0x44>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <HAL_MspInit+0x44>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_MspInit+0x44>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <NMI_Handler+0x4>

08001e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <MemManage_Handler+0x4>

08001e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e48:	f000 fc18 	bl	800267c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <TIM3_IRQHandler+0x10>)
 8001e56:	f003 fb41 	bl	80054dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000334 	.word	0x20000334

08001e64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <USART3_IRQHandler+0x10>)
 8001e6a:	f004 fdbf 	bl	80069ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200003cc 	.word	0x200003cc

08001e78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
	return 1;
 8001e7c:	2301      	movs	r3, #1
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <_kill>:

int _kill(int pid, int sig)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e92:	f006 fa49 	bl	8008328 <__errno>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2216      	movs	r2, #22
 8001e9a:	601a      	str	r2, [r3, #0]
	return -1;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <_exit>:

void _exit (int status)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ffe7 	bl	8001e88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001eba:	e7fe      	b.n	8001eba <_exit+0x12>

08001ebc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	e00a      	b.n	8001ee4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ece:	f3af 8000 	nop.w
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	60ba      	str	r2, [r7, #8]
 8001eda:	b2ca      	uxtb	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbf0      	blt.n	8001ece <_read+0x12>
	}

return len;
 8001eec:	687b      	ldr	r3, [r7, #4]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	e009      	b.n	8001f1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	60ba      	str	r2, [r7, #8]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	dbf1      	blt.n	8001f08 <_write+0x12>
	}
	return len;
 8001f24:	687b      	ldr	r3, [r7, #4]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_close>:

int _close(int file)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
	return -1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f56:	605a      	str	r2, [r3, #4]
	return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_isatty>:

int _isatty(int file)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
	return 0;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <_sbrk+0x5c>)
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <_sbrk+0x60>)
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <_sbrk+0x64>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <_sbrk+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d207      	bcs.n	8001fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc8:	f006 f9ae 	bl	8008328 <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	220c      	movs	r2, #12
 8001fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e009      	b.n	8001fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <_sbrk+0x64>)
 8001fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20050000 	.word	0x20050000
 8001ff8:	00000400 	.word	0x00000400
 8001ffc:	2000021c 	.word	0x2000021c
 8002000:	20000868 	.word	0x20000868

08002004 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <SystemInit+0x20>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <SystemInit+0x20>)
 8002010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b09a      	sub	sp, #104	; 0x68
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002048:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
 8002058:	615a      	str	r2, [r3, #20]
 800205a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	222c      	movs	r2, #44	; 0x2c
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f006 f98a 	bl	800837c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002068:	4b43      	ldr	r3, [pc, #268]	; (8002178 <MX_TIM1_Init+0x150>)
 800206a:	4a44      	ldr	r2, [pc, #272]	; (800217c <MX_TIM1_Init+0x154>)
 800206c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800206e:	4b42      	ldr	r3, [pc, #264]	; (8002178 <MX_TIM1_Init+0x150>)
 8002070:	2247      	movs	r2, #71	; 0x47
 8002072:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002074:	4b40      	ldr	r3, [pc, #256]	; (8002178 <MX_TIM1_Init+0x150>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800207a:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <MX_TIM1_Init+0x150>)
 800207c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002080:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <MX_TIM1_Init+0x150>)
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002088:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <MX_TIM1_Init+0x150>)
 800208a:	2200      	movs	r2, #0
 800208c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800208e:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <MX_TIM1_Init+0x150>)
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002094:	4838      	ldr	r0, [pc, #224]	; (8002178 <MX_TIM1_Init+0x150>)
 8002096:	f002 ff95 	bl	8004fc4 <HAL_TIM_Base_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80020a0:	f7ff fe82 	bl	8001da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020ae:	4619      	mov	r1, r3
 80020b0:	4831      	ldr	r0, [pc, #196]	; (8002178 <MX_TIM1_Init+0x150>)
 80020b2:	f003 fcc1 	bl	8005a38 <HAL_TIM_ConfigClockSource>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80020bc:	f7ff fe74 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020c0:	482d      	ldr	r0, [pc, #180]	; (8002178 <MX_TIM1_Init+0x150>)
 80020c2:	f003 f8b0 	bl	8005226 <HAL_TIM_PWM_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80020cc:	f7ff fe6c 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d0:	2300      	movs	r3, #0
 80020d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020e0:	4619      	mov	r1, r3
 80020e2:	4825      	ldr	r0, [pc, #148]	; (8002178 <MX_TIM1_Init+0x150>)
 80020e4:	f004 f958 	bl	8006398 <HAL_TIMEx_MasterConfigSynchronization>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80020ee:	f7ff fe5b 	bl	8001da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f2:	2360      	movs	r3, #96	; 0x60
 80020f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fa:	2300      	movs	r3, #0
 80020fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020fe:	2300      	movs	r3, #0
 8002100:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800210e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002112:	2200      	movs	r2, #0
 8002114:	4619      	mov	r1, r3
 8002116:	4818      	ldr	r0, [pc, #96]	; (8002178 <MX_TIM1_Init+0x150>)
 8002118:	f003 fb7a 	bl	8005810 <HAL_TIM_PWM_ConfigChannel>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002122:	f7ff fe41 	bl	8001da8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800213a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800213e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002148:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	4619      	mov	r1, r3
 800215a:	4807      	ldr	r0, [pc, #28]	; (8002178 <MX_TIM1_Init+0x150>)
 800215c:	f004 f9aa 	bl	80064b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002166:	f7ff fe1f 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800216a:	4803      	ldr	r0, [pc, #12]	; (8002178 <MX_TIM1_Init+0x150>)
 800216c:	f000 f8ba 	bl	80022e4 <HAL_TIM_MspPostInit>

}
 8002170:	bf00      	nop
 8002172:	3768      	adds	r7, #104	; 0x68
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000380 	.word	0x20000380
 800217c:	40010000 	.word	0x40010000

08002180 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08e      	sub	sp, #56	; 0x38
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002194:	f107 031c 	add.w	r3, r7, #28
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a0:	463b      	mov	r3, r7
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
 80021ac:	611a      	str	r2, [r3, #16]
 80021ae:	615a      	str	r2, [r3, #20]
 80021b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021b2:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <MX_TIM3_Init+0xe8>)
 80021b4:	4a2d      	ldr	r2, [pc, #180]	; (800226c <MX_TIM3_Init+0xec>)
 80021b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80021b8:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <MX_TIM3_Init+0xe8>)
 80021ba:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80021be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c0:	4b29      	ldr	r3, [pc, #164]	; (8002268 <MX_TIM3_Init+0xe8>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80021c6:	4b28      	ldr	r3, [pc, #160]	; (8002268 <MX_TIM3_Init+0xe8>)
 80021c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80021cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <MX_TIM3_Init+0xe8>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <MX_TIM3_Init+0xe8>)
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021da:	4823      	ldr	r0, [pc, #140]	; (8002268 <MX_TIM3_Init+0xe8>)
 80021dc:	f002 fef2 	bl	8004fc4 <HAL_TIM_Base_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80021e6:	f7ff fddf 	bl	8001da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021f4:	4619      	mov	r1, r3
 80021f6:	481c      	ldr	r0, [pc, #112]	; (8002268 <MX_TIM3_Init+0xe8>)
 80021f8:	f003 fc1e 	bl	8005a38 <HAL_TIM_ConfigClockSource>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8002202:	f7ff fdd1 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002206:	4818      	ldr	r0, [pc, #96]	; (8002268 <MX_TIM3_Init+0xe8>)
 8002208:	f002 ffac 	bl	8005164 <HAL_TIM_OC_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002212:	f7ff fdc9 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800221e:	f107 031c 	add.w	r3, r7, #28
 8002222:	4619      	mov	r1, r3
 8002224:	4810      	ldr	r0, [pc, #64]	; (8002268 <MX_TIM3_Init+0xe8>)
 8002226:	f004 f8b7 	bl	8006398 <HAL_TIMEx_MasterConfigSynchronization>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002230:	f7ff fdba 	bl	8001da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002234:	2300      	movs	r3, #0
 8002236:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800223c:	2300      	movs	r3, #0
 800223e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002244:	463b      	mov	r3, r7
 8002246:	2208      	movs	r2, #8
 8002248:	4619      	mov	r1, r3
 800224a:	4807      	ldr	r0, [pc, #28]	; (8002268 <MX_TIM3_Init+0xe8>)
 800224c:	f003 fa66 	bl	800571c <HAL_TIM_OC_ConfigChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002256:	f7ff fda7 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800225a:	4803      	ldr	r0, [pc, #12]	; (8002268 <MX_TIM3_Init+0xe8>)
 800225c:	f000 f842 	bl	80022e4 <HAL_TIM_MspPostInit>

}
 8002260:	bf00      	nop
 8002262:	3738      	adds	r7, #56	; 0x38
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000334 	.word	0x20000334
 800226c:	40000400 	.word	0x40000400

08002270 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a16      	ldr	r2, [pc, #88]	; (80022d8 <HAL_TIM_Base_MspInit+0x68>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10c      	bne.n	800229c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002282:	4b16      	ldr	r3, [pc, #88]	; (80022dc <HAL_TIM_Base_MspInit+0x6c>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	4a15      	ldr	r2, [pc, #84]	; (80022dc <HAL_TIM_Base_MspInit+0x6c>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6453      	str	r3, [r2, #68]	; 0x44
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_TIM_Base_MspInit+0x6c>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800229a:	e018      	b.n	80022ce <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <HAL_TIM_Base_MspInit+0x70>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d113      	bne.n	80022ce <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022a6:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <HAL_TIM_Base_MspInit+0x6c>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <HAL_TIM_Base_MspInit+0x6c>)
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	6413      	str	r3, [r2, #64]	; 0x40
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_TIM_Base_MspInit+0x6c>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2100      	movs	r1, #0
 80022c2:	201d      	movs	r0, #29
 80022c4:	f000 faf9 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022c8:	201d      	movs	r0, #29
 80022ca:	f000 fb12 	bl	80028f2 <HAL_NVIC_EnableIRQ>
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40000400 	.word	0x40000400

080022e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	; 0x28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a23      	ldr	r2, [pc, #140]	; (8002390 <HAL_TIM_MspPostInit+0xac>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d11d      	bne.n	8002342 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002306:	4b23      	ldr	r3, [pc, #140]	; (8002394 <HAL_TIM_MspPostInit+0xb0>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a22      	ldr	r2, [pc, #136]	; (8002394 <HAL_TIM_MspPostInit+0xb0>)
 800230c:	f043 0310 	orr.w	r3, r3, #16
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_TIM_MspPostInit+0xb0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800231e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002330:	2301      	movs	r3, #1
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	4619      	mov	r1, r3
 800233a:	4817      	ldr	r0, [pc, #92]	; (8002398 <HAL_TIM_MspPostInit+0xb4>)
 800233c:	f000 fb86 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002340:	e021      	b.n	8002386 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM3)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a15      	ldr	r2, [pc, #84]	; (800239c <HAL_TIM_MspPostInit+0xb8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d11c      	bne.n	8002386 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_TIM_MspPostInit+0xb0>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	4a10      	ldr	r2, [pc, #64]	; (8002394 <HAL_TIM_MspPostInit+0xb0>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6313      	str	r3, [r2, #48]	; 0x30
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_TIM_MspPostInit+0xb0>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002376:	2302      	movs	r3, #2
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	4619      	mov	r1, r3
 8002380:	4807      	ldr	r0, [pc, #28]	; (80023a0 <HAL_TIM_MspPostInit+0xbc>)
 8002382:	f000 fb63 	bl	8002a4c <HAL_GPIO_Init>
}
 8002386:	bf00      	nop
 8002388:	3728      	adds	r7, #40	; 0x28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40010000 	.word	0x40010000
 8002394:	40023800 	.word	0x40023800
 8002398:	40021000 	.word	0x40021000
 800239c:	40000400 	.word	0x40000400
 80023a0:	40020800 	.word	0x40020800

080023a4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023a8:	4b14      	ldr	r3, [pc, #80]	; (80023fc <MX_USART3_UART_Init+0x58>)
 80023aa:	4a15      	ldr	r2, [pc, #84]	; (8002400 <MX_USART3_UART_Init+0x5c>)
 80023ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <MX_USART3_UART_Init+0x58>)
 80023b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <MX_USART3_UART_Init+0x58>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <MX_USART3_UART_Init+0x58>)
 80023be:	2200      	movs	r2, #0
 80023c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <MX_USART3_UART_Init+0x58>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <MX_USART3_UART_Init+0x58>)
 80023ca:	220c      	movs	r2, #12
 80023cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <MX_USART3_UART_Init+0x58>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <MX_USART3_UART_Init+0x58>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <MX_USART3_UART_Init+0x58>)
 80023dc:	2200      	movs	r2, #0
 80023de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <MX_USART3_UART_Init+0x58>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023e6:	4805      	ldr	r0, [pc, #20]	; (80023fc <MX_USART3_UART_Init+0x58>)
 80023e8:	f004 f900 	bl	80065ec <HAL_UART_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80023f2:	f7ff fcd9 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200003cc 	.word	0x200003cc
 8002400:	40004800 	.word	0x40004800

08002404 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <HAL_UART_MspInit+0x8c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d130      	bne.n	8002488 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_UART_MspInit+0x90>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a1a      	ldr	r2, [pc, #104]	; (8002494 <HAL_UART_MspInit+0x90>)
 800242c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <HAL_UART_MspInit+0x90>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800243e:	4b15      	ldr	r3, [pc, #84]	; (8002494 <HAL_UART_MspInit+0x90>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a14      	ldr	r2, [pc, #80]	; (8002494 <HAL_UART_MspInit+0x90>)
 8002444:	f043 0308 	orr.w	r3, r3, #8
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_UART_MspInit+0x90>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002456:	f44f 7340 	mov.w	r3, #768	; 0x300
 800245a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002468:	2307      	movs	r3, #7
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	4809      	ldr	r0, [pc, #36]	; (8002498 <HAL_UART_MspInit+0x94>)
 8002474:	f000 faea 	bl	8002a4c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002478:	2200      	movs	r2, #0
 800247a:	2100      	movs	r1, #0
 800247c:	2027      	movs	r0, #39	; 0x27
 800247e:	f000 fa1c 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002482:	2027      	movs	r0, #39	; 0x27
 8002484:	f000 fa35 	bl	80028f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002488:	bf00      	nop
 800248a:	3728      	adds	r7, #40	; 0x28
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40004800 	.word	0x40004800
 8002494:	40023800 	.word	0x40023800
 8002498:	40020c00 	.word	0x40020c00

0800249c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80024a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024aa:	2206      	movs	r2, #6
 80024ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024b0:	2202      	movs	r2, #2
 80024b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024bc:	2202      	movs	r2, #2
 80024be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024da:	2200      	movs	r2, #0
 80024dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80024de:	4805      	ldr	r0, [pc, #20]	; (80024f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024e0:	f001 fb81 	bl	8003be6 <HAL_PCD_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80024ea:	f7ff fc5d 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000450 	.word	0x20000450

080024f8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002518:	d141      	bne.n	800259e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251a:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <HAL_PCD_MspInit+0xb0>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a22      	ldr	r2, [pc, #136]	; (80025a8 <HAL_PCD_MspInit+0xb0>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_PCD_MspInit+0xb0>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002532:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002544:	230a      	movs	r3, #10
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	4619      	mov	r1, r3
 800254e:	4817      	ldr	r0, [pc, #92]	; (80025ac <HAL_PCD_MspInit+0xb4>)
 8002550:	f000 fa7c 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	4810      	ldr	r0, [pc, #64]	; (80025ac <HAL_PCD_MspInit+0xb4>)
 800256a:	f000 fa6f 	bl	8002a4c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_PCD_MspInit+0xb0>)
 8002570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002572:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <HAL_PCD_MspInit+0xb0>)
 8002574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002578:	6353      	str	r3, [r2, #52]	; 0x34
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_PCD_MspInit+0xb0>)
 800257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_PCD_MspInit+0xb0>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <HAL_PCD_MspInit+0xb0>)
 800258c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002590:	6453      	str	r3, [r2, #68]	; 0x44
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_PCD_MspInit+0xb0>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800259e:	bf00      	nop
 80025a0:	3728      	adds	r7, #40	; 0x28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020000 	.word	0x40020000

080025b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025b4:	480d      	ldr	r0, [pc, #52]	; (80025ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025b6:	490e      	ldr	r1, [pc, #56]	; (80025f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025b8:	4a0e      	ldr	r2, [pc, #56]	; (80025f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025bc:	e002      	b.n	80025c4 <LoopCopyDataInit>

080025be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025c2:	3304      	adds	r3, #4

080025c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c8:	d3f9      	bcc.n	80025be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ca:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025cc:	4c0b      	ldr	r4, [pc, #44]	; (80025fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80025ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d0:	e001      	b.n	80025d6 <LoopFillZerobss>

080025d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d4:	3204      	adds	r2, #4

080025d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d8:	d3fb      	bcc.n	80025d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025da:	f7ff fd13 	bl	8002004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025de:	f005 fea9 	bl	8008334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025e2:	f7ff fa0f 	bl	8001a04 <main>
  bx  lr    
 80025e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80025ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025f0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80025f4:	0800b4fc 	.word	0x0800b4fc
  ldr r2, =_sbss
 80025f8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80025fc:	20000868 	.word	0x20000868

08002600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002600:	e7fe      	b.n	8002600 <ADC_IRQHandler>

08002602 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002606:	2003      	movs	r0, #3
 8002608:	f000 f94c 	bl	80028a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800260c:	2000      	movs	r0, #0
 800260e:	f000 f805 	bl	800261c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002612:	f7ff fbcf 	bl	8001db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_InitTick+0x54>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_InitTick+0x58>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002632:	fbb3 f3f1 	udiv	r3, r3, r1
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f967 	bl	800290e <HAL_SYSTICK_Config>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e00e      	b.n	8002668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b0f      	cmp	r3, #15
 800264e:	d80a      	bhi.n	8002666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002650:	2200      	movs	r2, #0
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	f04f 30ff 	mov.w	r0, #4294967295
 8002658:	f000 f92f 	bl	80028ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800265c:	4a06      	ldr	r2, [pc, #24]	; (8002678 <HAL_InitTick+0x5c>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	2000001c 	.word	0x2000001c
 8002674:	20000024 	.word	0x20000024
 8002678:	20000020 	.word	0x20000020

0800267c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_IncTick+0x20>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_IncTick+0x24>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4413      	add	r3, r2
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_IncTick+0x24>)
 800268e:	6013      	str	r3, [r2, #0]
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000024 	.word	0x20000024
 80026a0:	20000854 	.word	0x20000854

080026a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return uwTick;
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_GetTick+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000854 	.word	0x20000854

080026bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c4:	f7ff ffee 	bl	80026a4 <HAL_GetTick>
 80026c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d005      	beq.n	80026e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_Delay+0x44>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026e2:	bf00      	nop
 80026e4:	f7ff ffde 	bl	80026a4 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d8f7      	bhi.n	80026e4 <HAL_Delay+0x28>
  {
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000024 	.word	0x20000024

08002704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <__NVIC_SetPriorityGrouping+0x40>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002720:	4013      	ands	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 800272e:	4313      	orrs	r3, r2
 8002730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002732:	4a04      	ldr	r2, [pc, #16]	; (8002744 <__NVIC_SetPriorityGrouping+0x40>)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	60d3      	str	r3, [r2, #12]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00
 8002748:	05fa0000 	.word	0x05fa0000

0800274c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <__NVIC_GetPriorityGrouping+0x18>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	f003 0307 	and.w	r3, r3, #7
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	2b00      	cmp	r3, #0
 8002778:	db0b      	blt.n	8002792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	4907      	ldr	r1, [pc, #28]	; (80027a0 <__NVIC_EnableIRQ+0x38>)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2001      	movs	r0, #1
 800278a:	fa00 f202 	lsl.w	r2, r0, r2
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db0a      	blt.n	80027ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	490c      	ldr	r1, [pc, #48]	; (80027f0 <__NVIC_SetPriority+0x4c>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	0112      	lsls	r2, r2, #4
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	440b      	add	r3, r1
 80027c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027cc:	e00a      	b.n	80027e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4908      	ldr	r1, [pc, #32]	; (80027f4 <__NVIC_SetPriority+0x50>)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	3b04      	subs	r3, #4
 80027dc:	0112      	lsls	r2, r2, #4
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	440b      	add	r3, r1
 80027e2:	761a      	strb	r2, [r3, #24]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000e100 	.word	0xe000e100
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f1c3 0307 	rsb	r3, r3, #7
 8002812:	2b04      	cmp	r3, #4
 8002814:	bf28      	it	cs
 8002816:	2304      	movcs	r3, #4
 8002818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3304      	adds	r3, #4
 800281e:	2b06      	cmp	r3, #6
 8002820:	d902      	bls.n	8002828 <NVIC_EncodePriority+0x30>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3b03      	subs	r3, #3
 8002826:	e000      	b.n	800282a <NVIC_EncodePriority+0x32>
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	401a      	ands	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43d9      	mvns	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	4313      	orrs	r3, r2
         );
}
 8002852:	4618      	mov	r0, r3
 8002854:	3724      	adds	r7, #36	; 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002870:	d301      	bcc.n	8002876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002872:	2301      	movs	r3, #1
 8002874:	e00f      	b.n	8002896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002876:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <SysTick_Config+0x40>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800287e:	210f      	movs	r1, #15
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f7ff ff8e 	bl	80027a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <SysTick_Config+0x40>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <SysTick_Config+0x40>)
 8002890:	2207      	movs	r2, #7
 8002892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	e000e010 	.word	0xe000e010

080028a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ff29 	bl	8002704 <__NVIC_SetPriorityGrouping>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028cc:	f7ff ff3e 	bl	800274c <__NVIC_GetPriorityGrouping>
 80028d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	6978      	ldr	r0, [r7, #20]
 80028d8:	f7ff ff8e 	bl	80027f8 <NVIC_EncodePriority>
 80028dc:	4602      	mov	r2, r0
 80028de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff5d 	bl	80027a4 <__NVIC_SetPriority>
}
 80028ea:	bf00      	nop
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4603      	mov	r3, r0
 80028fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff31 	bl	8002768 <__NVIC_EnableIRQ>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ffa2 	bl	8002860 <SysTick_Config>
 800291c:	4603      	mov	r3, r0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7ff feb6 	bl	80026a4 <HAL_GetTick>
 8002938:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d008      	beq.n	8002958 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e052      	b.n	80029fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0216 	bic.w	r2, r2, #22
 8002966:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002976:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	2b00      	cmp	r3, #0
 800297e:	d103      	bne.n	8002988 <HAL_DMA_Abort+0x62>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002984:	2b00      	cmp	r3, #0
 8002986:	d007      	beq.n	8002998 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0208 	bic.w	r2, r2, #8
 8002996:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a8:	e013      	b.n	80029d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029aa:	f7ff fe7b 	bl	80026a4 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d90c      	bls.n	80029d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2203      	movs	r2, #3
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e015      	b.n	80029fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1e4      	bne.n	80029aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e4:	223f      	movs	r2, #63	; 0x3f
 80029e6:	409a      	lsls	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d004      	beq.n	8002a24 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2280      	movs	r2, #128	; 0x80
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e00c      	b.n	8002a3e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2205      	movs	r2, #5
 8002a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	; 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	e175      	b.n	8002d58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	f040 8164 	bne.w	8002d52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d005      	beq.n	8002aa2 <HAL_GPIO_Init+0x56>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d130      	bne.n	8002b04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	2203      	movs	r2, #3
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad8:	2201      	movs	r2, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 0201 	and.w	r2, r3, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d017      	beq.n	8002b40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d123      	bne.n	8002b94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	08da      	lsrs	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3208      	adds	r2, #8
 8002b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	220f      	movs	r2, #15
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	08da      	lsrs	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3208      	adds	r2, #8
 8002b8e:	69b9      	ldr	r1, [r7, #24]
 8002b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0203 	and.w	r2, r3, #3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80be 	beq.w	8002d52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd6:	4b66      	ldr	r3, [pc, #408]	; (8002d70 <HAL_GPIO_Init+0x324>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	4a65      	ldr	r2, [pc, #404]	; (8002d70 <HAL_GPIO_Init+0x324>)
 8002bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be0:	6453      	str	r3, [r2, #68]	; 0x44
 8002be2:	4b63      	ldr	r3, [pc, #396]	; (8002d70 <HAL_GPIO_Init+0x324>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bee:	4a61      	ldr	r2, [pc, #388]	; (8002d74 <HAL_GPIO_Init+0x328>)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	220f      	movs	r2, #15
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <HAL_GPIO_Init+0x32c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d037      	beq.n	8002c8a <HAL_GPIO_Init+0x23e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a57      	ldr	r2, [pc, #348]	; (8002d7c <HAL_GPIO_Init+0x330>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d031      	beq.n	8002c86 <HAL_GPIO_Init+0x23a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a56      	ldr	r2, [pc, #344]	; (8002d80 <HAL_GPIO_Init+0x334>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d02b      	beq.n	8002c82 <HAL_GPIO_Init+0x236>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a55      	ldr	r2, [pc, #340]	; (8002d84 <HAL_GPIO_Init+0x338>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d025      	beq.n	8002c7e <HAL_GPIO_Init+0x232>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a54      	ldr	r2, [pc, #336]	; (8002d88 <HAL_GPIO_Init+0x33c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01f      	beq.n	8002c7a <HAL_GPIO_Init+0x22e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a53      	ldr	r2, [pc, #332]	; (8002d8c <HAL_GPIO_Init+0x340>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d019      	beq.n	8002c76 <HAL_GPIO_Init+0x22a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a52      	ldr	r2, [pc, #328]	; (8002d90 <HAL_GPIO_Init+0x344>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_GPIO_Init+0x226>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a51      	ldr	r2, [pc, #324]	; (8002d94 <HAL_GPIO_Init+0x348>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00d      	beq.n	8002c6e <HAL_GPIO_Init+0x222>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a50      	ldr	r2, [pc, #320]	; (8002d98 <HAL_GPIO_Init+0x34c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d007      	beq.n	8002c6a <HAL_GPIO_Init+0x21e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4f      	ldr	r2, [pc, #316]	; (8002d9c <HAL_GPIO_Init+0x350>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <HAL_GPIO_Init+0x21a>
 8002c62:	2309      	movs	r3, #9
 8002c64:	e012      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c66:	230a      	movs	r3, #10
 8002c68:	e010      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	e00e      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c6e:	2307      	movs	r3, #7
 8002c70:	e00c      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c72:	2306      	movs	r3, #6
 8002c74:	e00a      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c76:	2305      	movs	r3, #5
 8002c78:	e008      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	e006      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e004      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e002      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	f002 0203 	and.w	r2, r2, #3
 8002c92:	0092      	lsls	r2, r2, #2
 8002c94:	4093      	lsls	r3, r2
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c9c:	4935      	ldr	r1, [pc, #212]	; (8002d74 <HAL_GPIO_Init+0x328>)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002caa:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cce:	4a34      	ldr	r2, [pc, #208]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd4:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf8:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cfe:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d22:	4a1f      	ldr	r2, [pc, #124]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <HAL_GPIO_Init+0x354>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3301      	adds	r3, #1
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b0f      	cmp	r3, #15
 8002d5c:	f67f ae86 	bls.w	8002a6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	3724      	adds	r7, #36	; 0x24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40013800 	.word	0x40013800
 8002d78:	40020000 	.word	0x40020000
 8002d7c:	40020400 	.word	0x40020400
 8002d80:	40020800 	.word	0x40020800
 8002d84:	40020c00 	.word	0x40020c00
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40021400 	.word	0x40021400
 8002d90:	40021800 	.word	0x40021800
 8002d94:	40021c00 	.word	0x40021c00
 8002d98:	40022000 	.word	0x40022000
 8002d9c:	40022400 	.word	0x40022400
 8002da0:	40013c00 	.word	0x40013c00

08002da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	887b      	ldrh	r3, [r7, #2]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
 8002dc0:	e001      	b.n	8002dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
 8002de0:	4613      	mov	r3, r2
 8002de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de4:	787b      	ldrb	r3, [r7, #1]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dea:	887a      	ldrh	r2, [r7, #2]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002df0:	e003      	b.n	8002dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002df2:	887b      	ldrh	r3, [r7, #2]
 8002df4:	041a      	lsls	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	619a      	str	r2, [r3, #24]
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e07f      	b.n	8002f1a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fe fc7c 	bl	800172c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2224      	movs	r2, #36	; 0x24
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d107      	bne.n	8002e82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	e006      	b.n	8002e90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d104      	bne.n	8002ea2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ea0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <HAL_I2C_Init+0x11c>)
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ec0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69d9      	ldr	r1, [r3, #28]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1a      	ldr	r2, [r3, #32]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	02008000 	.word	0x02008000

08002f28 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	461a      	mov	r2, r3
 8002f34:	460b      	mov	r3, r1
 8002f36:	817b      	strh	r3, [r7, #10]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	f040 80da 	bne.w	80030fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_I2C_Master_Transmit+0x30>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e0d3      	b.n	8003100 <HAL_I2C_Master_Transmit+0x1d8>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f60:	f7ff fba0 	bl	80026a4 <HAL_GetTick>
 8002f64:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	2319      	movs	r3, #25
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fbc6 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e0be      	b.n	8003100 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2221      	movs	r2, #33	; 0x21
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	893a      	ldrh	r2, [r7, #8]
 8002fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2bff      	cmp	r3, #255	; 0xff
 8002fb2:	d90e      	bls.n	8002fd2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	22ff      	movs	r2, #255	; 0xff
 8002fb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	8979      	ldrh	r1, [r7, #10]
 8002fc2:	4b51      	ldr	r3, [pc, #324]	; (8003108 <HAL_I2C_Master_Transmit+0x1e0>)
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fd42 	bl	8003a54 <I2C_TransferConfig>
 8002fd0:	e06c      	b.n	80030ac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	8979      	ldrh	r1, [r7, #10]
 8002fe4:	4b48      	ldr	r3, [pc, #288]	; (8003108 <HAL_I2C_Master_Transmit+0x1e0>)
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fd31 	bl	8003a54 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ff2:	e05b      	b.n	80030ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	6a39      	ldr	r1, [r7, #32]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fbc3 	bl	8003784 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e07b      	b.n	8003100 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	781a      	ldrb	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d034      	beq.n	80030ac <HAL_I2C_Master_Transmit+0x184>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003046:	2b00      	cmp	r3, #0
 8003048:	d130      	bne.n	80030ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	2200      	movs	r2, #0
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fb55 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e04d      	b.n	8003100 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	2bff      	cmp	r3, #255	; 0xff
 800306c:	d90e      	bls.n	800308c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	22ff      	movs	r2, #255	; 0xff
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003078:	b2da      	uxtb	r2, r3
 800307a:	8979      	ldrh	r1, [r7, #10]
 800307c:	2300      	movs	r3, #0
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fce5 	bl	8003a54 <I2C_TransferConfig>
 800308a:	e00f      	b.n	80030ac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	b2da      	uxtb	r2, r3
 800309c:	8979      	ldrh	r1, [r7, #10]
 800309e:	2300      	movs	r3, #0
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fcd4 	bl	8003a54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d19e      	bne.n	8002ff4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	6a39      	ldr	r1, [r7, #32]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fba2 	bl	8003804 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e01a      	b.n	8003100 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2220      	movs	r2, #32
 80030d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_I2C_Master_Transmit+0x1e4>)
 80030de:	400b      	ands	r3, r1
 80030e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	80002000 	.word	0x80002000
 800310c:	fe00e800 	.word	0xfe00e800

08003110 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	4608      	mov	r0, r1
 800311a:	4611      	mov	r1, r2
 800311c:	461a      	mov	r2, r3
 800311e:	4603      	mov	r3, r0
 8003120:	817b      	strh	r3, [r7, #10]
 8003122:	460b      	mov	r3, r1
 8003124:	813b      	strh	r3, [r7, #8]
 8003126:	4613      	mov	r3, r2
 8003128:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b20      	cmp	r3, #32
 8003134:	f040 80f9 	bne.w	800332a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_I2C_Mem_Write+0x34>
 800313e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800314a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0ed      	b.n	800332c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_I2C_Mem_Write+0x4e>
 800315a:	2302      	movs	r3, #2
 800315c:	e0e6      	b.n	800332c <HAL_I2C_Mem_Write+0x21c>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003166:	f7ff fa9d 	bl	80026a4 <HAL_GetTick>
 800316a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	2319      	movs	r3, #25
 8003172:	2201      	movs	r2, #1
 8003174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fac3 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0d1      	b.n	800332c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2221      	movs	r2, #33	; 0x21
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2240      	movs	r2, #64	; 0x40
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031b0:	88f8      	ldrh	r0, [r7, #6]
 80031b2:	893a      	ldrh	r2, [r7, #8]
 80031b4:	8979      	ldrh	r1, [r7, #10]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	4603      	mov	r3, r0
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f9d3 	bl	800356c <I2C_RequestMemoryWrite>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0a9      	b.n	800332c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2bff      	cmp	r3, #255	; 0xff
 80031e0:	d90e      	bls.n	8003200 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	22ff      	movs	r2, #255	; 0xff
 80031e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	8979      	ldrh	r1, [r7, #10]
 80031f0:	2300      	movs	r3, #0
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 fc2b 	bl	8003a54 <I2C_TransferConfig>
 80031fe:	e00f      	b.n	8003220 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320e:	b2da      	uxtb	r2, r3
 8003210:	8979      	ldrh	r1, [r7, #10]
 8003212:	2300      	movs	r3, #0
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fc1a 	bl	8003a54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 faad 	bl	8003784 <I2C_WaitOnTXISFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e07b      	b.n	800332c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	781a      	ldrb	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d034      	beq.n	80032d8 <HAL_I2C_Mem_Write+0x1c8>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	2b00      	cmp	r3, #0
 8003274:	d130      	bne.n	80032d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	2200      	movs	r2, #0
 800327e:	2180      	movs	r1, #128	; 0x80
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fa3f 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e04d      	b.n	800332c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	2bff      	cmp	r3, #255	; 0xff
 8003298:	d90e      	bls.n	80032b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	22ff      	movs	r2, #255	; 0xff
 800329e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	8979      	ldrh	r1, [r7, #10]
 80032a8:	2300      	movs	r3, #0
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fbcf 	bl	8003a54 <I2C_TransferConfig>
 80032b6:	e00f      	b.n	80032d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	8979      	ldrh	r1, [r7, #10]
 80032ca:	2300      	movs	r3, #0
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fbbe 	bl	8003a54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d19e      	bne.n	8003220 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fa8c 	bl	8003804 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e01a      	b.n	800332c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2220      	movs	r2, #32
 80032fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6859      	ldr	r1, [r3, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <HAL_I2C_Mem_Write+0x224>)
 800330a:	400b      	ands	r3, r1
 800330c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800332a:	2302      	movs	r3, #2
  }
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	fe00e800 	.word	0xfe00e800

08003338 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	4608      	mov	r0, r1
 8003342:	4611      	mov	r1, r2
 8003344:	461a      	mov	r2, r3
 8003346:	4603      	mov	r3, r0
 8003348:	817b      	strh	r3, [r7, #10]
 800334a:	460b      	mov	r3, r1
 800334c:	813b      	strh	r3, [r7, #8]
 800334e:	4613      	mov	r3, r2
 8003350:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b20      	cmp	r3, #32
 800335c:	f040 80fd 	bne.w	800355a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_I2C_Mem_Read+0x34>
 8003366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003372:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0f1      	b.n	800355c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_I2C_Mem_Read+0x4e>
 8003382:	2302      	movs	r3, #2
 8003384:	e0ea      	b.n	800355c <HAL_I2C_Mem_Read+0x224>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800338e:	f7ff f989 	bl	80026a4 <HAL_GetTick>
 8003392:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	2319      	movs	r3, #25
 800339a:	2201      	movs	r2, #1
 800339c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f9af 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0d5      	b.n	800355c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2222      	movs	r2, #34	; 0x22
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2240      	movs	r2, #64	; 0x40
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a3a      	ldr	r2, [r7, #32]
 80033ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033d8:	88f8      	ldrh	r0, [r7, #6]
 80033da:	893a      	ldrh	r2, [r7, #8]
 80033dc:	8979      	ldrh	r1, [r7, #10]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	4603      	mov	r3, r0
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f913 	bl	8003614 <I2C_RequestMemoryRead>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0ad      	b.n	800355c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	2bff      	cmp	r3, #255	; 0xff
 8003408:	d90e      	bls.n	8003428 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	22ff      	movs	r2, #255	; 0xff
 800340e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003414:	b2da      	uxtb	r2, r3
 8003416:	8979      	ldrh	r1, [r7, #10]
 8003418:	4b52      	ldr	r3, [pc, #328]	; (8003564 <HAL_I2C_Mem_Read+0x22c>)
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 fb17 	bl	8003a54 <I2C_TransferConfig>
 8003426:	e00f      	b.n	8003448 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003436:	b2da      	uxtb	r2, r3
 8003438:	8979      	ldrh	r1, [r7, #10]
 800343a:	4b4a      	ldr	r3, [pc, #296]	; (8003564 <HAL_I2C_Mem_Read+0x22c>)
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fb06 	bl	8003a54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	2200      	movs	r2, #0
 8003450:	2104      	movs	r1, #4
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f956 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e07c      	b.n	800355c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d034      	beq.n	8003508 <HAL_I2C_Mem_Read+0x1d0>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d130      	bne.n	8003508 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	2200      	movs	r2, #0
 80034ae:	2180      	movs	r1, #128	; 0x80
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f927 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e04d      	b.n	800355c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2bff      	cmp	r3, #255	; 0xff
 80034c8:	d90e      	bls.n	80034e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	22ff      	movs	r2, #255	; 0xff
 80034ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	8979      	ldrh	r1, [r7, #10]
 80034d8:	2300      	movs	r3, #0
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fab7 	bl	8003a54 <I2C_TransferConfig>
 80034e6:	e00f      	b.n	8003508 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	8979      	ldrh	r1, [r7, #10]
 80034fa:	2300      	movs	r3, #0
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 faa6 	bl	8003a54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d19a      	bne.n	8003448 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f974 	bl	8003804 <I2C_WaitOnSTOPFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e01a      	b.n	800355c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2220      	movs	r2, #32
 800352c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_I2C_Mem_Read+0x230>)
 800353a:	400b      	ands	r3, r1
 800353c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	e000      	b.n	800355c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
  }
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	80002400 	.word	0x80002400
 8003568:	fe00e800 	.word	0xfe00e800

0800356c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	4608      	mov	r0, r1
 8003576:	4611      	mov	r1, r2
 8003578:	461a      	mov	r2, r3
 800357a:	4603      	mov	r3, r0
 800357c:	817b      	strh	r3, [r7, #10]
 800357e:	460b      	mov	r3, r1
 8003580:	813b      	strh	r3, [r7, #8]
 8003582:	4613      	mov	r3, r2
 8003584:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	8979      	ldrh	r1, [r7, #10]
 800358c:	4b20      	ldr	r3, [pc, #128]	; (8003610 <I2C_RequestMemoryWrite+0xa4>)
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fa5d 	bl	8003a54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	69b9      	ldr	r1, [r7, #24]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f8f0 	bl	8003784 <I2C_WaitOnTXISFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e02c      	b.n	8003608 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d105      	bne.n	80035c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035b4:	893b      	ldrh	r3, [r7, #8]
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	629a      	str	r2, [r3, #40]	; 0x28
 80035be:	e015      	b.n	80035ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035c0:	893b      	ldrh	r3, [r7, #8]
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	69b9      	ldr	r1, [r7, #24]
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f8d6 	bl	8003784 <I2C_WaitOnTXISFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e012      	b.n	8003608 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035e2:	893b      	ldrh	r3, [r7, #8]
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2200      	movs	r2, #0
 80035f4:	2180      	movs	r1, #128	; 0x80
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f884 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	80002000 	.word	0x80002000

08003614 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	4608      	mov	r0, r1
 800361e:	4611      	mov	r1, r2
 8003620:	461a      	mov	r2, r3
 8003622:	4603      	mov	r3, r0
 8003624:	817b      	strh	r3, [r7, #10]
 8003626:	460b      	mov	r3, r1
 8003628:	813b      	strh	r3, [r7, #8]
 800362a:	4613      	mov	r3, r2
 800362c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	8979      	ldrh	r1, [r7, #10]
 8003634:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <I2C_RequestMemoryRead+0xa4>)
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2300      	movs	r3, #0
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fa0a 	bl	8003a54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	69b9      	ldr	r1, [r7, #24]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f89d 	bl	8003784 <I2C_WaitOnTXISFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e02c      	b.n	80036ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d105      	bne.n	8003666 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800365a:	893b      	ldrh	r3, [r7, #8]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	629a      	str	r2, [r3, #40]	; 0x28
 8003664:	e015      	b.n	8003692 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003666:	893b      	ldrh	r3, [r7, #8]
 8003668:	0a1b      	lsrs	r3, r3, #8
 800366a:	b29b      	uxth	r3, r3
 800366c:	b2da      	uxtb	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	69b9      	ldr	r1, [r7, #24]
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 f883 	bl	8003784 <I2C_WaitOnTXISFlagUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e012      	b.n	80036ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003688:	893b      	ldrh	r3, [r7, #8]
 800368a:	b2da      	uxtb	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2200      	movs	r2, #0
 800369a:	2140      	movs	r1, #64	; 0x40
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f831 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	80002000 	.word	0x80002000

080036bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d103      	bne.n	80036da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2200      	movs	r2, #0
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d007      	beq.n	80036f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	619a      	str	r2, [r3, #24]
  }
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003714:	e022      	b.n	800375c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d01e      	beq.n	800375c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371e:	f7fe ffc1 	bl	80026a4 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d302      	bcc.n	8003734 <I2C_WaitOnFlagUntilTimeout+0x30>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d113      	bne.n	800375c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003738:	f043 0220 	orr.w	r2, r3, #32
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e00f      	b.n	800377c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4013      	ands	r3, r2
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	429a      	cmp	r2, r3
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	429a      	cmp	r2, r3
 8003778:	d0cd      	beq.n	8003716 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003790:	e02c      	b.n	80037ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f870 	bl	800387c <I2C_IsErrorOccurred>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e02a      	b.n	80037fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ac:	d01e      	beq.n	80037ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ae:	f7fe ff79 	bl	80026a4 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d302      	bcc.n	80037c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d113      	bne.n	80037ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c8:	f043 0220 	orr.w	r2, r3, #32
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e007      	b.n	80037fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d1cb      	bne.n	8003792 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003810:	e028      	b.n	8003864 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f830 	bl	800387c <I2C_IsErrorOccurred>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e026      	b.n	8003874 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003826:	f7fe ff3d 	bl	80026a4 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d113      	bne.n	8003864 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	f043 0220 	orr.w	r2, r3, #32
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e007      	b.n	8003874 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b20      	cmp	r3, #32
 8003870:	d1cf      	bne.n	8003812 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08a      	sub	sp, #40	; 0x28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d075      	beq.n	8003994 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2210      	movs	r2, #16
 80038ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038b0:	e056      	b.n	8003960 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b8:	d052      	beq.n	8003960 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038ba:	f7fe fef3 	bl	80026a4 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d302      	bcc.n	80038d0 <I2C_IsErrorOccurred+0x54>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d147      	bne.n	8003960 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f2:	d12e      	bne.n	8003952 <I2C_IsErrorOccurred+0xd6>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038fa:	d02a      	beq.n	8003952 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80038fc:	7cfb      	ldrb	r3, [r7, #19]
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d027      	beq.n	8003952 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003910:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003912:	f7fe fec7 	bl	80026a4 <HAL_GetTick>
 8003916:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003918:	e01b      	b.n	8003952 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800391a:	f7fe fec3 	bl	80026a4 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b19      	cmp	r3, #25
 8003926:	d914      	bls.n	8003952 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b20      	cmp	r3, #32
 800395e:	d1dc      	bne.n	800391a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b20      	cmp	r3, #32
 800396c:	d003      	beq.n	8003976 <I2C_IsErrorOccurred+0xfa>
 800396e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003972:	2b00      	cmp	r3, #0
 8003974:	d09d      	beq.n	80038b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2220      	movs	r2, #32
 8003984:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	f043 0304 	orr.w	r3, r3, #4
 800398c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00b      	beq.n	80039be <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	f043 0308 	orr.w	r3, r3, #8
 80039ce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	f043 0302 	orr.w	r3, r3, #2
 80039f0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d01c      	beq.n	8003a44 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f7ff fe56 	bl	80036bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6859      	ldr	r1, [r3, #4]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <I2C_IsErrorOccurred+0x1d4>)
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3728      	adds	r7, #40	; 0x28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	fe00e800 	.word	0xfe00e800

08003a54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	817b      	strh	r3, [r7, #10]
 8003a62:	4613      	mov	r3, r2
 8003a64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a66:	897b      	ldrh	r3, [r7, #10]
 8003a68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a6c:	7a7b      	ldrb	r3, [r7, #9]
 8003a6e:	041b      	lsls	r3, r3, #16
 8003a70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a74:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a82:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	0d5b      	lsrs	r3, r3, #21
 8003a8e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a92:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <I2C_TransferConfig+0x60>)
 8003a94:	430b      	orrs	r3, r1
 8003a96:	43db      	mvns	r3, r3
 8003a98:	ea02 0103 	and.w	r1, r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	03ff63ff 	.word	0x03ff63ff

08003ab8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d138      	bne.n	8003b40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e032      	b.n	8003b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2224      	movs	r2, #36	; 0x24
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6819      	ldr	r1, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e000      	b.n	8003b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b40:	2302      	movs	r3, #2
  }
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d139      	bne.n	8003bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e033      	b.n	8003bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2224      	movs	r2, #36	; 0x24
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ba0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003be6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be8:	b08f      	sub	sp, #60	; 0x3c
 8003bea:	af0a      	add	r7, sp, #40	; 0x28
 8003bec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e116      	b.n	8003e26 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fe fc70 	bl	80024f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f004 f8e0 	bl	8007dfc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	603b      	str	r3, [r7, #0]
 8003c42:	687e      	ldr	r6, [r7, #4]
 8003c44:	466d      	mov	r5, sp
 8003c46:	f106 0410 	add.w	r4, r6, #16
 8003c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c56:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c5a:	1d33      	adds	r3, r6, #4
 8003c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c5e:	6838      	ldr	r0, [r7, #0]
 8003c60:	f004 f874 	bl	8007d4c <USB_CoreInit>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0d7      	b.n	8003e26 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f004 f8ce 	bl	8007e1e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
 8003c86:	e04a      	b.n	8003d1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	333d      	adds	r3, #61	; 0x3d
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c9c:	7bfa      	ldrb	r2, [r7, #15]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	333c      	adds	r3, #60	; 0x3c
 8003cac:	7bfa      	ldrb	r2, [r7, #15]
 8003cae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cb0:	7bfa      	ldrb	r2, [r7, #15]
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	b298      	uxth	r0, r3
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	3342      	adds	r3, #66	; 0x42
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	333f      	adds	r3, #63	; 0x3f
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cdc:	7bfa      	ldrb	r2, [r7, #15]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	3344      	adds	r3, #68	; 0x44
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3348      	adds	r3, #72	; 0x48
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d04:	7bfa      	ldrb	r2, [r7, #15]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	3350      	adds	r3, #80	; 0x50
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	73fb      	strb	r3, [r7, #15]
 8003d1e:	7bfa      	ldrb	r2, [r7, #15]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d3af      	bcc.n	8003c88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
 8003d2c:	e044      	b.n	8003db8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d2e:	7bfa      	ldrb	r2, [r7, #15]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d44:	7bfa      	ldrb	r2, [r7, #15]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d5a:	7bfa      	ldrb	r2, [r7, #15]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d70:	7bfa      	ldrb	r2, [r7, #15]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d86:	7bfa      	ldrb	r2, [r7, #15]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	3301      	adds	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d3b5      	bcc.n	8003d2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	687e      	ldr	r6, [r7, #4]
 8003dca:	466d      	mov	r5, sp
 8003dcc:	f106 0410 	add.w	r4, r6, #16
 8003dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ddc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003de0:	1d33      	adds	r3, r6, #4
 8003de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003de4:	6838      	ldr	r0, [r7, #0]
 8003de6:	f004 f867 	bl	8007eb8 <USB_DevInit>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e014      	b.n	8003e26 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d102      	bne.n	8003e1a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f80b 	bl	8003e30 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f004 fa21 	bl	8008266 <USB_DevDisconnect>

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003e30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e5e:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <HAL_PCDEx_ActivateLPM+0x44>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	10000003 	.word	0x10000003

08003e78 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40007000 	.word	0x40007000

08003e98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e291      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8087 	beq.w	8003fca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ebc:	4b96      	ldr	r3, [pc, #600]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d00c      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ec8:	4b93      	ldr	r3, [pc, #588]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d112      	bne.n	8003efa <HAL_RCC_OscConfig+0x62>
 8003ed4:	4b90      	ldr	r3, [pc, #576]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee0:	d10b      	bne.n	8003efa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee2:	4b8d      	ldr	r3, [pc, #564]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d06c      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x130>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d168      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e26b      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f02:	d106      	bne.n	8003f12 <HAL_RCC_OscConfig+0x7a>
 8003f04:	4b84      	ldr	r3, [pc, #528]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a83      	ldr	r2, [pc, #524]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	e02e      	b.n	8003f70 <HAL_RCC_OscConfig+0xd8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x9c>
 8003f1a:	4b7f      	ldr	r3, [pc, #508]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a7e      	ldr	r2, [pc, #504]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	4b7c      	ldr	r3, [pc, #496]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a7b      	ldr	r2, [pc, #492]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	e01d      	b.n	8003f70 <HAL_RCC_OscConfig+0xd8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f3c:	d10c      	bne.n	8003f58 <HAL_RCC_OscConfig+0xc0>
 8003f3e:	4b76      	ldr	r3, [pc, #472]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a75      	ldr	r2, [pc, #468]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	4b73      	ldr	r3, [pc, #460]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a72      	ldr	r2, [pc, #456]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e00b      	b.n	8003f70 <HAL_RCC_OscConfig+0xd8>
 8003f58:	4b6f      	ldr	r3, [pc, #444]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a6e      	ldr	r2, [pc, #440]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	4b6c      	ldr	r3, [pc, #432]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a6b      	ldr	r2, [pc, #428]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d013      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fe fb94 	bl	80026a4 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f80:	f7fe fb90 	bl	80026a4 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	; 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e21f      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	4b61      	ldr	r3, [pc, #388]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0xe8>
 8003f9e:	e014      	b.n	8003fca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fe fb80 	bl	80026a4 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fa8:	f7fe fb7c 	bl	80026a4 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b64      	cmp	r3, #100	; 0x64
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e20b      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fba:	4b57      	ldr	r3, [pc, #348]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x110>
 8003fc6:	e000      	b.n	8003fca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d069      	beq.n	80040aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fd6:	4b50      	ldr	r3, [pc, #320]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00b      	beq.n	8003ffa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fe2:	4b4d      	ldr	r3, [pc, #308]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d11c      	bne.n	8004028 <HAL_RCC_OscConfig+0x190>
 8003fee:	4b4a      	ldr	r3, [pc, #296]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d116      	bne.n	8004028 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffa:	4b47      	ldr	r3, [pc, #284]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <HAL_RCC_OscConfig+0x17a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d001      	beq.n	8004012 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e1df      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004012:	4b41      	ldr	r3, [pc, #260]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	493d      	ldr	r1, [pc, #244]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004026:	e040      	b.n	80040aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d023      	beq.n	8004078 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004030:	4b39      	ldr	r3, [pc, #228]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a38      	ldr	r2, [pc, #224]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fe fb32 	bl	80026a4 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004044:	f7fe fb2e 	bl	80026a4 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e1bd      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004056:	4b30      	ldr	r3, [pc, #192]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004062:	4b2d      	ldr	r3, [pc, #180]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4929      	ldr	r1, [pc, #164]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8004072:	4313      	orrs	r3, r2
 8004074:	600b      	str	r3, [r1, #0]
 8004076:	e018      	b.n	80040aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004078:	4b27      	ldr	r3, [pc, #156]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a26      	ldr	r2, [pc, #152]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 800407e:	f023 0301 	bic.w	r3, r3, #1
 8004082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fe fb0e 	bl	80026a4 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800408c:	f7fe fb0a 	bl	80026a4 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e199      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409e:	4b1e      	ldr	r3, [pc, #120]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d038      	beq.n	8004128 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d019      	beq.n	80040f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040be:	4b16      	ldr	r3, [pc, #88]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 80040c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c2:	4a15      	ldr	r2, [pc, #84]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ca:	f7fe faeb 	bl	80026a4 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d2:	f7fe fae7 	bl	80026a4 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e176      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 80040e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x23a>
 80040f0:	e01a      	b.n	8004128 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 80040f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f6:	4a08      	ldr	r2, [pc, #32]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 80040f8:	f023 0301 	bic.w	r3, r3, #1
 80040fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fe:	f7fe fad1 	bl	80026a4 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004104:	e00a      	b.n	800411c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004106:	f7fe facd 	bl	80026a4 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d903      	bls.n	800411c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e15c      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
 8004118:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800411c:	4b91      	ldr	r3, [pc, #580]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 800411e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1ee      	bne.n	8004106 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80a4 	beq.w	800427e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004136:	4b8b      	ldr	r3, [pc, #556]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10d      	bne.n	800415e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004142:	4b88      	ldr	r3, [pc, #544]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	4a87      	ldr	r2, [pc, #540]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 8004148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414c:	6413      	str	r3, [r2, #64]	; 0x40
 800414e:	4b85      	ldr	r3, [pc, #532]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800415a:	2301      	movs	r3, #1
 800415c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800415e:	4b82      	ldr	r3, [pc, #520]	; (8004368 <HAL_RCC_OscConfig+0x4d0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d118      	bne.n	800419c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800416a:	4b7f      	ldr	r3, [pc, #508]	; (8004368 <HAL_RCC_OscConfig+0x4d0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a7e      	ldr	r2, [pc, #504]	; (8004368 <HAL_RCC_OscConfig+0x4d0>)
 8004170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004176:	f7fe fa95 	bl	80026a4 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417e:	f7fe fa91 	bl	80026a4 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b64      	cmp	r3, #100	; 0x64
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e120      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004190:	4b75      	ldr	r3, [pc, #468]	; (8004368 <HAL_RCC_OscConfig+0x4d0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0x31a>
 80041a4:	4b6f      	ldr	r3, [pc, #444]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	4a6e      	ldr	r2, [pc, #440]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	6713      	str	r3, [r2, #112]	; 0x70
 80041b0:	e02d      	b.n	800420e <HAL_RCC_OscConfig+0x376>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x33c>
 80041ba:	4b6a      	ldr	r3, [pc, #424]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	4a69      	ldr	r2, [pc, #420]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80041c0:	f023 0301 	bic.w	r3, r3, #1
 80041c4:	6713      	str	r3, [r2, #112]	; 0x70
 80041c6:	4b67      	ldr	r3, [pc, #412]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	4a66      	ldr	r2, [pc, #408]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80041cc:	f023 0304 	bic.w	r3, r3, #4
 80041d0:	6713      	str	r3, [r2, #112]	; 0x70
 80041d2:	e01c      	b.n	800420e <HAL_RCC_OscConfig+0x376>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b05      	cmp	r3, #5
 80041da:	d10c      	bne.n	80041f6 <HAL_RCC_OscConfig+0x35e>
 80041dc:	4b61      	ldr	r3, [pc, #388]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80041de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e0:	4a60      	ldr	r2, [pc, #384]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80041e2:	f043 0304 	orr.w	r3, r3, #4
 80041e6:	6713      	str	r3, [r2, #112]	; 0x70
 80041e8:	4b5e      	ldr	r3, [pc, #376]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	4a5d      	ldr	r2, [pc, #372]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	6713      	str	r3, [r2, #112]	; 0x70
 80041f4:	e00b      	b.n	800420e <HAL_RCC_OscConfig+0x376>
 80041f6:	4b5b      	ldr	r3, [pc, #364]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	4a5a      	ldr	r2, [pc, #360]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80041fc:	f023 0301 	bic.w	r3, r3, #1
 8004200:	6713      	str	r3, [r2, #112]	; 0x70
 8004202:	4b58      	ldr	r3, [pc, #352]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a57      	ldr	r2, [pc, #348]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 8004208:	f023 0304 	bic.w	r3, r3, #4
 800420c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d015      	beq.n	8004242 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004216:	f7fe fa45 	bl	80026a4 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421c:	e00a      	b.n	8004234 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421e:	f7fe fa41 	bl	80026a4 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f241 3288 	movw	r2, #5000	; 0x1388
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e0ce      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004234:	4b4b      	ldr	r3, [pc, #300]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ee      	beq.n	800421e <HAL_RCC_OscConfig+0x386>
 8004240:	e014      	b.n	800426c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004242:	f7fe fa2f 	bl	80026a4 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004248:	e00a      	b.n	8004260 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424a:	f7fe fa2b 	bl	80026a4 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f241 3288 	movw	r2, #5000	; 0x1388
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e0b8      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004260:	4b40      	ldr	r3, [pc, #256]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ee      	bne.n	800424a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d105      	bne.n	800427e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004272:	4b3c      	ldr	r3, [pc, #240]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	4a3b      	ldr	r2, [pc, #236]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 8004278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800427c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80a4 	beq.w	80043d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004288:	4b36      	ldr	r3, [pc, #216]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	2b08      	cmp	r3, #8
 8004292:	d06b      	beq.n	800436c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d149      	bne.n	8004330 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429c:	4b31      	ldr	r3, [pc, #196]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a30      	ldr	r2, [pc, #192]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80042a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fe f9fc 	bl	80026a4 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b0:	f7fe f9f8 	bl	80026a4 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e087      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c2:	4b28      	ldr	r3, [pc, #160]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69da      	ldr	r2, [r3, #28]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	019b      	lsls	r3, r3, #6
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	3b01      	subs	r3, #1
 80042e8:	041b      	lsls	r3, r3, #16
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	061b      	lsls	r3, r3, #24
 80042f2:	4313      	orrs	r3, r2
 80042f4:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80042f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042fc:	4b19      	ldr	r3, [pc, #100]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a18      	ldr	r2, [pc, #96]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 8004302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fe f9cc 	bl	80026a4 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004310:	f7fe f9c8 	bl	80026a4 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e057      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004322:	4b10      	ldr	r3, [pc, #64]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0x478>
 800432e:	e04f      	b.n	80043d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a0b      	ldr	r2, [pc, #44]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 8004336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800433a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fe f9b2 	bl	80026a4 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004344:	f7fe f9ae 	bl	80026a4 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e03d      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004356:	4b03      	ldr	r3, [pc, #12]	; (8004364 <HAL_RCC_OscConfig+0x4cc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x4ac>
 8004362:	e035      	b.n	80043d0 <HAL_RCC_OscConfig+0x538>
 8004364:	40023800 	.word	0x40023800
 8004368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800436c:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <HAL_RCC_OscConfig+0x544>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d028      	beq.n	80043cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d121      	bne.n	80043cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d11a      	bne.n	80043cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800439c:	4013      	ands	r3, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d111      	bne.n	80043cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	3b01      	subs	r3, #1
 80043b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d107      	bne.n	80043cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40023800 	.word	0x40023800

080043e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0d0      	b.n	800459a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043f8:	4b6a      	ldr	r3, [pc, #424]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d910      	bls.n	8004428 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004406:	4b67      	ldr	r3, [pc, #412]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 020f 	bic.w	r2, r3, #15
 800440e:	4965      	ldr	r1, [pc, #404]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	4313      	orrs	r3, r2
 8004414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004416:	4b63      	ldr	r3, [pc, #396]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d001      	beq.n	8004428 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0b8      	b.n	800459a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d020      	beq.n	8004476 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004440:	4b59      	ldr	r3, [pc, #356]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4a58      	ldr	r2, [pc, #352]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004446:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800444a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004458:	4b53      	ldr	r3, [pc, #332]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4a52      	ldr	r2, [pc, #328]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 800445e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004462:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004464:	4b50      	ldr	r3, [pc, #320]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	494d      	ldr	r1, [pc, #308]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004472:	4313      	orrs	r3, r2
 8004474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d040      	beq.n	8004504 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d107      	bne.n	800449a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	4b47      	ldr	r3, [pc, #284]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d115      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e07f      	b.n	800459a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d107      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a2:	4b41      	ldr	r3, [pc, #260]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d109      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e073      	b.n	800459a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b2:	4b3d      	ldr	r3, [pc, #244]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e06b      	b.n	800459a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044c2:	4b39      	ldr	r3, [pc, #228]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f023 0203 	bic.w	r2, r3, #3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	4936      	ldr	r1, [pc, #216]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d4:	f7fe f8e6 	bl	80026a4 <HAL_GetTick>
 80044d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044da:	e00a      	b.n	80044f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044dc:	f7fe f8e2 	bl	80026a4 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e053      	b.n	800459a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f2:	4b2d      	ldr	r3, [pc, #180]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 020c 	and.w	r2, r3, #12
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	429a      	cmp	r2, r3
 8004502:	d1eb      	bne.n	80044dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004504:	4b27      	ldr	r3, [pc, #156]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d210      	bcs.n	8004534 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 020f 	bic.w	r2, r3, #15
 800451a:	4922      	ldr	r1, [pc, #136]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d001      	beq.n	8004534 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e032      	b.n	800459a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004540:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4916      	ldr	r1, [pc, #88]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800455e:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	490e      	ldr	r1, [pc, #56]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004572:	f000 f821 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8004576:	4602      	mov	r2, r0
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	490a      	ldr	r1, [pc, #40]	; (80045ac <HAL_RCC_ClockConfig+0x1cc>)
 8004584:	5ccb      	ldrb	r3, [r1, r3]
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <HAL_RCC_ClockConfig+0x1d0>)
 800458c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800458e:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_RCC_ClockConfig+0x1d4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe f842 	bl	800261c <HAL_InitTick>

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40023c00 	.word	0x40023c00
 80045a8:	40023800 	.word	0x40023800
 80045ac:	0800b0f0 	.word	0x0800b0f0
 80045b0:	2000001c 	.word	0x2000001c
 80045b4:	20000020 	.word	0x20000020

080045b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	2300      	movs	r3, #0
 80045ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045d0:	4b67      	ldr	r3, [pc, #412]	; (8004770 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 030c 	and.w	r3, r3, #12
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d00d      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0x40>
 80045dc:	2b08      	cmp	r3, #8
 80045de:	f200 80bd 	bhi.w	800475c <HAL_RCC_GetSysClockFreq+0x1a4>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0x34>
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d003      	beq.n	80045f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80045ea:	e0b7      	b.n	800475c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045ec:	4b61      	ldr	r3, [pc, #388]	; (8004774 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045ee:	60bb      	str	r3, [r7, #8]
      break;
 80045f0:	e0b7      	b.n	8004762 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045f2:	4b61      	ldr	r3, [pc, #388]	; (8004778 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80045f4:	60bb      	str	r3, [r7, #8]
      break;
 80045f6:	e0b4      	b.n	8004762 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045f8:	4b5d      	ldr	r3, [pc, #372]	; (8004770 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004600:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004602:	4b5b      	ldr	r3, [pc, #364]	; (8004770 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d04d      	beq.n	80046aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800460e:	4b58      	ldr	r3, [pc, #352]	; (8004770 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	099b      	lsrs	r3, r3, #6
 8004614:	461a      	mov	r2, r3
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800461e:	f04f 0100 	mov.w	r1, #0
 8004622:	ea02 0800 	and.w	r8, r2, r0
 8004626:	ea03 0901 	and.w	r9, r3, r1
 800462a:	4640      	mov	r0, r8
 800462c:	4649      	mov	r1, r9
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	014b      	lsls	r3, r1, #5
 8004638:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800463c:	0142      	lsls	r2, r0, #5
 800463e:	4610      	mov	r0, r2
 8004640:	4619      	mov	r1, r3
 8004642:	ebb0 0008 	subs.w	r0, r0, r8
 8004646:	eb61 0109 	sbc.w	r1, r1, r9
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	018b      	lsls	r3, r1, #6
 8004654:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004658:	0182      	lsls	r2, r0, #6
 800465a:	1a12      	subs	r2, r2, r0
 800465c:	eb63 0301 	sbc.w	r3, r3, r1
 8004660:	f04f 0000 	mov.w	r0, #0
 8004664:	f04f 0100 	mov.w	r1, #0
 8004668:	00d9      	lsls	r1, r3, #3
 800466a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800466e:	00d0      	lsls	r0, r2, #3
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	eb12 0208 	adds.w	r2, r2, r8
 8004678:	eb43 0309 	adc.w	r3, r3, r9
 800467c:	f04f 0000 	mov.w	r0, #0
 8004680:	f04f 0100 	mov.w	r1, #0
 8004684:	0259      	lsls	r1, r3, #9
 8004686:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800468a:	0250      	lsls	r0, r2, #9
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4610      	mov	r0, r2
 8004692:	4619      	mov	r1, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	461a      	mov	r2, r3
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	f7fc faf4 	bl	8000c88 <__aeabi_uldivmod>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4613      	mov	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e04a      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046aa:	4b31      	ldr	r3, [pc, #196]	; (8004770 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	099b      	lsrs	r3, r3, #6
 80046b0:	461a      	mov	r2, r3
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046ba:	f04f 0100 	mov.w	r1, #0
 80046be:	ea02 0400 	and.w	r4, r2, r0
 80046c2:	ea03 0501 	and.w	r5, r3, r1
 80046c6:	4620      	mov	r0, r4
 80046c8:	4629      	mov	r1, r5
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	014b      	lsls	r3, r1, #5
 80046d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046d8:	0142      	lsls	r2, r0, #5
 80046da:	4610      	mov	r0, r2
 80046dc:	4619      	mov	r1, r3
 80046de:	1b00      	subs	r0, r0, r4
 80046e0:	eb61 0105 	sbc.w	r1, r1, r5
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	018b      	lsls	r3, r1, #6
 80046ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046f2:	0182      	lsls	r2, r0, #6
 80046f4:	1a12      	subs	r2, r2, r0
 80046f6:	eb63 0301 	sbc.w	r3, r3, r1
 80046fa:	f04f 0000 	mov.w	r0, #0
 80046fe:	f04f 0100 	mov.w	r1, #0
 8004702:	00d9      	lsls	r1, r3, #3
 8004704:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004708:	00d0      	lsls	r0, r2, #3
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	1912      	adds	r2, r2, r4
 8004710:	eb45 0303 	adc.w	r3, r5, r3
 8004714:	f04f 0000 	mov.w	r0, #0
 8004718:	f04f 0100 	mov.w	r1, #0
 800471c:	0299      	lsls	r1, r3, #10
 800471e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004722:	0290      	lsls	r0, r2, #10
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4610      	mov	r0, r2
 800472a:	4619      	mov	r1, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	461a      	mov	r2, r3
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	f7fc faa8 	bl	8000c88 <__aeabi_uldivmod>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4613      	mov	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	0c1b      	lsrs	r3, r3, #16
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	3301      	adds	r3, #1
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	fbb2 f3f3 	udiv	r3, r2, r3
 8004758:	60bb      	str	r3, [r7, #8]
      break;
 800475a:	e002      	b.n	8004762 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800475e:	60bb      	str	r3, [r7, #8]
      break;
 8004760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004762:	68bb      	ldr	r3, [r7, #8]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800
 8004774:	00f42400 	.word	0x00f42400
 8004778:	007a1200 	.word	0x007a1200

0800477c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004780:	4b03      	ldr	r3, [pc, #12]	; (8004790 <HAL_RCC_GetHCLKFreq+0x14>)
 8004782:	681b      	ldr	r3, [r3, #0]
}
 8004784:	4618      	mov	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	2000001c 	.word	0x2000001c

08004794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004798:	f7ff fff0 	bl	800477c <HAL_RCC_GetHCLKFreq>
 800479c:	4602      	mov	r2, r0
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	0a9b      	lsrs	r3, r3, #10
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	4903      	ldr	r1, [pc, #12]	; (80047b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047aa:	5ccb      	ldrb	r3, [r1, r3]
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40023800 	.word	0x40023800
 80047b8:	0800b100 	.word	0x0800b100

080047bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047c0:	f7ff ffdc 	bl	800477c <HAL_RCC_GetHCLKFreq>
 80047c4:	4602      	mov	r2, r0
 80047c6:	4b05      	ldr	r3, [pc, #20]	; (80047dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	0b5b      	lsrs	r3, r3, #13
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	4903      	ldr	r1, [pc, #12]	; (80047e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047d2:	5ccb      	ldrb	r3, [r1, r3]
 80047d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d8:	4618      	mov	r0, r3
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40023800 	.word	0x40023800
 80047e0:	0800b100 	.word	0x0800b100

080047e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d012      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800480c:	4b69      	ldr	r3, [pc, #420]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	4a68      	ldr	r2, [pc, #416]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004812:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004816:	6093      	str	r3, [r2, #8]
 8004818:	4b66      	ldr	r3, [pc, #408]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004820:	4964      	ldr	r1, [pc, #400]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004822:	4313      	orrs	r3, r2
 8004824:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800482e:	2301      	movs	r3, #1
 8004830:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d017      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800483e:	4b5d      	ldr	r3, [pc, #372]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004844:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484c:	4959      	ldr	r1, [pc, #356]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485c:	d101      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800485e:	2301      	movs	r3, #1
 8004860:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800486a:	2301      	movs	r3, #1
 800486c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d017      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800487a:	4b4e      	ldr	r3, [pc, #312]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004880:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	494a      	ldr	r1, [pc, #296]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004898:	d101      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800489a:	2301      	movs	r3, #1
 800489c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80048a6:	2301      	movs	r3, #1
 80048a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80048b6:	2301      	movs	r3, #1
 80048b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 808b 	beq.w	80049de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048c8:	4b3a      	ldr	r3, [pc, #232]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	4a39      	ldr	r2, [pc, #228]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d2:	6413      	str	r3, [r2, #64]	; 0x40
 80048d4:	4b37      	ldr	r3, [pc, #220]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048e0:	4b35      	ldr	r3, [pc, #212]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a34      	ldr	r2, [pc, #208]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ec:	f7fd feda 	bl	80026a4 <HAL_GetTick>
 80048f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f4:	f7fd fed6 	bl	80026a4 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b64      	cmp	r3, #100	; 0x64
 8004900:	d901      	bls.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e357      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004906:	4b2c      	ldr	r3, [pc, #176]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004912:	4b28      	ldr	r3, [pc, #160]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d035      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	429a      	cmp	r2, r3
 800492e:	d02e      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004930:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004938:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800493a:	4b1e      	ldr	r3, [pc, #120]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004944:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004946:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	4a1a      	ldr	r2, [pc, #104]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800494c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004950:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004952:	4a18      	ldr	r2, [pc, #96]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004958:	4b16      	ldr	r3, [pc, #88]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b01      	cmp	r3, #1
 8004962:	d114      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004964:	f7fd fe9e 	bl	80026a4 <HAL_GetTick>
 8004968:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496a:	e00a      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800496c:	f7fd fe9a 	bl	80026a4 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f241 3288 	movw	r2, #5000	; 0x1388
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e319      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004982:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0ee      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800499a:	d111      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049a8:	4b04      	ldr	r3, [pc, #16]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80049aa:	400b      	ands	r3, r1
 80049ac:	4901      	ldr	r1, [pc, #4]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	608b      	str	r3, [r1, #8]
 80049b2:	e00b      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80049b4:	40023800 	.word	0x40023800
 80049b8:	40007000 	.word	0x40007000
 80049bc:	0ffffcff 	.word	0x0ffffcff
 80049c0:	4bb1      	ldr	r3, [pc, #708]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4ab0      	ldr	r2, [pc, #704]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049ca:	6093      	str	r3, [r2, #8]
 80049cc:	4bae      	ldr	r3, [pc, #696]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d8:	49ab      	ldr	r1, [pc, #684]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d010      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049ea:	4ba7      	ldr	r3, [pc, #668]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f0:	4aa5      	ldr	r2, [pc, #660]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80049fa:	4ba3      	ldr	r3, [pc, #652]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	49a0      	ldr	r1, [pc, #640]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a18:	4b9b      	ldr	r3, [pc, #620]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a26:	4998      	ldr	r1, [pc, #608]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a3a:	4b93      	ldr	r3, [pc, #588]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a48:	498f      	ldr	r1, [pc, #572]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a5c:	4b8a      	ldr	r3, [pc, #552]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a6a:	4987      	ldr	r1, [pc, #540]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a7e:	4b82      	ldr	r3, [pc, #520]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	497e      	ldr	r1, [pc, #504]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004aa0:	4b79      	ldr	r3, [pc, #484]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa6:	f023 0203 	bic.w	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aae:	4976      	ldr	r1, [pc, #472]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ac2:	4b71      	ldr	r3, [pc, #452]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac8:	f023 020c 	bic.w	r2, r3, #12
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad0:	496d      	ldr	r1, [pc, #436]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ae4:	4b68      	ldr	r3, [pc, #416]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af2:	4965      	ldr	r1, [pc, #404]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b06:	4b60      	ldr	r3, [pc, #384]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b14:	495c      	ldr	r1, [pc, #368]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b28:	4b57      	ldr	r3, [pc, #348]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b36:	4954      	ldr	r1, [pc, #336]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b4a:	4b4f      	ldr	r3, [pc, #316]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b58:	494b      	ldr	r1, [pc, #300]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b6c:	4b46      	ldr	r3, [pc, #280]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7a:	4943      	ldr	r1, [pc, #268]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b8e:	4b3e      	ldr	r3, [pc, #248]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9c:	493a      	ldr	r1, [pc, #232]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bb0:	4b35      	ldr	r3, [pc, #212]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bbe:	4932      	ldr	r1, [pc, #200]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d011      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004bd2:	4b2d      	ldr	r3, [pc, #180]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004be0:	4929      	ldr	r1, [pc, #164]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c02:	2301      	movs	r3, #1
 8004c04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c12:	4b1d      	ldr	r3, [pc, #116]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c18:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c20:	4919      	ldr	r1, [pc, #100]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00b      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c34:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c44:	4910      	ldr	r1, [pc, #64]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d006      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 80d9 	beq.w	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c60:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a08      	ldr	r2, [pc, #32]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6c:	f7fd fd1a 	bl	80026a4 <HAL_GetTick>
 8004c70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c72:	e00b      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c74:	f7fd fd16 	bl	80026a4 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b64      	cmp	r3, #100	; 0x64
 8004c80:	d904      	bls.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e197      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c86:	bf00      	nop
 8004c88:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c8c:	4b6c      	ldr	r3, [pc, #432]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1ed      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d021      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d11d      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cac:	4b64      	ldr	r3, [pc, #400]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cb2:	0c1b      	lsrs	r3, r3, #16
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cba:	4b61      	ldr	r3, [pc, #388]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cc0:	0e1b      	lsrs	r3, r3, #24
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	019a      	lsls	r2, r3, #6
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	041b      	lsls	r3, r3, #16
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	061b      	lsls	r3, r3, #24
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	071b      	lsls	r3, r3, #28
 8004ce0:	4957      	ldr	r1, [pc, #348]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d02e      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d12:	d129      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d14:	4b4a      	ldr	r3, [pc, #296]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d1a:	0c1b      	lsrs	r3, r3, #16
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d22:	4b47      	ldr	r3, [pc, #284]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d28:	0f1b      	lsrs	r3, r3, #28
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	019a      	lsls	r2, r3, #6
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	061b      	lsls	r3, r3, #24
 8004d42:	431a      	orrs	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	071b      	lsls	r3, r3, #28
 8004d48:	493d      	ldr	r1, [pc, #244]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d50:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d56:	f023 021f 	bic.w	r2, r3, #31
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	4937      	ldr	r1, [pc, #220]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01d      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d74:	4b32      	ldr	r3, [pc, #200]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7a:	0e1b      	lsrs	r3, r3, #24
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d82:	4b2f      	ldr	r3, [pc, #188]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d88:	0f1b      	lsrs	r3, r3, #28
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	019a      	lsls	r2, r3, #6
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	061b      	lsls	r3, r3, #24
 8004da2:	431a      	orrs	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	071b      	lsls	r3, r3, #28
 8004da8:	4925      	ldr	r1, [pc, #148]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d011      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	019a      	lsls	r2, r3, #6
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	061b      	lsls	r3, r3, #24
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	071b      	lsls	r3, r3, #28
 8004dd8:	4919      	ldr	r1, [pc, #100]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004de0:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a16      	ldr	r2, [pc, #88]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004de6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dec:	f7fd fc5a 	bl	80026a4 <HAL_GetTick>
 8004df0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004df4:	f7fd fc56 	bl	80026a4 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	; 0x64
 8004e00:	d901      	bls.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e0d7      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e06:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	f040 80cd 	bne.w	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a08      	ldr	r2, [pc, #32]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e26:	f7fd fc3d 	bl	80026a4 <HAL_GetTick>
 8004e2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e2c:	e00a      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e2e:	f7fd fc39 	bl	80026a4 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b64      	cmp	r3, #100	; 0x64
 8004e3a:	d903      	bls.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e0ba      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004e40:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e44:	4b5e      	ldr	r3, [pc, #376]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e50:	d0ed      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d02e      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d12a      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e7a:	4b51      	ldr	r3, [pc, #324]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e80:	0c1b      	lsrs	r3, r3, #16
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e88:	4b4d      	ldr	r3, [pc, #308]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8e:	0f1b      	lsrs	r3, r3, #28
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	019a      	lsls	r2, r3, #6
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	041b      	lsls	r3, r3, #16
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	061b      	lsls	r3, r3, #24
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	071b      	lsls	r3, r3, #28
 8004eae:	4944      	ldr	r1, [pc, #272]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004eb6:	4b42      	ldr	r3, [pc, #264]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ebc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	493d      	ldr	r1, [pc, #244]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d022      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ee4:	d11d      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ee6:	4b36      	ldr	r3, [pc, #216]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	0e1b      	lsrs	r3, r3, #24
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ef4:	4b32      	ldr	r3, [pc, #200]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efa:	0f1b      	lsrs	r3, r3, #28
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	019a      	lsls	r2, r3, #6
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	041b      	lsls	r3, r3, #16
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	061b      	lsls	r3, r3, #24
 8004f14:	431a      	orrs	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	071b      	lsls	r3, r3, #28
 8004f1a:	4929      	ldr	r1, [pc, #164]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d028      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f2e:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f34:	0e1b      	lsrs	r3, r3, #24
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f3c:	4b20      	ldr	r3, [pc, #128]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	0c1b      	lsrs	r3, r3, #16
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	019a      	lsls	r2, r3, #6
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	041b      	lsls	r3, r3, #16
 8004f54:	431a      	orrs	r2, r3
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	061b      	lsls	r3, r3, #24
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	071b      	lsls	r3, r3, #28
 8004f62:	4917      	ldr	r1, [pc, #92]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f6a:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	4911      	ldr	r1, [pc, #68]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f80:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a0e      	ldr	r2, [pc, #56]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8c:	f7fd fb8a 	bl	80026a4 <HAL_GetTick>
 8004f90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f94:	f7fd fb86 	bl	80026a4 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b64      	cmp	r3, #100	; 0x64
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e007      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb2:	d1ef      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3720      	adds	r7, #32
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40023800 	.word	0x40023800

08004fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e049      	b.n	800506a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fd f940 	bl	8002270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f000 fe0a 	bl	8005c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d001      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e054      	b.n	8005136 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a26      	ldr	r2, [pc, #152]	; (8005144 <HAL_TIM_Base_Start_IT+0xd0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d022      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b6:	d01d      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a22      	ldr	r2, [pc, #136]	; (8005148 <HAL_TIM_Base_Start_IT+0xd4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d018      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a21      	ldr	r2, [pc, #132]	; (800514c <HAL_TIM_Base_Start_IT+0xd8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d013      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1f      	ldr	r2, [pc, #124]	; (8005150 <HAL_TIM_Base_Start_IT+0xdc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00e      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1e      	ldr	r2, [pc, #120]	; (8005154 <HAL_TIM_Base_Start_IT+0xe0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d009      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a1c      	ldr	r2, [pc, #112]	; (8005158 <HAL_TIM_Base_Start_IT+0xe4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1b      	ldr	r2, [pc, #108]	; (800515c <HAL_TIM_Base_Start_IT+0xe8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d115      	bne.n	8005120 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	4b19      	ldr	r3, [pc, #100]	; (8005160 <HAL_TIM_Base_Start_IT+0xec>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b06      	cmp	r3, #6
 8005104:	d015      	beq.n	8005132 <HAL_TIM_Base_Start_IT+0xbe>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800510c:	d011      	beq.n	8005132 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0201 	orr.w	r2, r2, #1
 800511c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511e:	e008      	b.n	8005132 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	e000      	b.n	8005134 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005132:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40010000 	.word	0x40010000
 8005148:	40000400 	.word	0x40000400
 800514c:	40000800 	.word	0x40000800
 8005150:	40000c00 	.word	0x40000c00
 8005154:	40010400 	.word	0x40010400
 8005158:	40014000 	.word	0x40014000
 800515c:	40001800 	.word	0x40001800
 8005160:	00010007 	.word	0x00010007

08005164 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e049      	b.n	800520a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f841 	bl	8005212 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f000 fd3a 	bl	8005c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e049      	b.n	80052cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d106      	bne.n	8005252 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f841 	bl	80052d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2202      	movs	r2, #2
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3304      	adds	r3, #4
 8005262:	4619      	mov	r1, r3
 8005264:	4610      	mov	r0, r2
 8005266:	f000 fcd9 	bl	8005c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d109      	bne.n	800530c <HAL_TIM_PWM_Start+0x24>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	bf14      	ite	ne
 8005304:	2301      	movne	r3, #1
 8005306:	2300      	moveq	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	e03c      	b.n	8005386 <HAL_TIM_PWM_Start+0x9e>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b04      	cmp	r3, #4
 8005310:	d109      	bne.n	8005326 <HAL_TIM_PWM_Start+0x3e>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b01      	cmp	r3, #1
 800531c:	bf14      	ite	ne
 800531e:	2301      	movne	r3, #1
 8005320:	2300      	moveq	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	e02f      	b.n	8005386 <HAL_TIM_PWM_Start+0x9e>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b08      	cmp	r3, #8
 800532a:	d109      	bne.n	8005340 <HAL_TIM_PWM_Start+0x58>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	bf14      	ite	ne
 8005338:	2301      	movne	r3, #1
 800533a:	2300      	moveq	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	e022      	b.n	8005386 <HAL_TIM_PWM_Start+0x9e>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b0c      	cmp	r3, #12
 8005344:	d109      	bne.n	800535a <HAL_TIM_PWM_Start+0x72>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b01      	cmp	r3, #1
 8005350:	bf14      	ite	ne
 8005352:	2301      	movne	r3, #1
 8005354:	2300      	moveq	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	e015      	b.n	8005386 <HAL_TIM_PWM_Start+0x9e>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b10      	cmp	r3, #16
 800535e:	d109      	bne.n	8005374 <HAL_TIM_PWM_Start+0x8c>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	bf14      	ite	ne
 800536c:	2301      	movne	r3, #1
 800536e:	2300      	moveq	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	e008      	b.n	8005386 <HAL_TIM_PWM_Start+0x9e>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	bf14      	ite	ne
 8005380:	2301      	movne	r3, #1
 8005382:	2300      	moveq	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e092      	b.n	80054b4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d104      	bne.n	800539e <HAL_TIM_PWM_Start+0xb6>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800539c:	e023      	b.n	80053e6 <HAL_TIM_PWM_Start+0xfe>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d104      	bne.n	80053ae <HAL_TIM_PWM_Start+0xc6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ac:	e01b      	b.n	80053e6 <HAL_TIM_PWM_Start+0xfe>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d104      	bne.n	80053be <HAL_TIM_PWM_Start+0xd6>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053bc:	e013      	b.n	80053e6 <HAL_TIM_PWM_Start+0xfe>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b0c      	cmp	r3, #12
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_PWM_Start+0xe6>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053cc:	e00b      	b.n	80053e6 <HAL_TIM_PWM_Start+0xfe>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d104      	bne.n	80053de <HAL_TIM_PWM_Start+0xf6>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053dc:	e003      	b.n	80053e6 <HAL_TIM_PWM_Start+0xfe>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2202      	movs	r2, #2
 80053e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2201      	movs	r2, #1
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 ffac 	bl	800634c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a30      	ldr	r2, [pc, #192]	; (80054bc <HAL_TIM_PWM_Start+0x1d4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d004      	beq.n	8005408 <HAL_TIM_PWM_Start+0x120>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a2f      	ldr	r2, [pc, #188]	; (80054c0 <HAL_TIM_PWM_Start+0x1d8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d101      	bne.n	800540c <HAL_TIM_PWM_Start+0x124>
 8005408:	2301      	movs	r3, #1
 800540a:	e000      	b.n	800540e <HAL_TIM_PWM_Start+0x126>
 800540c:	2300      	movs	r3, #0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d007      	beq.n	8005422 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005420:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a25      	ldr	r2, [pc, #148]	; (80054bc <HAL_TIM_PWM_Start+0x1d4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d022      	beq.n	8005472 <HAL_TIM_PWM_Start+0x18a>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005434:	d01d      	beq.n	8005472 <HAL_TIM_PWM_Start+0x18a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a22      	ldr	r2, [pc, #136]	; (80054c4 <HAL_TIM_PWM_Start+0x1dc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d018      	beq.n	8005472 <HAL_TIM_PWM_Start+0x18a>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a20      	ldr	r2, [pc, #128]	; (80054c8 <HAL_TIM_PWM_Start+0x1e0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <HAL_TIM_PWM_Start+0x18a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1f      	ldr	r2, [pc, #124]	; (80054cc <HAL_TIM_PWM_Start+0x1e4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00e      	beq.n	8005472 <HAL_TIM_PWM_Start+0x18a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a19      	ldr	r2, [pc, #100]	; (80054c0 <HAL_TIM_PWM_Start+0x1d8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d009      	beq.n	8005472 <HAL_TIM_PWM_Start+0x18a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1b      	ldr	r2, [pc, #108]	; (80054d0 <HAL_TIM_PWM_Start+0x1e8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d004      	beq.n	8005472 <HAL_TIM_PWM_Start+0x18a>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a19      	ldr	r2, [pc, #100]	; (80054d4 <HAL_TIM_PWM_Start+0x1ec>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d115      	bne.n	800549e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	4b17      	ldr	r3, [pc, #92]	; (80054d8 <HAL_TIM_PWM_Start+0x1f0>)
 800547a:	4013      	ands	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b06      	cmp	r3, #6
 8005482:	d015      	beq.n	80054b0 <HAL_TIM_PWM_Start+0x1c8>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800548a:	d011      	beq.n	80054b0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549c:	e008      	b.n	80054b0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0201 	orr.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	e000      	b.n	80054b2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40010000 	.word	0x40010000
 80054c0:	40010400 	.word	0x40010400
 80054c4:	40000400 	.word	0x40000400
 80054c8:	40000800 	.word	0x40000800
 80054cc:	40000c00 	.word	0x40000c00
 80054d0:	40014000 	.word	0x40014000
 80054d4:	40001800 	.word	0x40001800
 80054d8:	00010007 	.word	0x00010007

080054dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d122      	bne.n	8005538 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d11b      	bne.n	8005538 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0202 	mvn.w	r2, #2
 8005508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fb5e 	bl	8005be0 <HAL_TIM_IC_CaptureCallback>
 8005524:	e005      	b.n	8005532 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fb50 	bl	8005bcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fb61 	bl	8005bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b04      	cmp	r3, #4
 8005544:	d122      	bne.n	800558c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b04      	cmp	r3, #4
 8005552:	d11b      	bne.n	800558c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0204 	mvn.w	r2, #4
 800555c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2202      	movs	r2, #2
 8005562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fb34 	bl	8005be0 <HAL_TIM_IC_CaptureCallback>
 8005578:	e005      	b.n	8005586 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fb26 	bl	8005bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fb37 	bl	8005bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b08      	cmp	r3, #8
 8005598:	d122      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d11b      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0208 	mvn.w	r2, #8
 80055b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2204      	movs	r2, #4
 80055b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fb0a 	bl	8005be0 <HAL_TIM_IC_CaptureCallback>
 80055cc:	e005      	b.n	80055da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fafc 	bl	8005bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fb0d 	bl	8005bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0310 	and.w	r3, r3, #16
 80055ea:	2b10      	cmp	r3, #16
 80055ec:	d122      	bne.n	8005634 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b10      	cmp	r3, #16
 80055fa:	d11b      	bne.n	8005634 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0210 	mvn.w	r2, #16
 8005604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2208      	movs	r2, #8
 800560a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fae0 	bl	8005be0 <HAL_TIM_IC_CaptureCallback>
 8005620:	e005      	b.n	800562e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fad2 	bl	8005bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fae3 	bl	8005bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b01      	cmp	r3, #1
 8005640:	d10e      	bne.n	8005660 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b01      	cmp	r3, #1
 800564e:	d107      	bne.n	8005660 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0201 	mvn.w	r2, #1
 8005658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fc fb04 	bl	8001c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566a:	2b80      	cmp	r3, #128	; 0x80
 800566c:	d10e      	bne.n	800568c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005678:	2b80      	cmp	r3, #128	; 0x80
 800567a:	d107      	bne.n	800568c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 ff9c 	bl	80065c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800569a:	d10e      	bne.n	80056ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a6:	2b80      	cmp	r3, #128	; 0x80
 80056a8:	d107      	bne.n	80056ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 ff8f 	bl	80065d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c4:	2b40      	cmp	r3, #64	; 0x40
 80056c6:	d10e      	bne.n	80056e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d107      	bne.n	80056e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fa91 	bl	8005c08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d10e      	bne.n	8005712 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d107      	bne.n	8005712 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f06f 0220 	mvn.w	r2, #32
 800570a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 ff4f 	bl	80065b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005712:	bf00      	nop
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005736:	2302      	movs	r3, #2
 8005738:	e066      	b.n	8005808 <HAL_TIM_OC_ConfigChannel+0xec>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b14      	cmp	r3, #20
 8005746:	d857      	bhi.n	80057f8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005748:	a201      	add	r2, pc, #4	; (adr r2, 8005750 <HAL_TIM_OC_ConfigChannel+0x34>)
 800574a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574e:	bf00      	nop
 8005750:	080057a5 	.word	0x080057a5
 8005754:	080057f9 	.word	0x080057f9
 8005758:	080057f9 	.word	0x080057f9
 800575c:	080057f9 	.word	0x080057f9
 8005760:	080057b3 	.word	0x080057b3
 8005764:	080057f9 	.word	0x080057f9
 8005768:	080057f9 	.word	0x080057f9
 800576c:	080057f9 	.word	0x080057f9
 8005770:	080057c1 	.word	0x080057c1
 8005774:	080057f9 	.word	0x080057f9
 8005778:	080057f9 	.word	0x080057f9
 800577c:	080057f9 	.word	0x080057f9
 8005780:	080057cf 	.word	0x080057cf
 8005784:	080057f9 	.word	0x080057f9
 8005788:	080057f9 	.word	0x080057f9
 800578c:	080057f9 	.word	0x080057f9
 8005790:	080057dd 	.word	0x080057dd
 8005794:	080057f9 	.word	0x080057f9
 8005798:	080057f9 	.word	0x080057f9
 800579c:	080057f9 	.word	0x080057f9
 80057a0:	080057eb 	.word	0x080057eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fad6 	bl	8005d5c <TIM_OC1_SetConfig>
      break;
 80057b0:	e025      	b.n	80057fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 fb41 	bl	8005e40 <TIM_OC2_SetConfig>
      break;
 80057be:	e01e      	b.n	80057fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68b9      	ldr	r1, [r7, #8]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fbb2 	bl	8005f30 <TIM_OC3_SetConfig>
      break;
 80057cc:	e017      	b.n	80057fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fc21 	bl	800601c <TIM_OC4_SetConfig>
      break;
 80057da:	e010      	b.n	80057fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68b9      	ldr	r1, [r7, #8]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fc72 	bl	80060cc <TIM_OC5_SetConfig>
      break;
 80057e8:	e009      	b.n	80057fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fcbd 	bl	8006170 <TIM_OC6_SetConfig>
      break;
 80057f6:	e002      	b.n	80057fe <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	75fb      	strb	r3, [r7, #23]
      break;
 80057fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005806:	7dfb      	ldrb	r3, [r7, #23]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800582a:	2302      	movs	r3, #2
 800582c:	e0ff      	b.n	8005a2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b14      	cmp	r3, #20
 800583a:	f200 80f0 	bhi.w	8005a1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800583e:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	08005899 	.word	0x08005899
 8005848:	08005a1f 	.word	0x08005a1f
 800584c:	08005a1f 	.word	0x08005a1f
 8005850:	08005a1f 	.word	0x08005a1f
 8005854:	080058d9 	.word	0x080058d9
 8005858:	08005a1f 	.word	0x08005a1f
 800585c:	08005a1f 	.word	0x08005a1f
 8005860:	08005a1f 	.word	0x08005a1f
 8005864:	0800591b 	.word	0x0800591b
 8005868:	08005a1f 	.word	0x08005a1f
 800586c:	08005a1f 	.word	0x08005a1f
 8005870:	08005a1f 	.word	0x08005a1f
 8005874:	0800595b 	.word	0x0800595b
 8005878:	08005a1f 	.word	0x08005a1f
 800587c:	08005a1f 	.word	0x08005a1f
 8005880:	08005a1f 	.word	0x08005a1f
 8005884:	0800599d 	.word	0x0800599d
 8005888:	08005a1f 	.word	0x08005a1f
 800588c:	08005a1f 	.word	0x08005a1f
 8005890:	08005a1f 	.word	0x08005a1f
 8005894:	080059dd 	.word	0x080059dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fa5c 	bl	8005d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0208 	orr.w	r2, r2, #8
 80058b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0204 	bic.w	r2, r2, #4
 80058c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6999      	ldr	r1, [r3, #24]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	619a      	str	r2, [r3, #24]
      break;
 80058d6:	e0a5      	b.n	8005a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 faae 	bl	8005e40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699a      	ldr	r2, [r3, #24]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6999      	ldr	r1, [r3, #24]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	021a      	lsls	r2, r3, #8
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	619a      	str	r2, [r3, #24]
      break;
 8005918:	e084      	b.n	8005a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fb05 	bl	8005f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0208 	orr.w	r2, r2, #8
 8005934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0204 	bic.w	r2, r2, #4
 8005944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69d9      	ldr	r1, [r3, #28]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	61da      	str	r2, [r3, #28]
      break;
 8005958:	e064      	b.n	8005a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fb5b 	bl	800601c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69da      	ldr	r2, [r3, #28]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69da      	ldr	r2, [r3, #28]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	69d9      	ldr	r1, [r3, #28]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	021a      	lsls	r2, r3, #8
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	61da      	str	r2, [r3, #28]
      break;
 800599a:	e043      	b.n	8005a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fb92 	bl	80060cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0208 	orr.w	r2, r2, #8
 80059b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0204 	bic.w	r2, r2, #4
 80059c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	691a      	ldr	r2, [r3, #16]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059da:	e023      	b.n	8005a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fbc4 	bl	8006170 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	021a      	lsls	r2, r3, #8
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a1c:	e002      	b.n	8005a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	75fb      	strb	r3, [r7, #23]
      break;
 8005a22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop

08005a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d101      	bne.n	8005a54 <HAL_TIM_ConfigClockSource+0x1c>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e0b4      	b.n	8005bbe <HAL_TIM_ConfigClockSource+0x186>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	4b56      	ldr	r3, [pc, #344]	; (8005bc8 <HAL_TIM_ConfigClockSource+0x190>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a8c:	d03e      	beq.n	8005b0c <HAL_TIM_ConfigClockSource+0xd4>
 8005a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a92:	f200 8087 	bhi.w	8005ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9a:	f000 8086 	beq.w	8005baa <HAL_TIM_ConfigClockSource+0x172>
 8005a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa2:	d87f      	bhi.n	8005ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa4:	2b70      	cmp	r3, #112	; 0x70
 8005aa6:	d01a      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0xa6>
 8005aa8:	2b70      	cmp	r3, #112	; 0x70
 8005aaa:	d87b      	bhi.n	8005ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8005aac:	2b60      	cmp	r3, #96	; 0x60
 8005aae:	d050      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0x11a>
 8005ab0:	2b60      	cmp	r3, #96	; 0x60
 8005ab2:	d877      	bhi.n	8005ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab4:	2b50      	cmp	r3, #80	; 0x50
 8005ab6:	d03c      	beq.n	8005b32 <HAL_TIM_ConfigClockSource+0xfa>
 8005ab8:	2b50      	cmp	r3, #80	; 0x50
 8005aba:	d873      	bhi.n	8005ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8005abc:	2b40      	cmp	r3, #64	; 0x40
 8005abe:	d058      	beq.n	8005b72 <HAL_TIM_ConfigClockSource+0x13a>
 8005ac0:	2b40      	cmp	r3, #64	; 0x40
 8005ac2:	d86f      	bhi.n	8005ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac4:	2b30      	cmp	r3, #48	; 0x30
 8005ac6:	d064      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0x15a>
 8005ac8:	2b30      	cmp	r3, #48	; 0x30
 8005aca:	d86b      	bhi.n	8005ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8005acc:	2b20      	cmp	r3, #32
 8005ace:	d060      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0x15a>
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d867      	bhi.n	8005ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d05c      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0x15a>
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d05a      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0x15a>
 8005adc:	e062      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6899      	ldr	r1, [r3, #8]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f000 fc0d 	bl	800630c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	609a      	str	r2, [r3, #8]
      break;
 8005b0a:	e04f      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	6899      	ldr	r1, [r3, #8]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f000 fbf6 	bl	800630c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b2e:	609a      	str	r2, [r3, #8]
      break;
 8005b30:	e03c      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6859      	ldr	r1, [r3, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f000 fb6a 	bl	8006218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2150      	movs	r1, #80	; 0x50
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fbc3 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 8005b50:	e02c      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	6859      	ldr	r1, [r3, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f000 fb89 	bl	8006276 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2160      	movs	r1, #96	; 0x60
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fbb3 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 8005b70:	e01c      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6859      	ldr	r1, [r3, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f000 fb4a 	bl	8006218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2140      	movs	r1, #64	; 0x40
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fba3 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 8005b90:	e00c      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	f000 fb9a 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 8005ba2:	e003      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba8:	e000      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005baa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	fffeff88 	.word	0xfffeff88

08005bcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a40      	ldr	r2, [pc, #256]	; (8005d30 <TIM_Base_SetConfig+0x114>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d013      	beq.n	8005c5c <TIM_Base_SetConfig+0x40>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3a:	d00f      	beq.n	8005c5c <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a3d      	ldr	r2, [pc, #244]	; (8005d34 <TIM_Base_SetConfig+0x118>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00b      	beq.n	8005c5c <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a3c      	ldr	r2, [pc, #240]	; (8005d38 <TIM_Base_SetConfig+0x11c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d007      	beq.n	8005c5c <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3b      	ldr	r2, [pc, #236]	; (8005d3c <TIM_Base_SetConfig+0x120>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a3a      	ldr	r2, [pc, #232]	; (8005d40 <TIM_Base_SetConfig+0x124>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d108      	bne.n	8005c6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a2f      	ldr	r2, [pc, #188]	; (8005d30 <TIM_Base_SetConfig+0x114>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d02b      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7c:	d027      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a2c      	ldr	r2, [pc, #176]	; (8005d34 <TIM_Base_SetConfig+0x118>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d023      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2b      	ldr	r2, [pc, #172]	; (8005d38 <TIM_Base_SetConfig+0x11c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01f      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2a      	ldr	r2, [pc, #168]	; (8005d3c <TIM_Base_SetConfig+0x120>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01b      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a29      	ldr	r2, [pc, #164]	; (8005d40 <TIM_Base_SetConfig+0x124>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d017      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a28      	ldr	r2, [pc, #160]	; (8005d44 <TIM_Base_SetConfig+0x128>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d013      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a27      	ldr	r2, [pc, #156]	; (8005d48 <TIM_Base_SetConfig+0x12c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00f      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a26      	ldr	r2, [pc, #152]	; (8005d4c <TIM_Base_SetConfig+0x130>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00b      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a25      	ldr	r2, [pc, #148]	; (8005d50 <TIM_Base_SetConfig+0x134>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d007      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a24      	ldr	r2, [pc, #144]	; (8005d54 <TIM_Base_SetConfig+0x138>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d003      	beq.n	8005cce <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a23      	ldr	r2, [pc, #140]	; (8005d58 <TIM_Base_SetConfig+0x13c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d108      	bne.n	8005ce0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a0a      	ldr	r2, [pc, #40]	; (8005d30 <TIM_Base_SetConfig+0x114>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d003      	beq.n	8005d14 <TIM_Base_SetConfig+0xf8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a0c      	ldr	r2, [pc, #48]	; (8005d40 <TIM_Base_SetConfig+0x124>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d103      	bne.n	8005d1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	615a      	str	r2, [r3, #20]
}
 8005d22:	bf00      	nop
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40000c00 	.word	0x40000c00
 8005d40:	40010400 	.word	0x40010400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40014400 	.word	0x40014400
 8005d4c:	40014800 	.word	0x40014800
 8005d50:	40001800 	.word	0x40001800
 8005d54:	40001c00 	.word	0x40001c00
 8005d58:	40002000 	.word	0x40002000

08005d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f023 0201 	bic.w	r2, r3, #1
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	4b2b      	ldr	r3, [pc, #172]	; (8005e34 <TIM_OC1_SetConfig+0xd8>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0303 	bic.w	r3, r3, #3
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f023 0302 	bic.w	r3, r3, #2
 8005da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a21      	ldr	r2, [pc, #132]	; (8005e38 <TIM_OC1_SetConfig+0xdc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_OC1_SetConfig+0x64>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a20      	ldr	r2, [pc, #128]	; (8005e3c <TIM_OC1_SetConfig+0xe0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d10c      	bne.n	8005dda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f023 0308 	bic.w	r3, r3, #8
 8005dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f023 0304 	bic.w	r3, r3, #4
 8005dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a16      	ldr	r2, [pc, #88]	; (8005e38 <TIM_OC1_SetConfig+0xdc>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d003      	beq.n	8005dea <TIM_OC1_SetConfig+0x8e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a15      	ldr	r2, [pc, #84]	; (8005e3c <TIM_OC1_SetConfig+0xe0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d111      	bne.n	8005e0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	621a      	str	r2, [r3, #32]
}
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	fffeff8f 	.word	0xfffeff8f
 8005e38:	40010000 	.word	0x40010000
 8005e3c:	40010400 	.word	0x40010400

08005e40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	f023 0210 	bic.w	r2, r3, #16
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4b2e      	ldr	r3, [pc, #184]	; (8005f24 <TIM_OC2_SetConfig+0xe4>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f023 0320 	bic.w	r3, r3, #32
 8005e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a23      	ldr	r2, [pc, #140]	; (8005f28 <TIM_OC2_SetConfig+0xe8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d003      	beq.n	8005ea8 <TIM_OC2_SetConfig+0x68>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a22      	ldr	r2, [pc, #136]	; (8005f2c <TIM_OC2_SetConfig+0xec>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d10d      	bne.n	8005ec4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a18      	ldr	r2, [pc, #96]	; (8005f28 <TIM_OC2_SetConfig+0xe8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d003      	beq.n	8005ed4 <TIM_OC2_SetConfig+0x94>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a17      	ldr	r2, [pc, #92]	; (8005f2c <TIM_OC2_SetConfig+0xec>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d113      	bne.n	8005efc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	621a      	str	r2, [r3, #32]
}
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	feff8fff 	.word	0xfeff8fff
 8005f28:	40010000 	.word	0x40010000
 8005f2c:	40010400 	.word	0x40010400

08005f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4b2d      	ldr	r3, [pc, #180]	; (8006010 <TIM_OC3_SetConfig+0xe0>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0303 	bic.w	r3, r3, #3
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	021b      	lsls	r3, r3, #8
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a22      	ldr	r2, [pc, #136]	; (8006014 <TIM_OC3_SetConfig+0xe4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d003      	beq.n	8005f96 <TIM_OC3_SetConfig+0x66>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a21      	ldr	r2, [pc, #132]	; (8006018 <TIM_OC3_SetConfig+0xe8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d10d      	bne.n	8005fb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	021b      	lsls	r3, r3, #8
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a17      	ldr	r2, [pc, #92]	; (8006014 <TIM_OC3_SetConfig+0xe4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d003      	beq.n	8005fc2 <TIM_OC3_SetConfig+0x92>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a16      	ldr	r2, [pc, #88]	; (8006018 <TIM_OC3_SetConfig+0xe8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d113      	bne.n	8005fea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	621a      	str	r2, [r3, #32]
}
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	fffeff8f 	.word	0xfffeff8f
 8006014:	40010000 	.word	0x40010000
 8006018:	40010400 	.word	0x40010400

0800601c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4b1e      	ldr	r3, [pc, #120]	; (80060c0 <TIM_OC4_SetConfig+0xa4>)
 8006048:	4013      	ands	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	031b      	lsls	r3, r3, #12
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a13      	ldr	r2, [pc, #76]	; (80060c4 <TIM_OC4_SetConfig+0xa8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d003      	beq.n	8006084 <TIM_OC4_SetConfig+0x68>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a12      	ldr	r2, [pc, #72]	; (80060c8 <TIM_OC4_SetConfig+0xac>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d109      	bne.n	8006098 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800608a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	019b      	lsls	r3, r3, #6
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4313      	orrs	r3, r2
 8006096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	621a      	str	r2, [r3, #32]
}
 80060b2:	bf00      	nop
 80060b4:	371c      	adds	r7, #28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	feff8fff 	.word	0xfeff8fff
 80060c4:	40010000 	.word	0x40010000
 80060c8:	40010400 	.word	0x40010400

080060cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <TIM_OC5_SetConfig+0x98>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800610c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	041b      	lsls	r3, r3, #16
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a12      	ldr	r2, [pc, #72]	; (8006168 <TIM_OC5_SetConfig+0x9c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d003      	beq.n	800612a <TIM_OC5_SetConfig+0x5e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a11      	ldr	r2, [pc, #68]	; (800616c <TIM_OC5_SetConfig+0xa0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d109      	bne.n	800613e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006130:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	621a      	str	r2, [r3, #32]
}
 8006158:	bf00      	nop
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	fffeff8f 	.word	0xfffeff8f
 8006168:	40010000 	.word	0x40010000
 800616c:	40010400 	.word	0x40010400

08006170 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4b1c      	ldr	r3, [pc, #112]	; (800620c <TIM_OC6_SetConfig+0x9c>)
 800619c:	4013      	ands	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	051b      	lsls	r3, r3, #20
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a13      	ldr	r2, [pc, #76]	; (8006210 <TIM_OC6_SetConfig+0xa0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d003      	beq.n	80061d0 <TIM_OC6_SetConfig+0x60>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a12      	ldr	r2, [pc, #72]	; (8006214 <TIM_OC6_SetConfig+0xa4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d109      	bne.n	80061e4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	029b      	lsls	r3, r3, #10
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	feff8fff 	.word	0xfeff8fff
 8006210:	40010000 	.word	0x40010000
 8006214:	40010400 	.word	0x40010400

08006218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	f023 0201 	bic.w	r2, r3, #1
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f023 030a 	bic.w	r3, r3, #10
 8006254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006276:	b480      	push	{r7}
 8006278:	b087      	sub	sp, #28
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	f023 0210 	bic.w	r2, r3, #16
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	031b      	lsls	r3, r3, #12
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f043 0307 	orr.w	r3, r3, #7
 80062f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	609a      	str	r2, [r3, #8]
}
 8006300:	bf00      	nop
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	021a      	lsls	r2, r3, #8
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	431a      	orrs	r2, r3
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4313      	orrs	r3, r2
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	609a      	str	r2, [r3, #8]
}
 8006340:	bf00      	nop
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f003 031f 	and.w	r3, r3, #31
 800635e:	2201      	movs	r2, #1
 8006360:	fa02 f303 	lsl.w	r3, r2, r3
 8006364:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a1a      	ldr	r2, [r3, #32]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	43db      	mvns	r3, r3
 800636e:	401a      	ands	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a1a      	ldr	r2, [r3, #32]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	fa01 f303 	lsl.w	r3, r1, r3
 8006384:	431a      	orrs	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	621a      	str	r2, [r3, #32]
}
 800638a:	bf00      	nop
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
	...

08006398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e06d      	b.n	800648c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a30      	ldr	r2, [pc, #192]	; (8006498 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a2f      	ldr	r2, [pc, #188]	; (800649c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d108      	bne.n	80063f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80063ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a20      	ldr	r2, [pc, #128]	; (8006498 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d022      	beq.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006422:	d01d      	beq.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1d      	ldr	r2, [pc, #116]	; (80064a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d018      	beq.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1c      	ldr	r2, [pc, #112]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d013      	beq.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1a      	ldr	r2, [pc, #104]	; (80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00e      	beq.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a15      	ldr	r2, [pc, #84]	; (800649c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d009      	beq.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a16      	ldr	r2, [pc, #88]	; (80064ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a15      	ldr	r2, [pc, #84]	; (80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d10c      	bne.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006466:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	4313      	orrs	r3, r2
 8006470:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	40010000 	.word	0x40010000
 800649c:	40010400 	.word	0x40010400
 80064a0:	40000400 	.word	0x40000400
 80064a4:	40000800 	.word	0x40000800
 80064a8:	40000c00 	.word	0x40000c00
 80064ac:	40014000 	.word	0x40014000
 80064b0:	40001800 	.word	0x40001800

080064b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e065      	b.n	800659c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	041b      	lsls	r3, r3, #16
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a16      	ldr	r2, [pc, #88]	; (80065a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d004      	beq.n	800655e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a14      	ldr	r2, [pc, #80]	; (80065ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d115      	bne.n	800658a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	051b      	lsls	r3, r3, #20
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40010400 	.word	0x40010400

080065b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e040      	b.n	8006680 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006602:	2b00      	cmp	r3, #0
 8006604:	d106      	bne.n	8006614 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fb fef8 	bl	8002404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2224      	movs	r2, #36	; 0x24
 8006618:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0201 	bic.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fcc8 	bl	8006fc0 <UART_SetConfig>
 8006630:	4603      	mov	r3, r0
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e022      	b.n	8006680 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 ff1e 	bl	8007484 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006656:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006666:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0201 	orr.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 ffa5 	bl	80075c8 <UART_CheckIdleState>
 800667e:	4603      	mov	r3, r0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	; 0x28
 800668c:	af02      	add	r7, sp, #8
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	4613      	mov	r3, r2
 8006696:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800669c:	2b20      	cmp	r3, #32
 800669e:	f040 8081 	bne.w	80067a4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <HAL_UART_Transmit+0x26>
 80066a8:	88fb      	ldrh	r3, [r7, #6]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e079      	b.n	80067a6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_UART_Transmit+0x38>
 80066bc:	2302      	movs	r3, #2
 80066be:	e072      	b.n	80067a6 <HAL_UART_Transmit+0x11e>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2221      	movs	r2, #33	; 0x21
 80066d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066d6:	f7fb ffe5 	bl	80026a4 <HAL_GetTick>
 80066da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	88fa      	ldrh	r2, [r7, #6]
 80066e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	88fa      	ldrh	r2, [r7, #6]
 80066e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f4:	d108      	bne.n	8006708 <HAL_UART_Transmit+0x80>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d104      	bne.n	8006708 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	61bb      	str	r3, [r7, #24]
 8006706:	e003      	b.n	8006710 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800670c:	2300      	movs	r3, #0
 800670e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006718:	e02c      	b.n	8006774 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2200      	movs	r2, #0
 8006722:	2180      	movs	r1, #128	; 0x80
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 ff82 	bl	800762e <UART_WaitOnFlagUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e038      	b.n	80067a6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10b      	bne.n	8006752 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006748:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	3302      	adds	r3, #2
 800674e:	61bb      	str	r3, [r7, #24]
 8006750:	e007      	b.n	8006762 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	781a      	ldrb	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	3301      	adds	r3, #1
 8006760:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006768:	b29b      	uxth	r3, r3
 800676a:	3b01      	subs	r3, #1
 800676c:	b29a      	uxth	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800677a:	b29b      	uxth	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1cc      	bne.n	800671a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	2200      	movs	r2, #0
 8006788:	2140      	movs	r1, #64	; 0x40
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 ff4f 	bl	800762e <UART_WaitOnFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e005      	b.n	80067a6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	e000      	b.n	80067a6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80067a4:	2302      	movs	r3, #2
  }
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3720      	adds	r7, #32
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b08a      	sub	sp, #40	; 0x28
 80067b2:	af02      	add	r7, sp, #8
 80067b4:	60f8      	str	r0, [r7, #12]
 80067b6:	60b9      	str	r1, [r7, #8]
 80067b8:	603b      	str	r3, [r7, #0]
 80067ba:	4613      	mov	r3, r2
 80067bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067c2:	2b20      	cmp	r3, #32
 80067c4:	f040 80be 	bne.w	8006944 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <HAL_UART_Receive+0x26>
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e0b6      	b.n	8006946 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_UART_Receive+0x38>
 80067e2:	2302      	movs	r3, #2
 80067e4:	e0af      	b.n	8006946 <HAL_UART_Receive+0x198>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2222      	movs	r2, #34	; 0x22
 80067fa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006802:	f7fb ff4f 	bl	80026a4 <HAL_GetTick>
 8006806:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	88fa      	ldrh	r2, [r7, #6]
 800680c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	88fa      	ldrh	r2, [r7, #6]
 8006814:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006820:	d10e      	bne.n	8006840 <HAL_UART_Receive+0x92>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d105      	bne.n	8006836 <HAL_UART_Receive+0x88>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006830:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006834:	e02d      	b.n	8006892 <HAL_UART_Receive+0xe4>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	22ff      	movs	r2, #255	; 0xff
 800683a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800683e:	e028      	b.n	8006892 <HAL_UART_Receive+0xe4>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10d      	bne.n	8006864 <HAL_UART_Receive+0xb6>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <HAL_UART_Receive+0xac>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	22ff      	movs	r2, #255	; 0xff
 8006854:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006858:	e01b      	b.n	8006892 <HAL_UART_Receive+0xe4>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	227f      	movs	r2, #127	; 0x7f
 800685e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006862:	e016      	b.n	8006892 <HAL_UART_Receive+0xe4>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800686c:	d10d      	bne.n	800688a <HAL_UART_Receive+0xdc>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d104      	bne.n	8006880 <HAL_UART_Receive+0xd2>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	227f      	movs	r2, #127	; 0x7f
 800687a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800687e:	e008      	b.n	8006892 <HAL_UART_Receive+0xe4>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	223f      	movs	r2, #63	; 0x3f
 8006884:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006888:	e003      	b.n	8006892 <HAL_UART_Receive+0xe4>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006898:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a2:	d108      	bne.n	80068b6 <HAL_UART_Receive+0x108>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d104      	bne.n	80068b6 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80068ac:	2300      	movs	r3, #0
 80068ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	61bb      	str	r3, [r7, #24]
 80068b4:	e003      	b.n	80068be <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80068c6:	e032      	b.n	800692e <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2200      	movs	r2, #0
 80068d0:	2120      	movs	r1, #32
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 feab 	bl	800762e <UART_WaitOnFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e031      	b.n	8006946 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10c      	bne.n	8006902 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	8a7b      	ldrh	r3, [r7, #18]
 80068f2:	4013      	ands	r3, r2
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	3302      	adds	r3, #2
 80068fe:	61bb      	str	r3, [r7, #24]
 8006900:	e00c      	b.n	800691c <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	b2da      	uxtb	r2, r3
 800690a:	8a7b      	ldrh	r3, [r7, #18]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	4013      	ands	r3, r2
 8006910:	b2da      	uxtb	r2, r3
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	3301      	adds	r3, #1
 800691a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006922:	b29b      	uxth	r3, r3
 8006924:	3b01      	subs	r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1c6      	bne.n	80068c8 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	e000      	b.n	8006946 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8006944:	2302      	movs	r3, #2
  }
}
 8006946:	4618      	mov	r0, r3
 8006948:	3720      	adds	r7, #32
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b08a      	sub	sp, #40	; 0x28
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	4613      	mov	r3, r2
 800695a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006960:	2b20      	cmp	r3, #32
 8006962:	d13d      	bne.n	80069e0 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_UART_Receive_IT+0x22>
 800696a:	88fb      	ldrh	r3, [r7, #6]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e036      	b.n	80069e2 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800697a:	2b01      	cmp	r3, #1
 800697c:	d101      	bne.n	8006982 <HAL_UART_Receive_IT+0x34>
 800697e:	2302      	movs	r3, #2
 8006980:	e02f      	b.n	80069e2 <HAL_UART_Receive_IT+0x94>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d018      	beq.n	80069d0 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	613b      	str	r3, [r7, #16]
   return(result);
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	623b      	str	r3, [r7, #32]
 80069be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	69f9      	ldr	r1, [r7, #28]
 80069c2:	6a3a      	ldr	r2, [r7, #32]
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e6      	bne.n	800699e <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069d0:	88fb      	ldrh	r3, [r7, #6]
 80069d2:	461a      	mov	r2, r3
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 feee 	bl	80077b8 <UART_Start_Receive_IT>
 80069dc:	4603      	mov	r3, r0
 80069de:	e000      	b.n	80069e2 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069e0:	2302      	movs	r3, #2
  }
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3728      	adds	r7, #40	; 0x28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
	...

080069ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b0ba      	sub	sp, #232	; 0xe8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a16:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d115      	bne.n	8006a54 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00f      	beq.n	8006a54 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d009      	beq.n	8006a54 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 828f 	beq.w	8006f68 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	4798      	blx	r3
      }
      return;
 8006a52:	e289      	b.n	8006f68 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8117 	beq.w	8006c8c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d106      	bne.n	8006a78 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006a6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006a6e:	4b85      	ldr	r3, [pc, #532]	; (8006c84 <HAL_UART_IRQHandler+0x298>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 810a 	beq.w	8006c8c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d011      	beq.n	8006aa8 <HAL_UART_IRQHandler+0xbc>
 8006a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00b      	beq.n	8006aa8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2201      	movs	r2, #1
 8006a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a9e:	f043 0201 	orr.w	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d011      	beq.n	8006ad8 <HAL_UART_IRQHandler+0xec>
 8006ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00b      	beq.n	8006ad8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ace:	f043 0204 	orr.w	r2, r3, #4
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d011      	beq.n	8006b08 <HAL_UART_IRQHandler+0x11c>
 8006ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00b      	beq.n	8006b08 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2204      	movs	r2, #4
 8006af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006afe:	f043 0202 	orr.w	r2, r3, #2
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0c:	f003 0308 	and.w	r3, r3, #8
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d017      	beq.n	8006b44 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d105      	bne.n	8006b2c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00b      	beq.n	8006b44 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2208      	movs	r2, #8
 8006b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b3a:	f043 0208 	orr.w	r2, r3, #8
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d012      	beq.n	8006b76 <HAL_UART_IRQHandler+0x18a>
 8006b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00c      	beq.n	8006b76 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b6c:	f043 0220 	orr.w	r2, r3, #32
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 81f5 	beq.w	8006f6c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b86:	f003 0320 	and.w	r3, r3, #32
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00d      	beq.n	8006baa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d007      	beq.n	8006baa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbe:	2b40      	cmp	r3, #64	; 0x40
 8006bc0:	d005      	beq.n	8006bce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d04f      	beq.n	8006c6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 febc 	bl	800794c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	d141      	bne.n	8006c66 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3308      	adds	r3, #8
 8006be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3308      	adds	r3, #8
 8006c0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1d9      	bne.n	8006be2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d013      	beq.n	8006c5e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3a:	4a13      	ldr	r2, [pc, #76]	; (8006c88 <HAL_UART_IRQHandler+0x29c>)
 8006c3c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fb fedf 	bl	8002a06 <HAL_DMA_Abort_IT>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d017      	beq.n	8006c7e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006c58:	4610      	mov	r0, r2
 8006c5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c5c:	e00f      	b.n	8006c7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f998 	bl	8006f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c64:	e00b      	b.n	8006c7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f994 	bl	8006f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6c:	e007      	b.n	8006c7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f990 	bl	8006f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006c7c:	e176      	b.n	8006f6c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7e:	bf00      	nop
    return;
 8006c80:	e174      	b.n	8006f6c <HAL_UART_IRQHandler+0x580>
 8006c82:	bf00      	nop
 8006c84:	04000120 	.word	0x04000120
 8006c88:	08007a13 	.word	0x08007a13

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	f040 8144 	bne.w	8006f1e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 813d 	beq.w	8006f1e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca8:	f003 0310 	and.w	r3, r3, #16
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8136 	beq.w	8006f1e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2210      	movs	r2, #16
 8006cb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc4:	2b40      	cmp	r3, #64	; 0x40
 8006cc6:	f040 80b2 	bne.w	8006e2e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cd6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 8148 	beq.w	8006f70 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cea:	429a      	cmp	r2, r3
 8006cec:	f080 8140 	bcs.w	8006f70 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d04:	f000 8085 	beq.w	8006e12 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1da      	bne.n	8006d08 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3308      	adds	r3, #8
 8006d58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d64:	f023 0301 	bic.w	r3, r3, #1
 8006d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3308      	adds	r3, #8
 8006d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e1      	bne.n	8006d52 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006db2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006db4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006db8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e3      	bne.n	8006d8e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006de2:	f023 0310 	bic.w	r3, r3, #16
 8006de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006df4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006df6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e4      	bne.n	8006dd2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fb fd8a 	bl	8002926 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f8be 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e2c:	e0a0      	b.n	8006f70 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 8092 	beq.w	8006f74 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8006e50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 808d 	beq.w	8006f74 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e62:	e853 3f00 	ldrex	r3, [r3]
 8006e66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e4      	bne.n	8006e5a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3308      	adds	r3, #8
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	623b      	str	r3, [r7, #32]
   return(result);
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	f023 0301 	bic.w	r3, r3, #1
 8006ea6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3308      	adds	r3, #8
 8006eb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006eb4:	633a      	str	r2, [r7, #48]	; 0x30
 8006eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ebc:	e841 2300 	strex	r3, r2, [r1]
 8006ec0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1e3      	bne.n	8006e90 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0310 	bic.w	r3, r3, #16
 8006eee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006efc:	61fb      	str	r3, [r7, #28]
 8006efe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	69b9      	ldr	r1, [r7, #24]
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	617b      	str	r3, [r7, #20]
   return(result);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e4      	bne.n	8006eda <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f846 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f1c:	e02a      	b.n	8006f74 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00e      	beq.n	8006f48 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d008      	beq.n	8006f48 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d01c      	beq.n	8006f78 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
    }
    return;
 8006f46:	e017      	b.n	8006f78 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d012      	beq.n	8006f7a <HAL_UART_IRQHandler+0x58e>
 8006f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00c      	beq.n	8006f7a <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fd6c 	bl	8007a3e <UART_EndTransmit_IT>
    return;
 8006f66:	e008      	b.n	8006f7a <HAL_UART_IRQHandler+0x58e>
      return;
 8006f68:	bf00      	nop
 8006f6a:	e006      	b.n	8006f7a <HAL_UART_IRQHandler+0x58e>
    return;
 8006f6c:	bf00      	nop
 8006f6e:	e004      	b.n	8006f7a <HAL_UART_IRQHandler+0x58e>
      return;
 8006f70:	bf00      	nop
 8006f72:	e002      	b.n	8006f7a <HAL_UART_IRQHandler+0x58e>
      return;
 8006f74:	bf00      	nop
 8006f76:	e000      	b.n	8006f7a <HAL_UART_IRQHandler+0x58e>
    return;
 8006f78:	bf00      	nop
  }

}
 8006f7a:	37e8      	adds	r7, #232	; 0xe8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	4ba7      	ldr	r3, [pc, #668]	; (8007288 <UART_SetConfig+0x2c8>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6812      	ldr	r2, [r2, #0]
 8006ff2:	6979      	ldr	r1, [r7, #20]
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	430a      	orrs	r2, r1
 8007030:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a95      	ldr	r2, [pc, #596]	; (800728c <UART_SetConfig+0x2cc>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d120      	bne.n	800707e <UART_SetConfig+0xbe>
 800703c:	4b94      	ldr	r3, [pc, #592]	; (8007290 <UART_SetConfig+0x2d0>)
 800703e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	2b03      	cmp	r3, #3
 8007048:	d816      	bhi.n	8007078 <UART_SetConfig+0xb8>
 800704a:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <UART_SetConfig+0x90>)
 800704c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007050:	08007061 	.word	0x08007061
 8007054:	0800706d 	.word	0x0800706d
 8007058:	08007067 	.word	0x08007067
 800705c:	08007073 	.word	0x08007073
 8007060:	2301      	movs	r3, #1
 8007062:	77fb      	strb	r3, [r7, #31]
 8007064:	e14f      	b.n	8007306 <UART_SetConfig+0x346>
 8007066:	2302      	movs	r3, #2
 8007068:	77fb      	strb	r3, [r7, #31]
 800706a:	e14c      	b.n	8007306 <UART_SetConfig+0x346>
 800706c:	2304      	movs	r3, #4
 800706e:	77fb      	strb	r3, [r7, #31]
 8007070:	e149      	b.n	8007306 <UART_SetConfig+0x346>
 8007072:	2308      	movs	r3, #8
 8007074:	77fb      	strb	r3, [r7, #31]
 8007076:	e146      	b.n	8007306 <UART_SetConfig+0x346>
 8007078:	2310      	movs	r3, #16
 800707a:	77fb      	strb	r3, [r7, #31]
 800707c:	e143      	b.n	8007306 <UART_SetConfig+0x346>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a84      	ldr	r2, [pc, #528]	; (8007294 <UART_SetConfig+0x2d4>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d132      	bne.n	80070ee <UART_SetConfig+0x12e>
 8007088:	4b81      	ldr	r3, [pc, #516]	; (8007290 <UART_SetConfig+0x2d0>)
 800708a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800708e:	f003 030c 	and.w	r3, r3, #12
 8007092:	2b0c      	cmp	r3, #12
 8007094:	d828      	bhi.n	80070e8 <UART_SetConfig+0x128>
 8007096:	a201      	add	r2, pc, #4	; (adr r2, 800709c <UART_SetConfig+0xdc>)
 8007098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709c:	080070d1 	.word	0x080070d1
 80070a0:	080070e9 	.word	0x080070e9
 80070a4:	080070e9 	.word	0x080070e9
 80070a8:	080070e9 	.word	0x080070e9
 80070ac:	080070dd 	.word	0x080070dd
 80070b0:	080070e9 	.word	0x080070e9
 80070b4:	080070e9 	.word	0x080070e9
 80070b8:	080070e9 	.word	0x080070e9
 80070bc:	080070d7 	.word	0x080070d7
 80070c0:	080070e9 	.word	0x080070e9
 80070c4:	080070e9 	.word	0x080070e9
 80070c8:	080070e9 	.word	0x080070e9
 80070cc:	080070e3 	.word	0x080070e3
 80070d0:	2300      	movs	r3, #0
 80070d2:	77fb      	strb	r3, [r7, #31]
 80070d4:	e117      	b.n	8007306 <UART_SetConfig+0x346>
 80070d6:	2302      	movs	r3, #2
 80070d8:	77fb      	strb	r3, [r7, #31]
 80070da:	e114      	b.n	8007306 <UART_SetConfig+0x346>
 80070dc:	2304      	movs	r3, #4
 80070de:	77fb      	strb	r3, [r7, #31]
 80070e0:	e111      	b.n	8007306 <UART_SetConfig+0x346>
 80070e2:	2308      	movs	r3, #8
 80070e4:	77fb      	strb	r3, [r7, #31]
 80070e6:	e10e      	b.n	8007306 <UART_SetConfig+0x346>
 80070e8:	2310      	movs	r3, #16
 80070ea:	77fb      	strb	r3, [r7, #31]
 80070ec:	e10b      	b.n	8007306 <UART_SetConfig+0x346>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a69      	ldr	r2, [pc, #420]	; (8007298 <UART_SetConfig+0x2d8>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d120      	bne.n	800713a <UART_SetConfig+0x17a>
 80070f8:	4b65      	ldr	r3, [pc, #404]	; (8007290 <UART_SetConfig+0x2d0>)
 80070fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007102:	2b30      	cmp	r3, #48	; 0x30
 8007104:	d013      	beq.n	800712e <UART_SetConfig+0x16e>
 8007106:	2b30      	cmp	r3, #48	; 0x30
 8007108:	d814      	bhi.n	8007134 <UART_SetConfig+0x174>
 800710a:	2b20      	cmp	r3, #32
 800710c:	d009      	beq.n	8007122 <UART_SetConfig+0x162>
 800710e:	2b20      	cmp	r3, #32
 8007110:	d810      	bhi.n	8007134 <UART_SetConfig+0x174>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <UART_SetConfig+0x15c>
 8007116:	2b10      	cmp	r3, #16
 8007118:	d006      	beq.n	8007128 <UART_SetConfig+0x168>
 800711a:	e00b      	b.n	8007134 <UART_SetConfig+0x174>
 800711c:	2300      	movs	r3, #0
 800711e:	77fb      	strb	r3, [r7, #31]
 8007120:	e0f1      	b.n	8007306 <UART_SetConfig+0x346>
 8007122:	2302      	movs	r3, #2
 8007124:	77fb      	strb	r3, [r7, #31]
 8007126:	e0ee      	b.n	8007306 <UART_SetConfig+0x346>
 8007128:	2304      	movs	r3, #4
 800712a:	77fb      	strb	r3, [r7, #31]
 800712c:	e0eb      	b.n	8007306 <UART_SetConfig+0x346>
 800712e:	2308      	movs	r3, #8
 8007130:	77fb      	strb	r3, [r7, #31]
 8007132:	e0e8      	b.n	8007306 <UART_SetConfig+0x346>
 8007134:	2310      	movs	r3, #16
 8007136:	77fb      	strb	r3, [r7, #31]
 8007138:	e0e5      	b.n	8007306 <UART_SetConfig+0x346>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a57      	ldr	r2, [pc, #348]	; (800729c <UART_SetConfig+0x2dc>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d120      	bne.n	8007186 <UART_SetConfig+0x1c6>
 8007144:	4b52      	ldr	r3, [pc, #328]	; (8007290 <UART_SetConfig+0x2d0>)
 8007146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800714e:	2bc0      	cmp	r3, #192	; 0xc0
 8007150:	d013      	beq.n	800717a <UART_SetConfig+0x1ba>
 8007152:	2bc0      	cmp	r3, #192	; 0xc0
 8007154:	d814      	bhi.n	8007180 <UART_SetConfig+0x1c0>
 8007156:	2b80      	cmp	r3, #128	; 0x80
 8007158:	d009      	beq.n	800716e <UART_SetConfig+0x1ae>
 800715a:	2b80      	cmp	r3, #128	; 0x80
 800715c:	d810      	bhi.n	8007180 <UART_SetConfig+0x1c0>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <UART_SetConfig+0x1a8>
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d006      	beq.n	8007174 <UART_SetConfig+0x1b4>
 8007166:	e00b      	b.n	8007180 <UART_SetConfig+0x1c0>
 8007168:	2300      	movs	r3, #0
 800716a:	77fb      	strb	r3, [r7, #31]
 800716c:	e0cb      	b.n	8007306 <UART_SetConfig+0x346>
 800716e:	2302      	movs	r3, #2
 8007170:	77fb      	strb	r3, [r7, #31]
 8007172:	e0c8      	b.n	8007306 <UART_SetConfig+0x346>
 8007174:	2304      	movs	r3, #4
 8007176:	77fb      	strb	r3, [r7, #31]
 8007178:	e0c5      	b.n	8007306 <UART_SetConfig+0x346>
 800717a:	2308      	movs	r3, #8
 800717c:	77fb      	strb	r3, [r7, #31]
 800717e:	e0c2      	b.n	8007306 <UART_SetConfig+0x346>
 8007180:	2310      	movs	r3, #16
 8007182:	77fb      	strb	r3, [r7, #31]
 8007184:	e0bf      	b.n	8007306 <UART_SetConfig+0x346>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a45      	ldr	r2, [pc, #276]	; (80072a0 <UART_SetConfig+0x2e0>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d125      	bne.n	80071dc <UART_SetConfig+0x21c>
 8007190:	4b3f      	ldr	r3, [pc, #252]	; (8007290 <UART_SetConfig+0x2d0>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800719a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800719e:	d017      	beq.n	80071d0 <UART_SetConfig+0x210>
 80071a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071a4:	d817      	bhi.n	80071d6 <UART_SetConfig+0x216>
 80071a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071aa:	d00b      	beq.n	80071c4 <UART_SetConfig+0x204>
 80071ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b0:	d811      	bhi.n	80071d6 <UART_SetConfig+0x216>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <UART_SetConfig+0x1fe>
 80071b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ba:	d006      	beq.n	80071ca <UART_SetConfig+0x20a>
 80071bc:	e00b      	b.n	80071d6 <UART_SetConfig+0x216>
 80071be:	2300      	movs	r3, #0
 80071c0:	77fb      	strb	r3, [r7, #31]
 80071c2:	e0a0      	b.n	8007306 <UART_SetConfig+0x346>
 80071c4:	2302      	movs	r3, #2
 80071c6:	77fb      	strb	r3, [r7, #31]
 80071c8:	e09d      	b.n	8007306 <UART_SetConfig+0x346>
 80071ca:	2304      	movs	r3, #4
 80071cc:	77fb      	strb	r3, [r7, #31]
 80071ce:	e09a      	b.n	8007306 <UART_SetConfig+0x346>
 80071d0:	2308      	movs	r3, #8
 80071d2:	77fb      	strb	r3, [r7, #31]
 80071d4:	e097      	b.n	8007306 <UART_SetConfig+0x346>
 80071d6:	2310      	movs	r3, #16
 80071d8:	77fb      	strb	r3, [r7, #31]
 80071da:	e094      	b.n	8007306 <UART_SetConfig+0x346>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a30      	ldr	r2, [pc, #192]	; (80072a4 <UART_SetConfig+0x2e4>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d125      	bne.n	8007232 <UART_SetConfig+0x272>
 80071e6:	4b2a      	ldr	r3, [pc, #168]	; (8007290 <UART_SetConfig+0x2d0>)
 80071e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071f4:	d017      	beq.n	8007226 <UART_SetConfig+0x266>
 80071f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071fa:	d817      	bhi.n	800722c <UART_SetConfig+0x26c>
 80071fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007200:	d00b      	beq.n	800721a <UART_SetConfig+0x25a>
 8007202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007206:	d811      	bhi.n	800722c <UART_SetConfig+0x26c>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <UART_SetConfig+0x254>
 800720c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007210:	d006      	beq.n	8007220 <UART_SetConfig+0x260>
 8007212:	e00b      	b.n	800722c <UART_SetConfig+0x26c>
 8007214:	2301      	movs	r3, #1
 8007216:	77fb      	strb	r3, [r7, #31]
 8007218:	e075      	b.n	8007306 <UART_SetConfig+0x346>
 800721a:	2302      	movs	r3, #2
 800721c:	77fb      	strb	r3, [r7, #31]
 800721e:	e072      	b.n	8007306 <UART_SetConfig+0x346>
 8007220:	2304      	movs	r3, #4
 8007222:	77fb      	strb	r3, [r7, #31]
 8007224:	e06f      	b.n	8007306 <UART_SetConfig+0x346>
 8007226:	2308      	movs	r3, #8
 8007228:	77fb      	strb	r3, [r7, #31]
 800722a:	e06c      	b.n	8007306 <UART_SetConfig+0x346>
 800722c:	2310      	movs	r3, #16
 800722e:	77fb      	strb	r3, [r7, #31]
 8007230:	e069      	b.n	8007306 <UART_SetConfig+0x346>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1c      	ldr	r2, [pc, #112]	; (80072a8 <UART_SetConfig+0x2e8>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d137      	bne.n	80072ac <UART_SetConfig+0x2ec>
 800723c:	4b14      	ldr	r3, [pc, #80]	; (8007290 <UART_SetConfig+0x2d0>)
 800723e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007242:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007246:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800724a:	d017      	beq.n	800727c <UART_SetConfig+0x2bc>
 800724c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007250:	d817      	bhi.n	8007282 <UART_SetConfig+0x2c2>
 8007252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007256:	d00b      	beq.n	8007270 <UART_SetConfig+0x2b0>
 8007258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800725c:	d811      	bhi.n	8007282 <UART_SetConfig+0x2c2>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <UART_SetConfig+0x2aa>
 8007262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007266:	d006      	beq.n	8007276 <UART_SetConfig+0x2b6>
 8007268:	e00b      	b.n	8007282 <UART_SetConfig+0x2c2>
 800726a:	2300      	movs	r3, #0
 800726c:	77fb      	strb	r3, [r7, #31]
 800726e:	e04a      	b.n	8007306 <UART_SetConfig+0x346>
 8007270:	2302      	movs	r3, #2
 8007272:	77fb      	strb	r3, [r7, #31]
 8007274:	e047      	b.n	8007306 <UART_SetConfig+0x346>
 8007276:	2304      	movs	r3, #4
 8007278:	77fb      	strb	r3, [r7, #31]
 800727a:	e044      	b.n	8007306 <UART_SetConfig+0x346>
 800727c:	2308      	movs	r3, #8
 800727e:	77fb      	strb	r3, [r7, #31]
 8007280:	e041      	b.n	8007306 <UART_SetConfig+0x346>
 8007282:	2310      	movs	r3, #16
 8007284:	77fb      	strb	r3, [r7, #31]
 8007286:	e03e      	b.n	8007306 <UART_SetConfig+0x346>
 8007288:	efff69f3 	.word	0xefff69f3
 800728c:	40011000 	.word	0x40011000
 8007290:	40023800 	.word	0x40023800
 8007294:	40004400 	.word	0x40004400
 8007298:	40004800 	.word	0x40004800
 800729c:	40004c00 	.word	0x40004c00
 80072a0:	40005000 	.word	0x40005000
 80072a4:	40011400 	.word	0x40011400
 80072a8:	40007800 	.word	0x40007800
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a71      	ldr	r2, [pc, #452]	; (8007478 <UART_SetConfig+0x4b8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d125      	bne.n	8007302 <UART_SetConfig+0x342>
 80072b6:	4b71      	ldr	r3, [pc, #452]	; (800747c <UART_SetConfig+0x4bc>)
 80072b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80072c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80072c4:	d017      	beq.n	80072f6 <UART_SetConfig+0x336>
 80072c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80072ca:	d817      	bhi.n	80072fc <UART_SetConfig+0x33c>
 80072cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d0:	d00b      	beq.n	80072ea <UART_SetConfig+0x32a>
 80072d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d6:	d811      	bhi.n	80072fc <UART_SetConfig+0x33c>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <UART_SetConfig+0x324>
 80072dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072e0:	d006      	beq.n	80072f0 <UART_SetConfig+0x330>
 80072e2:	e00b      	b.n	80072fc <UART_SetConfig+0x33c>
 80072e4:	2300      	movs	r3, #0
 80072e6:	77fb      	strb	r3, [r7, #31]
 80072e8:	e00d      	b.n	8007306 <UART_SetConfig+0x346>
 80072ea:	2302      	movs	r3, #2
 80072ec:	77fb      	strb	r3, [r7, #31]
 80072ee:	e00a      	b.n	8007306 <UART_SetConfig+0x346>
 80072f0:	2304      	movs	r3, #4
 80072f2:	77fb      	strb	r3, [r7, #31]
 80072f4:	e007      	b.n	8007306 <UART_SetConfig+0x346>
 80072f6:	2308      	movs	r3, #8
 80072f8:	77fb      	strb	r3, [r7, #31]
 80072fa:	e004      	b.n	8007306 <UART_SetConfig+0x346>
 80072fc:	2310      	movs	r3, #16
 80072fe:	77fb      	strb	r3, [r7, #31]
 8007300:	e001      	b.n	8007306 <UART_SetConfig+0x346>
 8007302:	2310      	movs	r3, #16
 8007304:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800730e:	d15a      	bne.n	80073c6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007310:	7ffb      	ldrb	r3, [r7, #31]
 8007312:	2b08      	cmp	r3, #8
 8007314:	d827      	bhi.n	8007366 <UART_SetConfig+0x3a6>
 8007316:	a201      	add	r2, pc, #4	; (adr r2, 800731c <UART_SetConfig+0x35c>)
 8007318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731c:	08007341 	.word	0x08007341
 8007320:	08007349 	.word	0x08007349
 8007324:	08007351 	.word	0x08007351
 8007328:	08007367 	.word	0x08007367
 800732c:	08007357 	.word	0x08007357
 8007330:	08007367 	.word	0x08007367
 8007334:	08007367 	.word	0x08007367
 8007338:	08007367 	.word	0x08007367
 800733c:	0800735f 	.word	0x0800735f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007340:	f7fd fa28 	bl	8004794 <HAL_RCC_GetPCLK1Freq>
 8007344:	61b8      	str	r0, [r7, #24]
        break;
 8007346:	e013      	b.n	8007370 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007348:	f7fd fa38 	bl	80047bc <HAL_RCC_GetPCLK2Freq>
 800734c:	61b8      	str	r0, [r7, #24]
        break;
 800734e:	e00f      	b.n	8007370 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007350:	4b4b      	ldr	r3, [pc, #300]	; (8007480 <UART_SetConfig+0x4c0>)
 8007352:	61bb      	str	r3, [r7, #24]
        break;
 8007354:	e00c      	b.n	8007370 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007356:	f7fd f92f 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 800735a:	61b8      	str	r0, [r7, #24]
        break;
 800735c:	e008      	b.n	8007370 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800735e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007362:	61bb      	str	r3, [r7, #24]
        break;
 8007364:	e004      	b.n	8007370 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	77bb      	strb	r3, [r7, #30]
        break;
 800736e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d074      	beq.n	8007460 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	005a      	lsls	r2, r3, #1
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	441a      	add	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	fbb2 f3f3 	udiv	r3, r2, r3
 800738a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	2b0f      	cmp	r3, #15
 8007390:	d916      	bls.n	80073c0 <UART_SetConfig+0x400>
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007398:	d212      	bcs.n	80073c0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	b29b      	uxth	r3, r3
 800739e:	f023 030f 	bic.w	r3, r3, #15
 80073a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	085b      	lsrs	r3, r3, #1
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	89fb      	ldrh	r3, [r7, #14]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	89fa      	ldrh	r2, [r7, #14]
 80073bc:	60da      	str	r2, [r3, #12]
 80073be:	e04f      	b.n	8007460 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	77bb      	strb	r3, [r7, #30]
 80073c4:	e04c      	b.n	8007460 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073c6:	7ffb      	ldrb	r3, [r7, #31]
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d828      	bhi.n	800741e <UART_SetConfig+0x45e>
 80073cc:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <UART_SetConfig+0x414>)
 80073ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d2:	bf00      	nop
 80073d4:	080073f9 	.word	0x080073f9
 80073d8:	08007401 	.word	0x08007401
 80073dc:	08007409 	.word	0x08007409
 80073e0:	0800741f 	.word	0x0800741f
 80073e4:	0800740f 	.word	0x0800740f
 80073e8:	0800741f 	.word	0x0800741f
 80073ec:	0800741f 	.word	0x0800741f
 80073f0:	0800741f 	.word	0x0800741f
 80073f4:	08007417 	.word	0x08007417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073f8:	f7fd f9cc 	bl	8004794 <HAL_RCC_GetPCLK1Freq>
 80073fc:	61b8      	str	r0, [r7, #24]
        break;
 80073fe:	e013      	b.n	8007428 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007400:	f7fd f9dc 	bl	80047bc <HAL_RCC_GetPCLK2Freq>
 8007404:	61b8      	str	r0, [r7, #24]
        break;
 8007406:	e00f      	b.n	8007428 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007408:	4b1d      	ldr	r3, [pc, #116]	; (8007480 <UART_SetConfig+0x4c0>)
 800740a:	61bb      	str	r3, [r7, #24]
        break;
 800740c:	e00c      	b.n	8007428 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800740e:	f7fd f8d3 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8007412:	61b8      	str	r0, [r7, #24]
        break;
 8007414:	e008      	b.n	8007428 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800741a:	61bb      	str	r3, [r7, #24]
        break;
 800741c:	e004      	b.n	8007428 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	77bb      	strb	r3, [r7, #30]
        break;
 8007426:	bf00      	nop
    }

    if (pclk != 0U)
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d018      	beq.n	8007460 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	085a      	lsrs	r2, r3, #1
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	441a      	add	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007440:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	2b0f      	cmp	r3, #15
 8007446:	d909      	bls.n	800745c <UART_SetConfig+0x49c>
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800744e:	d205      	bcs.n	800745c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	b29a      	uxth	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	60da      	str	r2, [r3, #12]
 800745a:	e001      	b.n	8007460 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800746c:	7fbb      	ldrb	r3, [r7, #30]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3720      	adds	r7, #32
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40007c00 	.word	0x40007c00
 800747c:	40023800 	.word	0x40023800
 8007480:	00f42400 	.word	0x00f42400

08007484 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00a      	beq.n	80074ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	f003 0302 	and.w	r3, r3, #2
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00a      	beq.n	80074f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	430a      	orrs	r2, r1
 8007512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007518:	f003 0310 	and.w	r3, r3, #16
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00a      	beq.n	8007536 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	f003 0320 	and.w	r3, r3, #32
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01a      	beq.n	800759a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007582:	d10a      	bne.n	800759a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	605a      	str	r2, [r3, #4]
  }
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075d8:	f7fb f864 	bl	80026a4 <HAL_GetTick>
 80075dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0308 	and.w	r3, r3, #8
 80075e8:	2b08      	cmp	r3, #8
 80075ea:	d10e      	bne.n	800760a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f817 	bl	800762e <UART_WaitOnFlagUntilTimeout>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e00d      	b.n	8007626 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2220      	movs	r2, #32
 8007614:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b09c      	sub	sp, #112	; 0x70
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	603b      	str	r3, [r7, #0]
 800763a:	4613      	mov	r3, r2
 800763c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800763e:	e0a5      	b.n	800778c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007646:	f000 80a1 	beq.w	800778c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800764a:	f7fb f82b 	bl	80026a4 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007656:	429a      	cmp	r2, r3
 8007658:	d302      	bcc.n	8007660 <UART_WaitOnFlagUntilTimeout+0x32>
 800765a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800765c:	2b00      	cmp	r3, #0
 800765e:	d13e      	bne.n	80076de <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800766e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007670:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007674:	667b      	str	r3, [r7, #100]	; 0x64
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800767e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007680:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007684:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800768c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e6      	bne.n	8007660 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3308      	adds	r3, #8
 8007698:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a4:	f023 0301 	bic.w	r3, r3, #1
 80076a8:	663b      	str	r3, [r7, #96]	; 0x60
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3308      	adds	r3, #8
 80076b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80076b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e5      	bne.n	8007692 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2220      	movs	r2, #32
 80076ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2220      	movs	r2, #32
 80076d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e067      	b.n	80077ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0304 	and.w	r3, r3, #4
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d04f      	beq.n	800778c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076fa:	d147      	bne.n	800778c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007704:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770e:	e853 3f00 	ldrex	r3, [r3]
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800771a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007724:	637b      	str	r3, [r7, #52]	; 0x34
 8007726:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800772a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e6      	bne.n	8007706 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3308      	adds	r3, #8
 800773e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	613b      	str	r3, [r7, #16]
   return(result);
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f023 0301 	bic.w	r3, r3, #1
 800774e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3308      	adds	r3, #8
 8007756:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007758:	623a      	str	r2, [r7, #32]
 800775a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	69f9      	ldr	r1, [r7, #28]
 800775e:	6a3a      	ldr	r2, [r7, #32]
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	61bb      	str	r3, [r7, #24]
   return(result);
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e5      	bne.n	8007738 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2220      	movs	r2, #32
 8007770:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2220      	movs	r2, #32
 8007776:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2220      	movs	r2, #32
 800777c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e010      	b.n	80077ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	69da      	ldr	r2, [r3, #28]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	4013      	ands	r3, r2
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	429a      	cmp	r2, r3
 800779a:	bf0c      	ite	eq
 800779c:	2301      	moveq	r3, #1
 800779e:	2300      	movne	r3, #0
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	461a      	mov	r2, r3
 80077a4:	79fb      	ldrb	r3, [r7, #7]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	f43f af4a 	beq.w	8007640 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3770      	adds	r7, #112	; 0x70
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b097      	sub	sp, #92	; 0x5c
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	4613      	mov	r3, r2
 80077c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	88fa      	ldrh	r2, [r7, #6]
 80077d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	88fa      	ldrh	r2, [r7, #6]
 80077d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ea:	d10e      	bne.n	800780a <UART_Start_Receive_IT+0x52>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d105      	bne.n	8007800 <UART_Start_Receive_IT+0x48>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80077fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077fe:	e02d      	b.n	800785c <UART_Start_Receive_IT+0xa4>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	22ff      	movs	r2, #255	; 0xff
 8007804:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007808:	e028      	b.n	800785c <UART_Start_Receive_IT+0xa4>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10d      	bne.n	800782e <UART_Start_Receive_IT+0x76>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d104      	bne.n	8007824 <UART_Start_Receive_IT+0x6c>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	22ff      	movs	r2, #255	; 0xff
 800781e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007822:	e01b      	b.n	800785c <UART_Start_Receive_IT+0xa4>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	227f      	movs	r2, #127	; 0x7f
 8007828:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800782c:	e016      	b.n	800785c <UART_Start_Receive_IT+0xa4>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007836:	d10d      	bne.n	8007854 <UART_Start_Receive_IT+0x9c>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d104      	bne.n	800784a <UART_Start_Receive_IT+0x92>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	227f      	movs	r2, #127	; 0x7f
 8007844:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007848:	e008      	b.n	800785c <UART_Start_Receive_IT+0xa4>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	223f      	movs	r2, #63	; 0x3f
 800784e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007852:	e003      	b.n	800785c <UART_Start_Receive_IT+0xa4>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2222      	movs	r2, #34	; 0x22
 8007868:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3308      	adds	r3, #8
 8007870:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787c:	f043 0301 	orr.w	r3, r3, #1
 8007880:	657b      	str	r3, [r7, #84]	; 0x54
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800788a:	64ba      	str	r2, [r7, #72]	; 0x48
 800788c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e5      	bne.n	800786a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a6:	d107      	bne.n	80078b8 <UART_Start_Receive_IT+0x100>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d103      	bne.n	80078b8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4a24      	ldr	r2, [pc, #144]	; (8007944 <UART_Start_Receive_IT+0x18c>)
 80078b4:	665a      	str	r2, [r3, #100]	; 0x64
 80078b6:	e002      	b.n	80078be <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4a23      	ldr	r2, [pc, #140]	; (8007948 <UART_Start_Receive_IT+0x190>)
 80078bc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d019      	beq.n	8007902 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	e853 3f00 	ldrex	r3, [r3]
 80078da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80078e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ec:	637b      	str	r3, [r7, #52]	; 0x34
 80078ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078f4:	e841 2300 	strex	r3, r2, [r1]
 80078f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1e6      	bne.n	80078ce <UART_Start_Receive_IT+0x116>
 8007900:	e018      	b.n	8007934 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	613b      	str	r3, [r7, #16]
   return(result);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f043 0320 	orr.w	r3, r3, #32
 8007916:	653b      	str	r3, [r7, #80]	; 0x50
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	461a      	mov	r2, r3
 800791e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007920:	623b      	str	r3, [r7, #32]
 8007922:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	69f9      	ldr	r1, [r7, #28]
 8007926:	6a3a      	ldr	r2, [r7, #32]
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	61bb      	str	r3, [r7, #24]
   return(result);
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e6      	bne.n	8007902 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	375c      	adds	r7, #92	; 0x5c
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	08007bef 	.word	0x08007bef
 8007948:	08007a93 	.word	0x08007a93

0800794c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800794c:	b480      	push	{r7}
 800794e:	b095      	sub	sp, #84	; 0x54
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007968:	64fb      	str	r3, [r7, #76]	; 0x4c
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007972:	643b      	str	r3, [r7, #64]	; 0x40
 8007974:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007978:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e6      	bne.n	8007954 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3308      	adds	r3, #8
 800798c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	61fb      	str	r3, [r7, #28]
   return(result);
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	f023 0301 	bic.w	r3, r3, #1
 800799c:	64bb      	str	r3, [r7, #72]	; 0x48
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3308      	adds	r3, #8
 80079a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e5      	bne.n	8007986 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d118      	bne.n	80079f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	e853 3f00 	ldrex	r3, [r3]
 80079ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f023 0310 	bic.w	r3, r3, #16
 80079d6:	647b      	str	r3, [r7, #68]	; 0x44
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	461a      	mov	r2, r3
 80079de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079e0:	61bb      	str	r3, [r7, #24]
 80079e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	6979      	ldr	r1, [r7, #20]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	e841 2300 	strex	r3, r2, [r1]
 80079ec:	613b      	str	r3, [r7, #16]
   return(result);
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e6      	bne.n	80079c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2220      	movs	r2, #32
 80079f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007a06:	bf00      	nop
 8007a08:	3754      	adds	r7, #84	; 0x54
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f7ff faaf 	bl	8006f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a36:	bf00      	nop
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b088      	sub	sp, #32
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	e853 3f00 	ldrex	r3, [r3]
 8007a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a5a:	61fb      	str	r3, [r7, #28]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	461a      	mov	r2, r3
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	61bb      	str	r3, [r7, #24]
 8007a66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a68:	6979      	ldr	r1, [r7, #20]
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	e841 2300 	strex	r3, r2, [r1]
 8007a70:	613b      	str	r3, [r7, #16]
   return(result);
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e6      	bne.n	8007a46 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7ff fa7b 	bl	8006f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a8a:	bf00      	nop
 8007a8c:	3720      	adds	r7, #32
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b096      	sub	sp, #88	; 0x58
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007aa0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aa8:	2b22      	cmp	r3, #34	; 0x22
 8007aaa:	f040 8094 	bne.w	8007bd6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ab8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007abc:	b2d9      	uxtb	r1, r3
 8007abe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac8:	400a      	ands	r2, r1
 8007aca:	b2d2      	uxtb	r2, r2
 8007acc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad2:	1c5a      	adds	r2, r3, #1
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d177      	bne.n	8007be6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afe:	e853 3f00 	ldrex	r3, [r3]
 8007b02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b0a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	461a      	mov	r2, r3
 8007b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b14:	647b      	str	r3, [r7, #68]	; 0x44
 8007b16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b1c:	e841 2300 	strex	r3, r2, [r1]
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e6      	bne.n	8007af6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	623b      	str	r3, [r7, #32]
   return(result);
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	f023 0301 	bic.w	r3, r3, #1
 8007b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3308      	adds	r3, #8
 8007b46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b48:	633a      	str	r2, [r7, #48]	; 0x30
 8007b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e5      	bne.n	8007b28 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d12e      	bne.n	8007bce <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	e853 3f00 	ldrex	r3, [r3]
 8007b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0310 	bic.w	r3, r3, #16
 8007b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	461a      	mov	r2, r3
 8007b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b94:	61fb      	str	r3, [r7, #28]
 8007b96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b98:	69b9      	ldr	r1, [r7, #24]
 8007b9a:	69fa      	ldr	r2, [r7, #28]
 8007b9c:	e841 2300 	strex	r3, r2, [r1]
 8007ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1e6      	bne.n	8007b76 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2b10      	cmp	r3, #16
 8007bb4:	d103      	bne.n	8007bbe <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2210      	movs	r2, #16
 8007bbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7ff f9ee 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bcc:	e00b      	b.n	8007be6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7fa f8b2 	bl	8001d38 <HAL_UART_RxCpltCallback>
}
 8007bd4:	e007      	b.n	8007be6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	699a      	ldr	r2, [r3, #24]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f042 0208 	orr.w	r2, r2, #8
 8007be4:	619a      	str	r2, [r3, #24]
}
 8007be6:	bf00      	nop
 8007be8:	3758      	adds	r7, #88	; 0x58
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b096      	sub	sp, #88	; 0x58
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bfc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c04:	2b22      	cmp	r3, #34	; 0x22
 8007c06:	f040 8094 	bne.w	8007d32 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c18:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c1a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007c1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007c22:	4013      	ands	r3, r2
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c28:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2e:	1c9a      	adds	r2, r3, #2
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d177      	bne.n	8007d42 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5a:	e853 3f00 	ldrex	r3, [r3]
 8007c5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c70:	643b      	str	r3, [r7, #64]	; 0x40
 8007c72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c78:	e841 2300 	strex	r3, r2, [r1]
 8007c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1e6      	bne.n	8007c52 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	3308      	adds	r3, #8
 8007c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	f023 0301 	bic.w	r3, r3, #1
 8007c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ca4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cac:	e841 2300 	strex	r3, r2, [r1]
 8007cb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e5      	bne.n	8007c84 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d12e      	bne.n	8007d2a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	e853 3f00 	ldrex	r3, [r3]
 8007cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	f023 0310 	bic.w	r3, r3, #16
 8007ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	461a      	mov	r2, r3
 8007cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cf0:	61bb      	str	r3, [r7, #24]
 8007cf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf4:	6979      	ldr	r1, [r7, #20]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	e841 2300 	strex	r3, r2, [r1]
 8007cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1e6      	bne.n	8007cd2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	f003 0310 	and.w	r3, r3, #16
 8007d0e:	2b10      	cmp	r3, #16
 8007d10:	d103      	bne.n	8007d1a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2210      	movs	r2, #16
 8007d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff f940 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d28:	e00b      	b.n	8007d42 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fa f804 	bl	8001d38 <HAL_UART_RxCpltCallback>
}
 8007d30:	e007      	b.n	8007d42 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	699a      	ldr	r2, [r3, #24]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f042 0208 	orr.w	r2, r2, #8
 8007d40:	619a      	str	r2, [r3, #24]
}
 8007d42:	bf00      	nop
 8007d44:	3758      	adds	r7, #88	; 0x58
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
	...

08007d4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	f107 001c 	add.w	r0, r7, #28
 8007d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d120      	bne.n	8007da6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	4b20      	ldr	r3, [pc, #128]	; (8007df8 <USB_CoreInit+0xac>)
 8007d76:	4013      	ands	r3, r2
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d105      	bne.n	8007d9a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa92 	bl	80082c4 <USB_CoreReset>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]
 8007da4:	e010      	b.n	8007dc8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa86 	bl	80082c4 <USB_CoreReset>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d10b      	bne.n	8007de6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f043 0206 	orr.w	r2, r3, #6
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f043 0220 	orr.w	r2, r3, #32
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007df2:	b004      	add	sp, #16
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	ffbdffbf 	.word	0xffbdffbf

08007dfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f023 0201 	bic.w	r2, r3, #1
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	460b      	mov	r3, r1
 8007e28:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e3a:	78fb      	ldrb	r3, [r7, #3]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d115      	bne.n	8007e6c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e4c:	2001      	movs	r0, #1
 8007e4e:	f7fa fc35 	bl	80026bc <HAL_Delay>
      ms++;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3301      	adds	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fa25 	bl	80082a8 <USB_GetMode>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d01e      	beq.n	8007ea2 <USB_SetCurrentMode+0x84>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b31      	cmp	r3, #49	; 0x31
 8007e68:	d9f0      	bls.n	8007e4c <USB_SetCurrentMode+0x2e>
 8007e6a:	e01a      	b.n	8007ea2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d115      	bne.n	8007e9e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e7e:	2001      	movs	r0, #1
 8007e80:	f7fa fc1c 	bl	80026bc <HAL_Delay>
      ms++;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3301      	adds	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fa0c 	bl	80082a8 <USB_GetMode>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d005      	beq.n	8007ea2 <USB_SetCurrentMode+0x84>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b31      	cmp	r3, #49	; 0x31
 8007e9a:	d9f0      	bls.n	8007e7e <USB_SetCurrentMode+0x60>
 8007e9c:	e001      	b.n	8007ea2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e005      	b.n	8007eae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b32      	cmp	r3, #50	; 0x32
 8007ea6:	d101      	bne.n	8007eac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e000      	b.n	8007eae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
	...

08007eb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007eb8:	b084      	sub	sp, #16
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b086      	sub	sp, #24
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	613b      	str	r3, [r7, #16]
 8007ed6:	e009      	b.n	8007eec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	3340      	adds	r3, #64	; 0x40
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	613b      	str	r3, [r7, #16]
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	2b0e      	cmp	r3, #14
 8007ef0:	d9f2      	bls.n	8007ed8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d11c      	bne.n	8007f32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f06:	f043 0302 	orr.w	r3, r3, #2
 8007f0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	e005      	b.n	8007f3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f44:	461a      	mov	r2, r3
 8007f46:	2300      	movs	r3, #0
 8007f48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f50:	4619      	mov	r1, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f58:	461a      	mov	r2, r3
 8007f5a:	680b      	ldr	r3, [r1, #0]
 8007f5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d10c      	bne.n	8007f7e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d104      	bne.n	8007f74 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f961 	bl	8008234 <USB_SetDevSpeed>
 8007f72:	e008      	b.n	8007f86 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f74:	2101      	movs	r1, #1
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f95c 	bl	8008234 <USB_SetDevSpeed>
 8007f7c:	e003      	b.n	8007f86 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f7e:	2103      	movs	r1, #3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f957 	bl	8008234 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f86:	2110      	movs	r1, #16
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f8f3 	bl	8008174 <USB_FlushTxFifo>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f91d 	bl	80081d8 <USB_FlushRxFifo>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fae:	461a      	mov	r2, r3
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fba:	461a      	mov	r2, r3
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	2300      	movs	r3, #0
 8007fca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	613b      	str	r3, [r7, #16]
 8007fd0:	e043      	b.n	800805a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fe8:	d118      	bne.n	800801c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10a      	bne.n	8008006 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	015a      	lsls	r2, r3, #5
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	e013      	b.n	800802e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008012:	461a      	mov	r2, r3
 8008014:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008018:	6013      	str	r3, [r2, #0]
 800801a:	e008      	b.n	800802e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4413      	add	r3, r2
 8008024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008028:	461a      	mov	r2, r3
 800802a:	2300      	movs	r3, #0
 800802c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800803a:	461a      	mov	r2, r3
 800803c:	2300      	movs	r3, #0
 800803e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804c:	461a      	mov	r2, r3
 800804e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008052:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	3301      	adds	r3, #1
 8008058:	613b      	str	r3, [r7, #16]
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	429a      	cmp	r2, r3
 8008060:	d3b7      	bcc.n	8007fd2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008062:	2300      	movs	r3, #0
 8008064:	613b      	str	r3, [r7, #16]
 8008066:	e043      	b.n	80080f0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	015a      	lsls	r2, r3, #5
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	4413      	add	r3, r2
 8008070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800807a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800807e:	d118      	bne.n	80080b2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10a      	bne.n	800809c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	015a      	lsls	r2, r3, #5
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	4413      	add	r3, r2
 800808e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008092:	461a      	mov	r2, r3
 8008094:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008098:	6013      	str	r3, [r2, #0]
 800809a:	e013      	b.n	80080c4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a8:	461a      	mov	r2, r3
 80080aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	e008      	b.n	80080c4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080be:	461a      	mov	r2, r3
 80080c0:	2300      	movs	r3, #0
 80080c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d0:	461a      	mov	r2, r3
 80080d2:	2300      	movs	r3, #0
 80080d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e2:	461a      	mov	r2, r3
 80080e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	3301      	adds	r3, #1
 80080ee:	613b      	str	r3, [r7, #16]
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d3b7      	bcc.n	8008068 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800810a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008118:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	2b00      	cmp	r3, #0
 800811e:	d105      	bne.n	800812c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	f043 0210 	orr.w	r2, r3, #16
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	699a      	ldr	r2, [r3, #24]
 8008130:	4b0e      	ldr	r3, [pc, #56]	; (800816c <USB_DevInit+0x2b4>)
 8008132:	4313      	orrs	r3, r2
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800813a:	2b00      	cmp	r3, #0
 800813c:	d005      	beq.n	800814a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	f043 0208 	orr.w	r2, r3, #8
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800814a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800814c:	2b01      	cmp	r3, #1
 800814e:	d105      	bne.n	800815c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699a      	ldr	r2, [r3, #24]
 8008154:	4b06      	ldr	r3, [pc, #24]	; (8008170 <USB_DevInit+0x2b8>)
 8008156:	4313      	orrs	r3, r2
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800815c:	7dfb      	ldrb	r3, [r7, #23]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008168:	b004      	add	sp, #16
 800816a:	4770      	bx	lr
 800816c:	803c3800 	.word	0x803c3800
 8008170:	40000004 	.word	0x40000004

08008174 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3301      	adds	r3, #1
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	4a12      	ldr	r2, [pc, #72]	; (80081d4 <USB_FlushTxFifo+0x60>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d901      	bls.n	8008192 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e01a      	b.n	80081c8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	daf3      	bge.n	8008182 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	019b      	lsls	r3, r3, #6
 80081a2:	f043 0220 	orr.w	r2, r3, #32
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3301      	adds	r3, #1
 80081ae:	60fb      	str	r3, [r7, #12]
 80081b0:	4a08      	ldr	r2, [pc, #32]	; (80081d4 <USB_FlushTxFifo+0x60>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d901      	bls.n	80081ba <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e006      	b.n	80081c8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	f003 0320 	and.w	r3, r3, #32
 80081c2:	2b20      	cmp	r3, #32
 80081c4:	d0f1      	beq.n	80081aa <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	00030d40 	.word	0x00030d40

080081d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	3301      	adds	r3, #1
 80081e8:	60fb      	str	r3, [r7, #12]
 80081ea:	4a11      	ldr	r2, [pc, #68]	; (8008230 <USB_FlushRxFifo+0x58>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d901      	bls.n	80081f4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e017      	b.n	8008224 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	daf3      	bge.n	80081e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2210      	movs	r2, #16
 8008204:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	4a08      	ldr	r2, [pc, #32]	; (8008230 <USB_FlushRxFifo+0x58>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d901      	bls.n	8008216 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e006      	b.n	8008224 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f003 0310 	and.w	r3, r3, #16
 800821e:	2b10      	cmp	r3, #16
 8008220:	d0f1      	beq.n	8008206 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	00030d40 	.word	0x00030d40

08008234 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	78fb      	ldrb	r3, [r7, #3]
 800824e:	68f9      	ldr	r1, [r7, #12]
 8008250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008254:	4313      	orrs	r3, r2
 8008256:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008266:	b480      	push	{r7}
 8008268:	b085      	sub	sp, #20
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008280:	f023 0303 	bic.w	r3, r3, #3
 8008284:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008294:	f043 0302 	orr.w	r3, r3, #2
 8008298:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	695b      	ldr	r3, [r3, #20]
 80082b4:	f003 0301 	and.w	r3, r3, #1
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3301      	adds	r3, #1
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	4a13      	ldr	r2, [pc, #76]	; (8008324 <USB_CoreReset+0x60>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d901      	bls.n	80082e0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e01a      	b.n	8008316 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	daf3      	bge.n	80082d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	f043 0201 	orr.w	r2, r3, #1
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3301      	adds	r3, #1
 80082fc:	60fb      	str	r3, [r7, #12]
 80082fe:	4a09      	ldr	r2, [pc, #36]	; (8008324 <USB_CoreReset+0x60>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d901      	bls.n	8008308 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e006      	b.n	8008316 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b01      	cmp	r3, #1
 8008312:	d0f1      	beq.n	80082f8 <USB_CoreReset+0x34>

  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	00030d40 	.word	0x00030d40

08008328 <__errno>:
 8008328:	4b01      	ldr	r3, [pc, #4]	; (8008330 <__errno+0x8>)
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	20000028 	.word	0x20000028

08008334 <__libc_init_array>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	4d0d      	ldr	r5, [pc, #52]	; (800836c <__libc_init_array+0x38>)
 8008338:	4c0d      	ldr	r4, [pc, #52]	; (8008370 <__libc_init_array+0x3c>)
 800833a:	1b64      	subs	r4, r4, r5
 800833c:	10a4      	asrs	r4, r4, #2
 800833e:	2600      	movs	r6, #0
 8008340:	42a6      	cmp	r6, r4
 8008342:	d109      	bne.n	8008358 <__libc_init_array+0x24>
 8008344:	4d0b      	ldr	r5, [pc, #44]	; (8008374 <__libc_init_array+0x40>)
 8008346:	4c0c      	ldr	r4, [pc, #48]	; (8008378 <__libc_init_array+0x44>)
 8008348:	f002 feb4 	bl	800b0b4 <_init>
 800834c:	1b64      	subs	r4, r4, r5
 800834e:	10a4      	asrs	r4, r4, #2
 8008350:	2600      	movs	r6, #0
 8008352:	42a6      	cmp	r6, r4
 8008354:	d105      	bne.n	8008362 <__libc_init_array+0x2e>
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	f855 3b04 	ldr.w	r3, [r5], #4
 800835c:	4798      	blx	r3
 800835e:	3601      	adds	r6, #1
 8008360:	e7ee      	b.n	8008340 <__libc_init_array+0xc>
 8008362:	f855 3b04 	ldr.w	r3, [r5], #4
 8008366:	4798      	blx	r3
 8008368:	3601      	adds	r6, #1
 800836a:	e7f2      	b.n	8008352 <__libc_init_array+0x1e>
 800836c:	0800b4f4 	.word	0x0800b4f4
 8008370:	0800b4f4 	.word	0x0800b4f4
 8008374:	0800b4f4 	.word	0x0800b4f4
 8008378:	0800b4f8 	.word	0x0800b4f8

0800837c <memset>:
 800837c:	4402      	add	r2, r0
 800837e:	4603      	mov	r3, r0
 8008380:	4293      	cmp	r3, r2
 8008382:	d100      	bne.n	8008386 <memset+0xa>
 8008384:	4770      	bx	lr
 8008386:	f803 1b01 	strb.w	r1, [r3], #1
 800838a:	e7f9      	b.n	8008380 <memset+0x4>

0800838c <__cvt>:
 800838c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008390:	ec55 4b10 	vmov	r4, r5, d0
 8008394:	2d00      	cmp	r5, #0
 8008396:	460e      	mov	r6, r1
 8008398:	4619      	mov	r1, r3
 800839a:	462b      	mov	r3, r5
 800839c:	bfbb      	ittet	lt
 800839e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80083a2:	461d      	movlt	r5, r3
 80083a4:	2300      	movge	r3, #0
 80083a6:	232d      	movlt	r3, #45	; 0x2d
 80083a8:	700b      	strb	r3, [r1, #0]
 80083aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80083b0:	4691      	mov	r9, r2
 80083b2:	f023 0820 	bic.w	r8, r3, #32
 80083b6:	bfbc      	itt	lt
 80083b8:	4622      	movlt	r2, r4
 80083ba:	4614      	movlt	r4, r2
 80083bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083c0:	d005      	beq.n	80083ce <__cvt+0x42>
 80083c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80083c6:	d100      	bne.n	80083ca <__cvt+0x3e>
 80083c8:	3601      	adds	r6, #1
 80083ca:	2102      	movs	r1, #2
 80083cc:	e000      	b.n	80083d0 <__cvt+0x44>
 80083ce:	2103      	movs	r1, #3
 80083d0:	ab03      	add	r3, sp, #12
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	ab02      	add	r3, sp, #8
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	ec45 4b10 	vmov	d0, r4, r5
 80083dc:	4653      	mov	r3, sl
 80083de:	4632      	mov	r2, r6
 80083e0:	f000 fcea 	bl	8008db8 <_dtoa_r>
 80083e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80083e8:	4607      	mov	r7, r0
 80083ea:	d102      	bne.n	80083f2 <__cvt+0x66>
 80083ec:	f019 0f01 	tst.w	r9, #1
 80083f0:	d022      	beq.n	8008438 <__cvt+0xac>
 80083f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083f6:	eb07 0906 	add.w	r9, r7, r6
 80083fa:	d110      	bne.n	800841e <__cvt+0x92>
 80083fc:	783b      	ldrb	r3, [r7, #0]
 80083fe:	2b30      	cmp	r3, #48	; 0x30
 8008400:	d10a      	bne.n	8008418 <__cvt+0x8c>
 8008402:	2200      	movs	r2, #0
 8008404:	2300      	movs	r3, #0
 8008406:	4620      	mov	r0, r4
 8008408:	4629      	mov	r1, r5
 800840a:	f7f8 fb7d 	bl	8000b08 <__aeabi_dcmpeq>
 800840e:	b918      	cbnz	r0, 8008418 <__cvt+0x8c>
 8008410:	f1c6 0601 	rsb	r6, r6, #1
 8008414:	f8ca 6000 	str.w	r6, [sl]
 8008418:	f8da 3000 	ldr.w	r3, [sl]
 800841c:	4499      	add	r9, r3
 800841e:	2200      	movs	r2, #0
 8008420:	2300      	movs	r3, #0
 8008422:	4620      	mov	r0, r4
 8008424:	4629      	mov	r1, r5
 8008426:	f7f8 fb6f 	bl	8000b08 <__aeabi_dcmpeq>
 800842a:	b108      	cbz	r0, 8008430 <__cvt+0xa4>
 800842c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008430:	2230      	movs	r2, #48	; 0x30
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	454b      	cmp	r3, r9
 8008436:	d307      	bcc.n	8008448 <__cvt+0xbc>
 8008438:	9b03      	ldr	r3, [sp, #12]
 800843a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800843c:	1bdb      	subs	r3, r3, r7
 800843e:	4638      	mov	r0, r7
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	b004      	add	sp, #16
 8008444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008448:	1c59      	adds	r1, r3, #1
 800844a:	9103      	str	r1, [sp, #12]
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	e7f0      	b.n	8008432 <__cvt+0xa6>

08008450 <__exponent>:
 8008450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008452:	4603      	mov	r3, r0
 8008454:	2900      	cmp	r1, #0
 8008456:	bfb8      	it	lt
 8008458:	4249      	neglt	r1, r1
 800845a:	f803 2b02 	strb.w	r2, [r3], #2
 800845e:	bfb4      	ite	lt
 8008460:	222d      	movlt	r2, #45	; 0x2d
 8008462:	222b      	movge	r2, #43	; 0x2b
 8008464:	2909      	cmp	r1, #9
 8008466:	7042      	strb	r2, [r0, #1]
 8008468:	dd2a      	ble.n	80084c0 <__exponent+0x70>
 800846a:	f10d 0407 	add.w	r4, sp, #7
 800846e:	46a4      	mov	ip, r4
 8008470:	270a      	movs	r7, #10
 8008472:	46a6      	mov	lr, r4
 8008474:	460a      	mov	r2, r1
 8008476:	fb91 f6f7 	sdiv	r6, r1, r7
 800847a:	fb07 1516 	mls	r5, r7, r6, r1
 800847e:	3530      	adds	r5, #48	; 0x30
 8008480:	2a63      	cmp	r2, #99	; 0x63
 8008482:	f104 34ff 	add.w	r4, r4, #4294967295
 8008486:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800848a:	4631      	mov	r1, r6
 800848c:	dcf1      	bgt.n	8008472 <__exponent+0x22>
 800848e:	3130      	adds	r1, #48	; 0x30
 8008490:	f1ae 0502 	sub.w	r5, lr, #2
 8008494:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008498:	1c44      	adds	r4, r0, #1
 800849a:	4629      	mov	r1, r5
 800849c:	4561      	cmp	r1, ip
 800849e:	d30a      	bcc.n	80084b6 <__exponent+0x66>
 80084a0:	f10d 0209 	add.w	r2, sp, #9
 80084a4:	eba2 020e 	sub.w	r2, r2, lr
 80084a8:	4565      	cmp	r5, ip
 80084aa:	bf88      	it	hi
 80084ac:	2200      	movhi	r2, #0
 80084ae:	4413      	add	r3, r2
 80084b0:	1a18      	subs	r0, r3, r0
 80084b2:	b003      	add	sp, #12
 80084b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80084be:	e7ed      	b.n	800849c <__exponent+0x4c>
 80084c0:	2330      	movs	r3, #48	; 0x30
 80084c2:	3130      	adds	r1, #48	; 0x30
 80084c4:	7083      	strb	r3, [r0, #2]
 80084c6:	70c1      	strb	r1, [r0, #3]
 80084c8:	1d03      	adds	r3, r0, #4
 80084ca:	e7f1      	b.n	80084b0 <__exponent+0x60>

080084cc <_printf_float>:
 80084cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d0:	ed2d 8b02 	vpush	{d8}
 80084d4:	b08d      	sub	sp, #52	; 0x34
 80084d6:	460c      	mov	r4, r1
 80084d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80084dc:	4616      	mov	r6, r2
 80084de:	461f      	mov	r7, r3
 80084e0:	4605      	mov	r5, r0
 80084e2:	f001 fa55 	bl	8009990 <_localeconv_r>
 80084e6:	f8d0 a000 	ldr.w	sl, [r0]
 80084ea:	4650      	mov	r0, sl
 80084ec:	f7f7 fe90 	bl	8000210 <strlen>
 80084f0:	2300      	movs	r3, #0
 80084f2:	930a      	str	r3, [sp, #40]	; 0x28
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	9305      	str	r3, [sp, #20]
 80084f8:	f8d8 3000 	ldr.w	r3, [r8]
 80084fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008500:	3307      	adds	r3, #7
 8008502:	f023 0307 	bic.w	r3, r3, #7
 8008506:	f103 0208 	add.w	r2, r3, #8
 800850a:	f8c8 2000 	str.w	r2, [r8]
 800850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008512:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008516:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800851a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800851e:	9307      	str	r3, [sp, #28]
 8008520:	f8cd 8018 	str.w	r8, [sp, #24]
 8008524:	ee08 0a10 	vmov	s16, r0
 8008528:	4b9f      	ldr	r3, [pc, #636]	; (80087a8 <_printf_float+0x2dc>)
 800852a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800852e:	f04f 32ff 	mov.w	r2, #4294967295
 8008532:	f7f8 fb1b 	bl	8000b6c <__aeabi_dcmpun>
 8008536:	bb88      	cbnz	r0, 800859c <_printf_float+0xd0>
 8008538:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800853c:	4b9a      	ldr	r3, [pc, #616]	; (80087a8 <_printf_float+0x2dc>)
 800853e:	f04f 32ff 	mov.w	r2, #4294967295
 8008542:	f7f8 faf5 	bl	8000b30 <__aeabi_dcmple>
 8008546:	bb48      	cbnz	r0, 800859c <_printf_float+0xd0>
 8008548:	2200      	movs	r2, #0
 800854a:	2300      	movs	r3, #0
 800854c:	4640      	mov	r0, r8
 800854e:	4649      	mov	r1, r9
 8008550:	f7f8 fae4 	bl	8000b1c <__aeabi_dcmplt>
 8008554:	b110      	cbz	r0, 800855c <_printf_float+0x90>
 8008556:	232d      	movs	r3, #45	; 0x2d
 8008558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800855c:	4b93      	ldr	r3, [pc, #588]	; (80087ac <_printf_float+0x2e0>)
 800855e:	4894      	ldr	r0, [pc, #592]	; (80087b0 <_printf_float+0x2e4>)
 8008560:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008564:	bf94      	ite	ls
 8008566:	4698      	movls	r8, r3
 8008568:	4680      	movhi	r8, r0
 800856a:	2303      	movs	r3, #3
 800856c:	6123      	str	r3, [r4, #16]
 800856e:	9b05      	ldr	r3, [sp, #20]
 8008570:	f023 0204 	bic.w	r2, r3, #4
 8008574:	6022      	str	r2, [r4, #0]
 8008576:	f04f 0900 	mov.w	r9, #0
 800857a:	9700      	str	r7, [sp, #0]
 800857c:	4633      	mov	r3, r6
 800857e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008580:	4621      	mov	r1, r4
 8008582:	4628      	mov	r0, r5
 8008584:	f000 f9d8 	bl	8008938 <_printf_common>
 8008588:	3001      	adds	r0, #1
 800858a:	f040 8090 	bne.w	80086ae <_printf_float+0x1e2>
 800858e:	f04f 30ff 	mov.w	r0, #4294967295
 8008592:	b00d      	add	sp, #52	; 0x34
 8008594:	ecbd 8b02 	vpop	{d8}
 8008598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859c:	4642      	mov	r2, r8
 800859e:	464b      	mov	r3, r9
 80085a0:	4640      	mov	r0, r8
 80085a2:	4649      	mov	r1, r9
 80085a4:	f7f8 fae2 	bl	8000b6c <__aeabi_dcmpun>
 80085a8:	b140      	cbz	r0, 80085bc <_printf_float+0xf0>
 80085aa:	464b      	mov	r3, r9
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	bfbc      	itt	lt
 80085b0:	232d      	movlt	r3, #45	; 0x2d
 80085b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80085b6:	487f      	ldr	r0, [pc, #508]	; (80087b4 <_printf_float+0x2e8>)
 80085b8:	4b7f      	ldr	r3, [pc, #508]	; (80087b8 <_printf_float+0x2ec>)
 80085ba:	e7d1      	b.n	8008560 <_printf_float+0x94>
 80085bc:	6863      	ldr	r3, [r4, #4]
 80085be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80085c2:	9206      	str	r2, [sp, #24]
 80085c4:	1c5a      	adds	r2, r3, #1
 80085c6:	d13f      	bne.n	8008648 <_printf_float+0x17c>
 80085c8:	2306      	movs	r3, #6
 80085ca:	6063      	str	r3, [r4, #4]
 80085cc:	9b05      	ldr	r3, [sp, #20]
 80085ce:	6861      	ldr	r1, [r4, #4]
 80085d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80085d4:	2300      	movs	r3, #0
 80085d6:	9303      	str	r3, [sp, #12]
 80085d8:	ab0a      	add	r3, sp, #40	; 0x28
 80085da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80085de:	ab09      	add	r3, sp, #36	; 0x24
 80085e0:	ec49 8b10 	vmov	d0, r8, r9
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	6022      	str	r2, [r4, #0]
 80085e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80085ec:	4628      	mov	r0, r5
 80085ee:	f7ff fecd 	bl	800838c <__cvt>
 80085f2:	9b06      	ldr	r3, [sp, #24]
 80085f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085f6:	2b47      	cmp	r3, #71	; 0x47
 80085f8:	4680      	mov	r8, r0
 80085fa:	d108      	bne.n	800860e <_printf_float+0x142>
 80085fc:	1cc8      	adds	r0, r1, #3
 80085fe:	db02      	blt.n	8008606 <_printf_float+0x13a>
 8008600:	6863      	ldr	r3, [r4, #4]
 8008602:	4299      	cmp	r1, r3
 8008604:	dd41      	ble.n	800868a <_printf_float+0x1be>
 8008606:	f1ab 0b02 	sub.w	fp, fp, #2
 800860a:	fa5f fb8b 	uxtb.w	fp, fp
 800860e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008612:	d820      	bhi.n	8008656 <_printf_float+0x18a>
 8008614:	3901      	subs	r1, #1
 8008616:	465a      	mov	r2, fp
 8008618:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800861c:	9109      	str	r1, [sp, #36]	; 0x24
 800861e:	f7ff ff17 	bl	8008450 <__exponent>
 8008622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008624:	1813      	adds	r3, r2, r0
 8008626:	2a01      	cmp	r2, #1
 8008628:	4681      	mov	r9, r0
 800862a:	6123      	str	r3, [r4, #16]
 800862c:	dc02      	bgt.n	8008634 <_printf_float+0x168>
 800862e:	6822      	ldr	r2, [r4, #0]
 8008630:	07d2      	lsls	r2, r2, #31
 8008632:	d501      	bpl.n	8008638 <_printf_float+0x16c>
 8008634:	3301      	adds	r3, #1
 8008636:	6123      	str	r3, [r4, #16]
 8008638:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800863c:	2b00      	cmp	r3, #0
 800863e:	d09c      	beq.n	800857a <_printf_float+0xae>
 8008640:	232d      	movs	r3, #45	; 0x2d
 8008642:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008646:	e798      	b.n	800857a <_printf_float+0xae>
 8008648:	9a06      	ldr	r2, [sp, #24]
 800864a:	2a47      	cmp	r2, #71	; 0x47
 800864c:	d1be      	bne.n	80085cc <_printf_float+0x100>
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1bc      	bne.n	80085cc <_printf_float+0x100>
 8008652:	2301      	movs	r3, #1
 8008654:	e7b9      	b.n	80085ca <_printf_float+0xfe>
 8008656:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800865a:	d118      	bne.n	800868e <_printf_float+0x1c2>
 800865c:	2900      	cmp	r1, #0
 800865e:	6863      	ldr	r3, [r4, #4]
 8008660:	dd0b      	ble.n	800867a <_printf_float+0x1ae>
 8008662:	6121      	str	r1, [r4, #16]
 8008664:	b913      	cbnz	r3, 800866c <_printf_float+0x1a0>
 8008666:	6822      	ldr	r2, [r4, #0]
 8008668:	07d0      	lsls	r0, r2, #31
 800866a:	d502      	bpl.n	8008672 <_printf_float+0x1a6>
 800866c:	3301      	adds	r3, #1
 800866e:	440b      	add	r3, r1
 8008670:	6123      	str	r3, [r4, #16]
 8008672:	65a1      	str	r1, [r4, #88]	; 0x58
 8008674:	f04f 0900 	mov.w	r9, #0
 8008678:	e7de      	b.n	8008638 <_printf_float+0x16c>
 800867a:	b913      	cbnz	r3, 8008682 <_printf_float+0x1b6>
 800867c:	6822      	ldr	r2, [r4, #0]
 800867e:	07d2      	lsls	r2, r2, #31
 8008680:	d501      	bpl.n	8008686 <_printf_float+0x1ba>
 8008682:	3302      	adds	r3, #2
 8008684:	e7f4      	b.n	8008670 <_printf_float+0x1a4>
 8008686:	2301      	movs	r3, #1
 8008688:	e7f2      	b.n	8008670 <_printf_float+0x1a4>
 800868a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800868e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008690:	4299      	cmp	r1, r3
 8008692:	db05      	blt.n	80086a0 <_printf_float+0x1d4>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	6121      	str	r1, [r4, #16]
 8008698:	07d8      	lsls	r0, r3, #31
 800869a:	d5ea      	bpl.n	8008672 <_printf_float+0x1a6>
 800869c:	1c4b      	adds	r3, r1, #1
 800869e:	e7e7      	b.n	8008670 <_printf_float+0x1a4>
 80086a0:	2900      	cmp	r1, #0
 80086a2:	bfd4      	ite	le
 80086a4:	f1c1 0202 	rsble	r2, r1, #2
 80086a8:	2201      	movgt	r2, #1
 80086aa:	4413      	add	r3, r2
 80086ac:	e7e0      	b.n	8008670 <_printf_float+0x1a4>
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	055a      	lsls	r2, r3, #21
 80086b2:	d407      	bmi.n	80086c4 <_printf_float+0x1f8>
 80086b4:	6923      	ldr	r3, [r4, #16]
 80086b6:	4642      	mov	r2, r8
 80086b8:	4631      	mov	r1, r6
 80086ba:	4628      	mov	r0, r5
 80086bc:	47b8      	blx	r7
 80086be:	3001      	adds	r0, #1
 80086c0:	d12c      	bne.n	800871c <_printf_float+0x250>
 80086c2:	e764      	b.n	800858e <_printf_float+0xc2>
 80086c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086c8:	f240 80e0 	bls.w	800888c <_printf_float+0x3c0>
 80086cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086d0:	2200      	movs	r2, #0
 80086d2:	2300      	movs	r3, #0
 80086d4:	f7f8 fa18 	bl	8000b08 <__aeabi_dcmpeq>
 80086d8:	2800      	cmp	r0, #0
 80086da:	d034      	beq.n	8008746 <_printf_float+0x27a>
 80086dc:	4a37      	ldr	r2, [pc, #220]	; (80087bc <_printf_float+0x2f0>)
 80086de:	2301      	movs	r3, #1
 80086e0:	4631      	mov	r1, r6
 80086e2:	4628      	mov	r0, r5
 80086e4:	47b8      	blx	r7
 80086e6:	3001      	adds	r0, #1
 80086e8:	f43f af51 	beq.w	800858e <_printf_float+0xc2>
 80086ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086f0:	429a      	cmp	r2, r3
 80086f2:	db02      	blt.n	80086fa <_printf_float+0x22e>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	07d8      	lsls	r0, r3, #31
 80086f8:	d510      	bpl.n	800871c <_printf_float+0x250>
 80086fa:	ee18 3a10 	vmov	r3, s16
 80086fe:	4652      	mov	r2, sl
 8008700:	4631      	mov	r1, r6
 8008702:	4628      	mov	r0, r5
 8008704:	47b8      	blx	r7
 8008706:	3001      	adds	r0, #1
 8008708:	f43f af41 	beq.w	800858e <_printf_float+0xc2>
 800870c:	f04f 0800 	mov.w	r8, #0
 8008710:	f104 091a 	add.w	r9, r4, #26
 8008714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008716:	3b01      	subs	r3, #1
 8008718:	4543      	cmp	r3, r8
 800871a:	dc09      	bgt.n	8008730 <_printf_float+0x264>
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	079b      	lsls	r3, r3, #30
 8008720:	f100 8105 	bmi.w	800892e <_printf_float+0x462>
 8008724:	68e0      	ldr	r0, [r4, #12]
 8008726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008728:	4298      	cmp	r0, r3
 800872a:	bfb8      	it	lt
 800872c:	4618      	movlt	r0, r3
 800872e:	e730      	b.n	8008592 <_printf_float+0xc6>
 8008730:	2301      	movs	r3, #1
 8008732:	464a      	mov	r2, r9
 8008734:	4631      	mov	r1, r6
 8008736:	4628      	mov	r0, r5
 8008738:	47b8      	blx	r7
 800873a:	3001      	adds	r0, #1
 800873c:	f43f af27 	beq.w	800858e <_printf_float+0xc2>
 8008740:	f108 0801 	add.w	r8, r8, #1
 8008744:	e7e6      	b.n	8008714 <_printf_float+0x248>
 8008746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008748:	2b00      	cmp	r3, #0
 800874a:	dc39      	bgt.n	80087c0 <_printf_float+0x2f4>
 800874c:	4a1b      	ldr	r2, [pc, #108]	; (80087bc <_printf_float+0x2f0>)
 800874e:	2301      	movs	r3, #1
 8008750:	4631      	mov	r1, r6
 8008752:	4628      	mov	r0, r5
 8008754:	47b8      	blx	r7
 8008756:	3001      	adds	r0, #1
 8008758:	f43f af19 	beq.w	800858e <_printf_float+0xc2>
 800875c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008760:	4313      	orrs	r3, r2
 8008762:	d102      	bne.n	800876a <_printf_float+0x29e>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	07d9      	lsls	r1, r3, #31
 8008768:	d5d8      	bpl.n	800871c <_printf_float+0x250>
 800876a:	ee18 3a10 	vmov	r3, s16
 800876e:	4652      	mov	r2, sl
 8008770:	4631      	mov	r1, r6
 8008772:	4628      	mov	r0, r5
 8008774:	47b8      	blx	r7
 8008776:	3001      	adds	r0, #1
 8008778:	f43f af09 	beq.w	800858e <_printf_float+0xc2>
 800877c:	f04f 0900 	mov.w	r9, #0
 8008780:	f104 0a1a 	add.w	sl, r4, #26
 8008784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008786:	425b      	negs	r3, r3
 8008788:	454b      	cmp	r3, r9
 800878a:	dc01      	bgt.n	8008790 <_printf_float+0x2c4>
 800878c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800878e:	e792      	b.n	80086b6 <_printf_float+0x1ea>
 8008790:	2301      	movs	r3, #1
 8008792:	4652      	mov	r2, sl
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	47b8      	blx	r7
 800879a:	3001      	adds	r0, #1
 800879c:	f43f aef7 	beq.w	800858e <_printf_float+0xc2>
 80087a0:	f109 0901 	add.w	r9, r9, #1
 80087a4:	e7ee      	b.n	8008784 <_printf_float+0x2b8>
 80087a6:	bf00      	nop
 80087a8:	7fefffff 	.word	0x7fefffff
 80087ac:	0800b10c 	.word	0x0800b10c
 80087b0:	0800b110 	.word	0x0800b110
 80087b4:	0800b118 	.word	0x0800b118
 80087b8:	0800b114 	.word	0x0800b114
 80087bc:	0800b11c 	.word	0x0800b11c
 80087c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087c4:	429a      	cmp	r2, r3
 80087c6:	bfa8      	it	ge
 80087c8:	461a      	movge	r2, r3
 80087ca:	2a00      	cmp	r2, #0
 80087cc:	4691      	mov	r9, r2
 80087ce:	dc37      	bgt.n	8008840 <_printf_float+0x374>
 80087d0:	f04f 0b00 	mov.w	fp, #0
 80087d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087d8:	f104 021a 	add.w	r2, r4, #26
 80087dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087de:	9305      	str	r3, [sp, #20]
 80087e0:	eba3 0309 	sub.w	r3, r3, r9
 80087e4:	455b      	cmp	r3, fp
 80087e6:	dc33      	bgt.n	8008850 <_printf_float+0x384>
 80087e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087ec:	429a      	cmp	r2, r3
 80087ee:	db3b      	blt.n	8008868 <_printf_float+0x39c>
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	07da      	lsls	r2, r3, #31
 80087f4:	d438      	bmi.n	8008868 <_printf_float+0x39c>
 80087f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087f8:	9b05      	ldr	r3, [sp, #20]
 80087fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	eba2 0901 	sub.w	r9, r2, r1
 8008802:	4599      	cmp	r9, r3
 8008804:	bfa8      	it	ge
 8008806:	4699      	movge	r9, r3
 8008808:	f1b9 0f00 	cmp.w	r9, #0
 800880c:	dc35      	bgt.n	800887a <_printf_float+0x3ae>
 800880e:	f04f 0800 	mov.w	r8, #0
 8008812:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008816:	f104 0a1a 	add.w	sl, r4, #26
 800881a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800881e:	1a9b      	subs	r3, r3, r2
 8008820:	eba3 0309 	sub.w	r3, r3, r9
 8008824:	4543      	cmp	r3, r8
 8008826:	f77f af79 	ble.w	800871c <_printf_float+0x250>
 800882a:	2301      	movs	r3, #1
 800882c:	4652      	mov	r2, sl
 800882e:	4631      	mov	r1, r6
 8008830:	4628      	mov	r0, r5
 8008832:	47b8      	blx	r7
 8008834:	3001      	adds	r0, #1
 8008836:	f43f aeaa 	beq.w	800858e <_printf_float+0xc2>
 800883a:	f108 0801 	add.w	r8, r8, #1
 800883e:	e7ec      	b.n	800881a <_printf_float+0x34e>
 8008840:	4613      	mov	r3, r2
 8008842:	4631      	mov	r1, r6
 8008844:	4642      	mov	r2, r8
 8008846:	4628      	mov	r0, r5
 8008848:	47b8      	blx	r7
 800884a:	3001      	adds	r0, #1
 800884c:	d1c0      	bne.n	80087d0 <_printf_float+0x304>
 800884e:	e69e      	b.n	800858e <_printf_float+0xc2>
 8008850:	2301      	movs	r3, #1
 8008852:	4631      	mov	r1, r6
 8008854:	4628      	mov	r0, r5
 8008856:	9205      	str	r2, [sp, #20]
 8008858:	47b8      	blx	r7
 800885a:	3001      	adds	r0, #1
 800885c:	f43f ae97 	beq.w	800858e <_printf_float+0xc2>
 8008860:	9a05      	ldr	r2, [sp, #20]
 8008862:	f10b 0b01 	add.w	fp, fp, #1
 8008866:	e7b9      	b.n	80087dc <_printf_float+0x310>
 8008868:	ee18 3a10 	vmov	r3, s16
 800886c:	4652      	mov	r2, sl
 800886e:	4631      	mov	r1, r6
 8008870:	4628      	mov	r0, r5
 8008872:	47b8      	blx	r7
 8008874:	3001      	adds	r0, #1
 8008876:	d1be      	bne.n	80087f6 <_printf_float+0x32a>
 8008878:	e689      	b.n	800858e <_printf_float+0xc2>
 800887a:	9a05      	ldr	r2, [sp, #20]
 800887c:	464b      	mov	r3, r9
 800887e:	4442      	add	r2, r8
 8008880:	4631      	mov	r1, r6
 8008882:	4628      	mov	r0, r5
 8008884:	47b8      	blx	r7
 8008886:	3001      	adds	r0, #1
 8008888:	d1c1      	bne.n	800880e <_printf_float+0x342>
 800888a:	e680      	b.n	800858e <_printf_float+0xc2>
 800888c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800888e:	2a01      	cmp	r2, #1
 8008890:	dc01      	bgt.n	8008896 <_printf_float+0x3ca>
 8008892:	07db      	lsls	r3, r3, #31
 8008894:	d538      	bpl.n	8008908 <_printf_float+0x43c>
 8008896:	2301      	movs	r3, #1
 8008898:	4642      	mov	r2, r8
 800889a:	4631      	mov	r1, r6
 800889c:	4628      	mov	r0, r5
 800889e:	47b8      	blx	r7
 80088a0:	3001      	adds	r0, #1
 80088a2:	f43f ae74 	beq.w	800858e <_printf_float+0xc2>
 80088a6:	ee18 3a10 	vmov	r3, s16
 80088aa:	4652      	mov	r2, sl
 80088ac:	4631      	mov	r1, r6
 80088ae:	4628      	mov	r0, r5
 80088b0:	47b8      	blx	r7
 80088b2:	3001      	adds	r0, #1
 80088b4:	f43f ae6b 	beq.w	800858e <_printf_float+0xc2>
 80088b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088bc:	2200      	movs	r2, #0
 80088be:	2300      	movs	r3, #0
 80088c0:	f7f8 f922 	bl	8000b08 <__aeabi_dcmpeq>
 80088c4:	b9d8      	cbnz	r0, 80088fe <_printf_float+0x432>
 80088c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c8:	f108 0201 	add.w	r2, r8, #1
 80088cc:	3b01      	subs	r3, #1
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	d10e      	bne.n	80088f6 <_printf_float+0x42a>
 80088d8:	e659      	b.n	800858e <_printf_float+0xc2>
 80088da:	2301      	movs	r3, #1
 80088dc:	4652      	mov	r2, sl
 80088de:	4631      	mov	r1, r6
 80088e0:	4628      	mov	r0, r5
 80088e2:	47b8      	blx	r7
 80088e4:	3001      	adds	r0, #1
 80088e6:	f43f ae52 	beq.w	800858e <_printf_float+0xc2>
 80088ea:	f108 0801 	add.w	r8, r8, #1
 80088ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f0:	3b01      	subs	r3, #1
 80088f2:	4543      	cmp	r3, r8
 80088f4:	dcf1      	bgt.n	80088da <_printf_float+0x40e>
 80088f6:	464b      	mov	r3, r9
 80088f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80088fc:	e6dc      	b.n	80086b8 <_printf_float+0x1ec>
 80088fe:	f04f 0800 	mov.w	r8, #0
 8008902:	f104 0a1a 	add.w	sl, r4, #26
 8008906:	e7f2      	b.n	80088ee <_printf_float+0x422>
 8008908:	2301      	movs	r3, #1
 800890a:	4642      	mov	r2, r8
 800890c:	e7df      	b.n	80088ce <_printf_float+0x402>
 800890e:	2301      	movs	r3, #1
 8008910:	464a      	mov	r2, r9
 8008912:	4631      	mov	r1, r6
 8008914:	4628      	mov	r0, r5
 8008916:	47b8      	blx	r7
 8008918:	3001      	adds	r0, #1
 800891a:	f43f ae38 	beq.w	800858e <_printf_float+0xc2>
 800891e:	f108 0801 	add.w	r8, r8, #1
 8008922:	68e3      	ldr	r3, [r4, #12]
 8008924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008926:	1a5b      	subs	r3, r3, r1
 8008928:	4543      	cmp	r3, r8
 800892a:	dcf0      	bgt.n	800890e <_printf_float+0x442>
 800892c:	e6fa      	b.n	8008724 <_printf_float+0x258>
 800892e:	f04f 0800 	mov.w	r8, #0
 8008932:	f104 0919 	add.w	r9, r4, #25
 8008936:	e7f4      	b.n	8008922 <_printf_float+0x456>

08008938 <_printf_common>:
 8008938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800893c:	4616      	mov	r6, r2
 800893e:	4699      	mov	r9, r3
 8008940:	688a      	ldr	r2, [r1, #8]
 8008942:	690b      	ldr	r3, [r1, #16]
 8008944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008948:	4293      	cmp	r3, r2
 800894a:	bfb8      	it	lt
 800894c:	4613      	movlt	r3, r2
 800894e:	6033      	str	r3, [r6, #0]
 8008950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008954:	4607      	mov	r7, r0
 8008956:	460c      	mov	r4, r1
 8008958:	b10a      	cbz	r2, 800895e <_printf_common+0x26>
 800895a:	3301      	adds	r3, #1
 800895c:	6033      	str	r3, [r6, #0]
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	0699      	lsls	r1, r3, #26
 8008962:	bf42      	ittt	mi
 8008964:	6833      	ldrmi	r3, [r6, #0]
 8008966:	3302      	addmi	r3, #2
 8008968:	6033      	strmi	r3, [r6, #0]
 800896a:	6825      	ldr	r5, [r4, #0]
 800896c:	f015 0506 	ands.w	r5, r5, #6
 8008970:	d106      	bne.n	8008980 <_printf_common+0x48>
 8008972:	f104 0a19 	add.w	sl, r4, #25
 8008976:	68e3      	ldr	r3, [r4, #12]
 8008978:	6832      	ldr	r2, [r6, #0]
 800897a:	1a9b      	subs	r3, r3, r2
 800897c:	42ab      	cmp	r3, r5
 800897e:	dc26      	bgt.n	80089ce <_printf_common+0x96>
 8008980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008984:	1e13      	subs	r3, r2, #0
 8008986:	6822      	ldr	r2, [r4, #0]
 8008988:	bf18      	it	ne
 800898a:	2301      	movne	r3, #1
 800898c:	0692      	lsls	r2, r2, #26
 800898e:	d42b      	bmi.n	80089e8 <_printf_common+0xb0>
 8008990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008994:	4649      	mov	r1, r9
 8008996:	4638      	mov	r0, r7
 8008998:	47c0      	blx	r8
 800899a:	3001      	adds	r0, #1
 800899c:	d01e      	beq.n	80089dc <_printf_common+0xa4>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	68e5      	ldr	r5, [r4, #12]
 80089a2:	6832      	ldr	r2, [r6, #0]
 80089a4:	f003 0306 	and.w	r3, r3, #6
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	bf08      	it	eq
 80089ac:	1aad      	subeq	r5, r5, r2
 80089ae:	68a3      	ldr	r3, [r4, #8]
 80089b0:	6922      	ldr	r2, [r4, #16]
 80089b2:	bf0c      	ite	eq
 80089b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089b8:	2500      	movne	r5, #0
 80089ba:	4293      	cmp	r3, r2
 80089bc:	bfc4      	itt	gt
 80089be:	1a9b      	subgt	r3, r3, r2
 80089c0:	18ed      	addgt	r5, r5, r3
 80089c2:	2600      	movs	r6, #0
 80089c4:	341a      	adds	r4, #26
 80089c6:	42b5      	cmp	r5, r6
 80089c8:	d11a      	bne.n	8008a00 <_printf_common+0xc8>
 80089ca:	2000      	movs	r0, #0
 80089cc:	e008      	b.n	80089e0 <_printf_common+0xa8>
 80089ce:	2301      	movs	r3, #1
 80089d0:	4652      	mov	r2, sl
 80089d2:	4649      	mov	r1, r9
 80089d4:	4638      	mov	r0, r7
 80089d6:	47c0      	blx	r8
 80089d8:	3001      	adds	r0, #1
 80089da:	d103      	bne.n	80089e4 <_printf_common+0xac>
 80089dc:	f04f 30ff 	mov.w	r0, #4294967295
 80089e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e4:	3501      	adds	r5, #1
 80089e6:	e7c6      	b.n	8008976 <_printf_common+0x3e>
 80089e8:	18e1      	adds	r1, r4, r3
 80089ea:	1c5a      	adds	r2, r3, #1
 80089ec:	2030      	movs	r0, #48	; 0x30
 80089ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089f2:	4422      	add	r2, r4
 80089f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089fc:	3302      	adds	r3, #2
 80089fe:	e7c7      	b.n	8008990 <_printf_common+0x58>
 8008a00:	2301      	movs	r3, #1
 8008a02:	4622      	mov	r2, r4
 8008a04:	4649      	mov	r1, r9
 8008a06:	4638      	mov	r0, r7
 8008a08:	47c0      	blx	r8
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	d0e6      	beq.n	80089dc <_printf_common+0xa4>
 8008a0e:	3601      	adds	r6, #1
 8008a10:	e7d9      	b.n	80089c6 <_printf_common+0x8e>
	...

08008a14 <_printf_i>:
 8008a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a18:	460c      	mov	r4, r1
 8008a1a:	4691      	mov	r9, r2
 8008a1c:	7e27      	ldrb	r7, [r4, #24]
 8008a1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a20:	2f78      	cmp	r7, #120	; 0x78
 8008a22:	4680      	mov	r8, r0
 8008a24:	469a      	mov	sl, r3
 8008a26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a2a:	d807      	bhi.n	8008a3c <_printf_i+0x28>
 8008a2c:	2f62      	cmp	r7, #98	; 0x62
 8008a2e:	d80a      	bhi.n	8008a46 <_printf_i+0x32>
 8008a30:	2f00      	cmp	r7, #0
 8008a32:	f000 80d8 	beq.w	8008be6 <_printf_i+0x1d2>
 8008a36:	2f58      	cmp	r7, #88	; 0x58
 8008a38:	f000 80a3 	beq.w	8008b82 <_printf_i+0x16e>
 8008a3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a44:	e03a      	b.n	8008abc <_printf_i+0xa8>
 8008a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a4a:	2b15      	cmp	r3, #21
 8008a4c:	d8f6      	bhi.n	8008a3c <_printf_i+0x28>
 8008a4e:	a001      	add	r0, pc, #4	; (adr r0, 8008a54 <_printf_i+0x40>)
 8008a50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008a54:	08008aad 	.word	0x08008aad
 8008a58:	08008ac1 	.word	0x08008ac1
 8008a5c:	08008a3d 	.word	0x08008a3d
 8008a60:	08008a3d 	.word	0x08008a3d
 8008a64:	08008a3d 	.word	0x08008a3d
 8008a68:	08008a3d 	.word	0x08008a3d
 8008a6c:	08008ac1 	.word	0x08008ac1
 8008a70:	08008a3d 	.word	0x08008a3d
 8008a74:	08008a3d 	.word	0x08008a3d
 8008a78:	08008a3d 	.word	0x08008a3d
 8008a7c:	08008a3d 	.word	0x08008a3d
 8008a80:	08008bcd 	.word	0x08008bcd
 8008a84:	08008af1 	.word	0x08008af1
 8008a88:	08008baf 	.word	0x08008baf
 8008a8c:	08008a3d 	.word	0x08008a3d
 8008a90:	08008a3d 	.word	0x08008a3d
 8008a94:	08008bef 	.word	0x08008bef
 8008a98:	08008a3d 	.word	0x08008a3d
 8008a9c:	08008af1 	.word	0x08008af1
 8008aa0:	08008a3d 	.word	0x08008a3d
 8008aa4:	08008a3d 	.word	0x08008a3d
 8008aa8:	08008bb7 	.word	0x08008bb7
 8008aac:	680b      	ldr	r3, [r1, #0]
 8008aae:	1d1a      	adds	r2, r3, #4
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	600a      	str	r2, [r1, #0]
 8008ab4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008abc:	2301      	movs	r3, #1
 8008abe:	e0a3      	b.n	8008c08 <_printf_i+0x1f4>
 8008ac0:	6825      	ldr	r5, [r4, #0]
 8008ac2:	6808      	ldr	r0, [r1, #0]
 8008ac4:	062e      	lsls	r6, r5, #24
 8008ac6:	f100 0304 	add.w	r3, r0, #4
 8008aca:	d50a      	bpl.n	8008ae2 <_printf_i+0xce>
 8008acc:	6805      	ldr	r5, [r0, #0]
 8008ace:	600b      	str	r3, [r1, #0]
 8008ad0:	2d00      	cmp	r5, #0
 8008ad2:	da03      	bge.n	8008adc <_printf_i+0xc8>
 8008ad4:	232d      	movs	r3, #45	; 0x2d
 8008ad6:	426d      	negs	r5, r5
 8008ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008adc:	485e      	ldr	r0, [pc, #376]	; (8008c58 <_printf_i+0x244>)
 8008ade:	230a      	movs	r3, #10
 8008ae0:	e019      	b.n	8008b16 <_printf_i+0x102>
 8008ae2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008ae6:	6805      	ldr	r5, [r0, #0]
 8008ae8:	600b      	str	r3, [r1, #0]
 8008aea:	bf18      	it	ne
 8008aec:	b22d      	sxthne	r5, r5
 8008aee:	e7ef      	b.n	8008ad0 <_printf_i+0xbc>
 8008af0:	680b      	ldr	r3, [r1, #0]
 8008af2:	6825      	ldr	r5, [r4, #0]
 8008af4:	1d18      	adds	r0, r3, #4
 8008af6:	6008      	str	r0, [r1, #0]
 8008af8:	0628      	lsls	r0, r5, #24
 8008afa:	d501      	bpl.n	8008b00 <_printf_i+0xec>
 8008afc:	681d      	ldr	r5, [r3, #0]
 8008afe:	e002      	b.n	8008b06 <_printf_i+0xf2>
 8008b00:	0669      	lsls	r1, r5, #25
 8008b02:	d5fb      	bpl.n	8008afc <_printf_i+0xe8>
 8008b04:	881d      	ldrh	r5, [r3, #0]
 8008b06:	4854      	ldr	r0, [pc, #336]	; (8008c58 <_printf_i+0x244>)
 8008b08:	2f6f      	cmp	r7, #111	; 0x6f
 8008b0a:	bf0c      	ite	eq
 8008b0c:	2308      	moveq	r3, #8
 8008b0e:	230a      	movne	r3, #10
 8008b10:	2100      	movs	r1, #0
 8008b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b16:	6866      	ldr	r6, [r4, #4]
 8008b18:	60a6      	str	r6, [r4, #8]
 8008b1a:	2e00      	cmp	r6, #0
 8008b1c:	bfa2      	ittt	ge
 8008b1e:	6821      	ldrge	r1, [r4, #0]
 8008b20:	f021 0104 	bicge.w	r1, r1, #4
 8008b24:	6021      	strge	r1, [r4, #0]
 8008b26:	b90d      	cbnz	r5, 8008b2c <_printf_i+0x118>
 8008b28:	2e00      	cmp	r6, #0
 8008b2a:	d04d      	beq.n	8008bc8 <_printf_i+0x1b4>
 8008b2c:	4616      	mov	r6, r2
 8008b2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b32:	fb03 5711 	mls	r7, r3, r1, r5
 8008b36:	5dc7      	ldrb	r7, [r0, r7]
 8008b38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b3c:	462f      	mov	r7, r5
 8008b3e:	42bb      	cmp	r3, r7
 8008b40:	460d      	mov	r5, r1
 8008b42:	d9f4      	bls.n	8008b2e <_printf_i+0x11a>
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d10b      	bne.n	8008b60 <_printf_i+0x14c>
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	07df      	lsls	r7, r3, #31
 8008b4c:	d508      	bpl.n	8008b60 <_printf_i+0x14c>
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	6861      	ldr	r1, [r4, #4]
 8008b52:	4299      	cmp	r1, r3
 8008b54:	bfde      	ittt	le
 8008b56:	2330      	movle	r3, #48	; 0x30
 8008b58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b60:	1b92      	subs	r2, r2, r6
 8008b62:	6122      	str	r2, [r4, #16]
 8008b64:	f8cd a000 	str.w	sl, [sp]
 8008b68:	464b      	mov	r3, r9
 8008b6a:	aa03      	add	r2, sp, #12
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	4640      	mov	r0, r8
 8008b70:	f7ff fee2 	bl	8008938 <_printf_common>
 8008b74:	3001      	adds	r0, #1
 8008b76:	d14c      	bne.n	8008c12 <_printf_i+0x1fe>
 8008b78:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7c:	b004      	add	sp, #16
 8008b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b82:	4835      	ldr	r0, [pc, #212]	; (8008c58 <_printf_i+0x244>)
 8008b84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	680e      	ldr	r6, [r1, #0]
 8008b8c:	061f      	lsls	r7, r3, #24
 8008b8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008b92:	600e      	str	r6, [r1, #0]
 8008b94:	d514      	bpl.n	8008bc0 <_printf_i+0x1ac>
 8008b96:	07d9      	lsls	r1, r3, #31
 8008b98:	bf44      	itt	mi
 8008b9a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b9e:	6023      	strmi	r3, [r4, #0]
 8008ba0:	b91d      	cbnz	r5, 8008baa <_printf_i+0x196>
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	f023 0320 	bic.w	r3, r3, #32
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	2310      	movs	r3, #16
 8008bac:	e7b0      	b.n	8008b10 <_printf_i+0xfc>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	f043 0320 	orr.w	r3, r3, #32
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	2378      	movs	r3, #120	; 0x78
 8008bb8:	4828      	ldr	r0, [pc, #160]	; (8008c5c <_printf_i+0x248>)
 8008bba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bbe:	e7e3      	b.n	8008b88 <_printf_i+0x174>
 8008bc0:	065e      	lsls	r6, r3, #25
 8008bc2:	bf48      	it	mi
 8008bc4:	b2ad      	uxthmi	r5, r5
 8008bc6:	e7e6      	b.n	8008b96 <_printf_i+0x182>
 8008bc8:	4616      	mov	r6, r2
 8008bca:	e7bb      	b.n	8008b44 <_printf_i+0x130>
 8008bcc:	680b      	ldr	r3, [r1, #0]
 8008bce:	6826      	ldr	r6, [r4, #0]
 8008bd0:	6960      	ldr	r0, [r4, #20]
 8008bd2:	1d1d      	adds	r5, r3, #4
 8008bd4:	600d      	str	r5, [r1, #0]
 8008bd6:	0635      	lsls	r5, r6, #24
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	d501      	bpl.n	8008be0 <_printf_i+0x1cc>
 8008bdc:	6018      	str	r0, [r3, #0]
 8008bde:	e002      	b.n	8008be6 <_printf_i+0x1d2>
 8008be0:	0671      	lsls	r1, r6, #25
 8008be2:	d5fb      	bpl.n	8008bdc <_printf_i+0x1c8>
 8008be4:	8018      	strh	r0, [r3, #0]
 8008be6:	2300      	movs	r3, #0
 8008be8:	6123      	str	r3, [r4, #16]
 8008bea:	4616      	mov	r6, r2
 8008bec:	e7ba      	b.n	8008b64 <_printf_i+0x150>
 8008bee:	680b      	ldr	r3, [r1, #0]
 8008bf0:	1d1a      	adds	r2, r3, #4
 8008bf2:	600a      	str	r2, [r1, #0]
 8008bf4:	681e      	ldr	r6, [r3, #0]
 8008bf6:	6862      	ldr	r2, [r4, #4]
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f7f7 fb10 	bl	8000220 <memchr>
 8008c00:	b108      	cbz	r0, 8008c06 <_printf_i+0x1f2>
 8008c02:	1b80      	subs	r0, r0, r6
 8008c04:	6060      	str	r0, [r4, #4]
 8008c06:	6863      	ldr	r3, [r4, #4]
 8008c08:	6123      	str	r3, [r4, #16]
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c10:	e7a8      	b.n	8008b64 <_printf_i+0x150>
 8008c12:	6923      	ldr	r3, [r4, #16]
 8008c14:	4632      	mov	r2, r6
 8008c16:	4649      	mov	r1, r9
 8008c18:	4640      	mov	r0, r8
 8008c1a:	47d0      	blx	sl
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d0ab      	beq.n	8008b78 <_printf_i+0x164>
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	079b      	lsls	r3, r3, #30
 8008c24:	d413      	bmi.n	8008c4e <_printf_i+0x23a>
 8008c26:	68e0      	ldr	r0, [r4, #12]
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	4298      	cmp	r0, r3
 8008c2c:	bfb8      	it	lt
 8008c2e:	4618      	movlt	r0, r3
 8008c30:	e7a4      	b.n	8008b7c <_printf_i+0x168>
 8008c32:	2301      	movs	r3, #1
 8008c34:	4632      	mov	r2, r6
 8008c36:	4649      	mov	r1, r9
 8008c38:	4640      	mov	r0, r8
 8008c3a:	47d0      	blx	sl
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d09b      	beq.n	8008b78 <_printf_i+0x164>
 8008c40:	3501      	adds	r5, #1
 8008c42:	68e3      	ldr	r3, [r4, #12]
 8008c44:	9903      	ldr	r1, [sp, #12]
 8008c46:	1a5b      	subs	r3, r3, r1
 8008c48:	42ab      	cmp	r3, r5
 8008c4a:	dcf2      	bgt.n	8008c32 <_printf_i+0x21e>
 8008c4c:	e7eb      	b.n	8008c26 <_printf_i+0x212>
 8008c4e:	2500      	movs	r5, #0
 8008c50:	f104 0619 	add.w	r6, r4, #25
 8008c54:	e7f5      	b.n	8008c42 <_printf_i+0x22e>
 8008c56:	bf00      	nop
 8008c58:	0800b11e 	.word	0x0800b11e
 8008c5c:	0800b12f 	.word	0x0800b12f

08008c60 <siprintf>:
 8008c60:	b40e      	push	{r1, r2, r3}
 8008c62:	b500      	push	{lr}
 8008c64:	b09c      	sub	sp, #112	; 0x70
 8008c66:	ab1d      	add	r3, sp, #116	; 0x74
 8008c68:	9002      	str	r0, [sp, #8]
 8008c6a:	9006      	str	r0, [sp, #24]
 8008c6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c70:	4809      	ldr	r0, [pc, #36]	; (8008c98 <siprintf+0x38>)
 8008c72:	9107      	str	r1, [sp, #28]
 8008c74:	9104      	str	r1, [sp, #16]
 8008c76:	4909      	ldr	r1, [pc, #36]	; (8008c9c <siprintf+0x3c>)
 8008c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c7c:	9105      	str	r1, [sp, #20]
 8008c7e:	6800      	ldr	r0, [r0, #0]
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	a902      	add	r1, sp, #8
 8008c84:	f001 fb32 	bl	800a2ec <_svfiprintf_r>
 8008c88:	9b02      	ldr	r3, [sp, #8]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	701a      	strb	r2, [r3, #0]
 8008c8e:	b01c      	add	sp, #112	; 0x70
 8008c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c94:	b003      	add	sp, #12
 8008c96:	4770      	bx	lr
 8008c98:	20000028 	.word	0x20000028
 8008c9c:	ffff0208 	.word	0xffff0208

08008ca0 <quorem>:
 8008ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	6903      	ldr	r3, [r0, #16]
 8008ca6:	690c      	ldr	r4, [r1, #16]
 8008ca8:	42a3      	cmp	r3, r4
 8008caa:	4607      	mov	r7, r0
 8008cac:	f2c0 8081 	blt.w	8008db2 <quorem+0x112>
 8008cb0:	3c01      	subs	r4, #1
 8008cb2:	f101 0814 	add.w	r8, r1, #20
 8008cb6:	f100 0514 	add.w	r5, r0, #20
 8008cba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008cd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cd8:	d331      	bcc.n	8008d3e <quorem+0x9e>
 8008cda:	f04f 0e00 	mov.w	lr, #0
 8008cde:	4640      	mov	r0, r8
 8008ce0:	46ac      	mov	ip, r5
 8008ce2:	46f2      	mov	sl, lr
 8008ce4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ce8:	b293      	uxth	r3, r2
 8008cea:	fb06 e303 	mla	r3, r6, r3, lr
 8008cee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	ebaa 0303 	sub.w	r3, sl, r3
 8008cf8:	0c12      	lsrs	r2, r2, #16
 8008cfa:	f8dc a000 	ldr.w	sl, [ip]
 8008cfe:	fb06 e202 	mla	r2, r6, r2, lr
 8008d02:	fa13 f38a 	uxtah	r3, r3, sl
 8008d06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d0a:	fa1f fa82 	uxth.w	sl, r2
 8008d0e:	f8dc 2000 	ldr.w	r2, [ip]
 8008d12:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008d16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d20:	4581      	cmp	r9, r0
 8008d22:	f84c 3b04 	str.w	r3, [ip], #4
 8008d26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d2a:	d2db      	bcs.n	8008ce4 <quorem+0x44>
 8008d2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d30:	b92b      	cbnz	r3, 8008d3e <quorem+0x9e>
 8008d32:	9b01      	ldr	r3, [sp, #4]
 8008d34:	3b04      	subs	r3, #4
 8008d36:	429d      	cmp	r5, r3
 8008d38:	461a      	mov	r2, r3
 8008d3a:	d32e      	bcc.n	8008d9a <quorem+0xfa>
 8008d3c:	613c      	str	r4, [r7, #16]
 8008d3e:	4638      	mov	r0, r7
 8008d40:	f001 f8be 	bl	8009ec0 <__mcmp>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	db24      	blt.n	8008d92 <quorem+0xf2>
 8008d48:	3601      	adds	r6, #1
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	f04f 0c00 	mov.w	ip, #0
 8008d50:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d54:	f8d0 e000 	ldr.w	lr, [r0]
 8008d58:	b293      	uxth	r3, r2
 8008d5a:	ebac 0303 	sub.w	r3, ip, r3
 8008d5e:	0c12      	lsrs	r2, r2, #16
 8008d60:	fa13 f38e 	uxtah	r3, r3, lr
 8008d64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d72:	45c1      	cmp	r9, r8
 8008d74:	f840 3b04 	str.w	r3, [r0], #4
 8008d78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d7c:	d2e8      	bcs.n	8008d50 <quorem+0xb0>
 8008d7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d86:	b922      	cbnz	r2, 8008d92 <quorem+0xf2>
 8008d88:	3b04      	subs	r3, #4
 8008d8a:	429d      	cmp	r5, r3
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	d30a      	bcc.n	8008da6 <quorem+0x106>
 8008d90:	613c      	str	r4, [r7, #16]
 8008d92:	4630      	mov	r0, r6
 8008d94:	b003      	add	sp, #12
 8008d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9a:	6812      	ldr	r2, [r2, #0]
 8008d9c:	3b04      	subs	r3, #4
 8008d9e:	2a00      	cmp	r2, #0
 8008da0:	d1cc      	bne.n	8008d3c <quorem+0x9c>
 8008da2:	3c01      	subs	r4, #1
 8008da4:	e7c7      	b.n	8008d36 <quorem+0x96>
 8008da6:	6812      	ldr	r2, [r2, #0]
 8008da8:	3b04      	subs	r3, #4
 8008daa:	2a00      	cmp	r2, #0
 8008dac:	d1f0      	bne.n	8008d90 <quorem+0xf0>
 8008dae:	3c01      	subs	r4, #1
 8008db0:	e7eb      	b.n	8008d8a <quorem+0xea>
 8008db2:	2000      	movs	r0, #0
 8008db4:	e7ee      	b.n	8008d94 <quorem+0xf4>
	...

08008db8 <_dtoa_r>:
 8008db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	ed2d 8b02 	vpush	{d8}
 8008dc0:	ec57 6b10 	vmov	r6, r7, d0
 8008dc4:	b095      	sub	sp, #84	; 0x54
 8008dc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008dc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008dcc:	9105      	str	r1, [sp, #20]
 8008dce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8008dd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dd8:	b975      	cbnz	r5, 8008df8 <_dtoa_r+0x40>
 8008dda:	2010      	movs	r0, #16
 8008ddc:	f000 fddc 	bl	8009998 <malloc>
 8008de0:	4602      	mov	r2, r0
 8008de2:	6260      	str	r0, [r4, #36]	; 0x24
 8008de4:	b920      	cbnz	r0, 8008df0 <_dtoa_r+0x38>
 8008de6:	4bb2      	ldr	r3, [pc, #712]	; (80090b0 <_dtoa_r+0x2f8>)
 8008de8:	21ea      	movs	r1, #234	; 0xea
 8008dea:	48b2      	ldr	r0, [pc, #712]	; (80090b4 <_dtoa_r+0x2fc>)
 8008dec:	f001 fb8e 	bl	800a50c <__assert_func>
 8008df0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008df4:	6005      	str	r5, [r0, #0]
 8008df6:	60c5      	str	r5, [r0, #12]
 8008df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dfa:	6819      	ldr	r1, [r3, #0]
 8008dfc:	b151      	cbz	r1, 8008e14 <_dtoa_r+0x5c>
 8008dfe:	685a      	ldr	r2, [r3, #4]
 8008e00:	604a      	str	r2, [r1, #4]
 8008e02:	2301      	movs	r3, #1
 8008e04:	4093      	lsls	r3, r2
 8008e06:	608b      	str	r3, [r1, #8]
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f000 fe1b 	bl	8009a44 <_Bfree>
 8008e0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	1e3b      	subs	r3, r7, #0
 8008e16:	bfb9      	ittee	lt
 8008e18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e1c:	9303      	strlt	r3, [sp, #12]
 8008e1e:	2300      	movge	r3, #0
 8008e20:	f8c8 3000 	strge.w	r3, [r8]
 8008e24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008e28:	4ba3      	ldr	r3, [pc, #652]	; (80090b8 <_dtoa_r+0x300>)
 8008e2a:	bfbc      	itt	lt
 8008e2c:	2201      	movlt	r2, #1
 8008e2e:	f8c8 2000 	strlt.w	r2, [r8]
 8008e32:	ea33 0309 	bics.w	r3, r3, r9
 8008e36:	d11b      	bne.n	8008e70 <_dtoa_r+0xb8>
 8008e38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e44:	4333      	orrs	r3, r6
 8008e46:	f000 857a 	beq.w	800993e <_dtoa_r+0xb86>
 8008e4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e4c:	b963      	cbnz	r3, 8008e68 <_dtoa_r+0xb0>
 8008e4e:	4b9b      	ldr	r3, [pc, #620]	; (80090bc <_dtoa_r+0x304>)
 8008e50:	e024      	b.n	8008e9c <_dtoa_r+0xe4>
 8008e52:	4b9b      	ldr	r3, [pc, #620]	; (80090c0 <_dtoa_r+0x308>)
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	3308      	adds	r3, #8
 8008e58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e5a:	6013      	str	r3, [r2, #0]
 8008e5c:	9800      	ldr	r0, [sp, #0]
 8008e5e:	b015      	add	sp, #84	; 0x54
 8008e60:	ecbd 8b02 	vpop	{d8}
 8008e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e68:	4b94      	ldr	r3, [pc, #592]	; (80090bc <_dtoa_r+0x304>)
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	3303      	adds	r3, #3
 8008e6e:	e7f3      	b.n	8008e58 <_dtoa_r+0xa0>
 8008e70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e74:	2200      	movs	r2, #0
 8008e76:	ec51 0b17 	vmov	r0, r1, d7
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008e80:	f7f7 fe42 	bl	8000b08 <__aeabi_dcmpeq>
 8008e84:	4680      	mov	r8, r0
 8008e86:	b158      	cbz	r0, 8008ea0 <_dtoa_r+0xe8>
 8008e88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 8551 	beq.w	8009938 <_dtoa_r+0xb80>
 8008e96:	488b      	ldr	r0, [pc, #556]	; (80090c4 <_dtoa_r+0x30c>)
 8008e98:	6018      	str	r0, [r3, #0]
 8008e9a:	1e43      	subs	r3, r0, #1
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	e7dd      	b.n	8008e5c <_dtoa_r+0xa4>
 8008ea0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008ea4:	aa12      	add	r2, sp, #72	; 0x48
 8008ea6:	a913      	add	r1, sp, #76	; 0x4c
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f001 f8ad 	bl	800a008 <__d2b>
 8008eae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008eb2:	4683      	mov	fp, r0
 8008eb4:	2d00      	cmp	r5, #0
 8008eb6:	d07c      	beq.n	8008fb2 <_dtoa_r+0x1fa>
 8008eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008ebe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ec2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008ec6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008eca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008ece:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ed2:	4b7d      	ldr	r3, [pc, #500]	; (80090c8 <_dtoa_r+0x310>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	4639      	mov	r1, r7
 8008eda:	f7f7 f9f5 	bl	80002c8 <__aeabi_dsub>
 8008ede:	a36e      	add	r3, pc, #440	; (adr r3, 8009098 <_dtoa_r+0x2e0>)
 8008ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee4:	f7f7 fba8 	bl	8000638 <__aeabi_dmul>
 8008ee8:	a36d      	add	r3, pc, #436	; (adr r3, 80090a0 <_dtoa_r+0x2e8>)
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	f7f7 f9ed 	bl	80002cc <__adddf3>
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	460f      	mov	r7, r1
 8008ef8:	f7f7 fb34 	bl	8000564 <__aeabi_i2d>
 8008efc:	a36a      	add	r3, pc, #424	; (adr r3, 80090a8 <_dtoa_r+0x2f0>)
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	f7f7 fb99 	bl	8000638 <__aeabi_dmul>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	4639      	mov	r1, r7
 8008f0e:	f7f7 f9dd 	bl	80002cc <__adddf3>
 8008f12:	4606      	mov	r6, r0
 8008f14:	460f      	mov	r7, r1
 8008f16:	f7f7 fe3f 	bl	8000b98 <__aeabi_d2iz>
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	2300      	movs	r3, #0
 8008f20:	4630      	mov	r0, r6
 8008f22:	4639      	mov	r1, r7
 8008f24:	f7f7 fdfa 	bl	8000b1c <__aeabi_dcmplt>
 8008f28:	b148      	cbz	r0, 8008f3e <_dtoa_r+0x186>
 8008f2a:	4650      	mov	r0, sl
 8008f2c:	f7f7 fb1a 	bl	8000564 <__aeabi_i2d>
 8008f30:	4632      	mov	r2, r6
 8008f32:	463b      	mov	r3, r7
 8008f34:	f7f7 fde8 	bl	8000b08 <__aeabi_dcmpeq>
 8008f38:	b908      	cbnz	r0, 8008f3e <_dtoa_r+0x186>
 8008f3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f3e:	f1ba 0f16 	cmp.w	sl, #22
 8008f42:	d854      	bhi.n	8008fee <_dtoa_r+0x236>
 8008f44:	4b61      	ldr	r3, [pc, #388]	; (80090cc <_dtoa_r+0x314>)
 8008f46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f52:	f7f7 fde3 	bl	8000b1c <__aeabi_dcmplt>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d04b      	beq.n	8008ff2 <_dtoa_r+0x23a>
 8008f5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f5e:	2300      	movs	r3, #0
 8008f60:	930e      	str	r3, [sp, #56]	; 0x38
 8008f62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f64:	1b5d      	subs	r5, r3, r5
 8008f66:	1e6b      	subs	r3, r5, #1
 8008f68:	9304      	str	r3, [sp, #16]
 8008f6a:	bf43      	ittte	mi
 8008f6c:	2300      	movmi	r3, #0
 8008f6e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008f72:	9304      	strmi	r3, [sp, #16]
 8008f74:	f04f 0800 	movpl.w	r8, #0
 8008f78:	f1ba 0f00 	cmp.w	sl, #0
 8008f7c:	db3b      	blt.n	8008ff6 <_dtoa_r+0x23e>
 8008f7e:	9b04      	ldr	r3, [sp, #16]
 8008f80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008f84:	4453      	add	r3, sl
 8008f86:	9304      	str	r3, [sp, #16]
 8008f88:	2300      	movs	r3, #0
 8008f8a:	9306      	str	r3, [sp, #24]
 8008f8c:	9b05      	ldr	r3, [sp, #20]
 8008f8e:	2b09      	cmp	r3, #9
 8008f90:	d869      	bhi.n	8009066 <_dtoa_r+0x2ae>
 8008f92:	2b05      	cmp	r3, #5
 8008f94:	bfc4      	itt	gt
 8008f96:	3b04      	subgt	r3, #4
 8008f98:	9305      	strgt	r3, [sp, #20]
 8008f9a:	9b05      	ldr	r3, [sp, #20]
 8008f9c:	f1a3 0302 	sub.w	r3, r3, #2
 8008fa0:	bfcc      	ite	gt
 8008fa2:	2500      	movgt	r5, #0
 8008fa4:	2501      	movle	r5, #1
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d869      	bhi.n	800907e <_dtoa_r+0x2c6>
 8008faa:	e8df f003 	tbb	[pc, r3]
 8008fae:	4e2c      	.short	0x4e2c
 8008fb0:	5a4c      	.short	0x5a4c
 8008fb2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008fb6:	441d      	add	r5, r3
 8008fb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008fbc:	2b20      	cmp	r3, #32
 8008fbe:	bfc1      	itttt	gt
 8008fc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008fc4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008fc8:	fa09 f303 	lslgt.w	r3, r9, r3
 8008fcc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008fd0:	bfda      	itte	le
 8008fd2:	f1c3 0320 	rsble	r3, r3, #32
 8008fd6:	fa06 f003 	lslle.w	r0, r6, r3
 8008fda:	4318      	orrgt	r0, r3
 8008fdc:	f7f7 fab2 	bl	8000544 <__aeabi_ui2d>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008fe8:	3d01      	subs	r5, #1
 8008fea:	9310      	str	r3, [sp, #64]	; 0x40
 8008fec:	e771      	b.n	8008ed2 <_dtoa_r+0x11a>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e7b6      	b.n	8008f60 <_dtoa_r+0x1a8>
 8008ff2:	900e      	str	r0, [sp, #56]	; 0x38
 8008ff4:	e7b5      	b.n	8008f62 <_dtoa_r+0x1aa>
 8008ff6:	f1ca 0300 	rsb	r3, sl, #0
 8008ffa:	9306      	str	r3, [sp, #24]
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	eba8 080a 	sub.w	r8, r8, sl
 8009002:	930d      	str	r3, [sp, #52]	; 0x34
 8009004:	e7c2      	b.n	8008f8c <_dtoa_r+0x1d4>
 8009006:	2300      	movs	r3, #0
 8009008:	9308      	str	r3, [sp, #32]
 800900a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900c:	2b00      	cmp	r3, #0
 800900e:	dc39      	bgt.n	8009084 <_dtoa_r+0x2cc>
 8009010:	f04f 0901 	mov.w	r9, #1
 8009014:	f8cd 9004 	str.w	r9, [sp, #4]
 8009018:	464b      	mov	r3, r9
 800901a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800901e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009020:	2200      	movs	r2, #0
 8009022:	6042      	str	r2, [r0, #4]
 8009024:	2204      	movs	r2, #4
 8009026:	f102 0614 	add.w	r6, r2, #20
 800902a:	429e      	cmp	r6, r3
 800902c:	6841      	ldr	r1, [r0, #4]
 800902e:	d92f      	bls.n	8009090 <_dtoa_r+0x2d8>
 8009030:	4620      	mov	r0, r4
 8009032:	f000 fcc7 	bl	80099c4 <_Balloc>
 8009036:	9000      	str	r0, [sp, #0]
 8009038:	2800      	cmp	r0, #0
 800903a:	d14b      	bne.n	80090d4 <_dtoa_r+0x31c>
 800903c:	4b24      	ldr	r3, [pc, #144]	; (80090d0 <_dtoa_r+0x318>)
 800903e:	4602      	mov	r2, r0
 8009040:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009044:	e6d1      	b.n	8008dea <_dtoa_r+0x32>
 8009046:	2301      	movs	r3, #1
 8009048:	e7de      	b.n	8009008 <_dtoa_r+0x250>
 800904a:	2300      	movs	r3, #0
 800904c:	9308      	str	r3, [sp, #32]
 800904e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009050:	eb0a 0903 	add.w	r9, sl, r3
 8009054:	f109 0301 	add.w	r3, r9, #1
 8009058:	2b01      	cmp	r3, #1
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	bfb8      	it	lt
 800905e:	2301      	movlt	r3, #1
 8009060:	e7dd      	b.n	800901e <_dtoa_r+0x266>
 8009062:	2301      	movs	r3, #1
 8009064:	e7f2      	b.n	800904c <_dtoa_r+0x294>
 8009066:	2501      	movs	r5, #1
 8009068:	2300      	movs	r3, #0
 800906a:	9305      	str	r3, [sp, #20]
 800906c:	9508      	str	r5, [sp, #32]
 800906e:	f04f 39ff 	mov.w	r9, #4294967295
 8009072:	2200      	movs	r2, #0
 8009074:	f8cd 9004 	str.w	r9, [sp, #4]
 8009078:	2312      	movs	r3, #18
 800907a:	9209      	str	r2, [sp, #36]	; 0x24
 800907c:	e7cf      	b.n	800901e <_dtoa_r+0x266>
 800907e:	2301      	movs	r3, #1
 8009080:	9308      	str	r3, [sp, #32]
 8009082:	e7f4      	b.n	800906e <_dtoa_r+0x2b6>
 8009084:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009088:	f8cd 9004 	str.w	r9, [sp, #4]
 800908c:	464b      	mov	r3, r9
 800908e:	e7c6      	b.n	800901e <_dtoa_r+0x266>
 8009090:	3101      	adds	r1, #1
 8009092:	6041      	str	r1, [r0, #4]
 8009094:	0052      	lsls	r2, r2, #1
 8009096:	e7c6      	b.n	8009026 <_dtoa_r+0x26e>
 8009098:	636f4361 	.word	0x636f4361
 800909c:	3fd287a7 	.word	0x3fd287a7
 80090a0:	8b60c8b3 	.word	0x8b60c8b3
 80090a4:	3fc68a28 	.word	0x3fc68a28
 80090a8:	509f79fb 	.word	0x509f79fb
 80090ac:	3fd34413 	.word	0x3fd34413
 80090b0:	0800b14d 	.word	0x0800b14d
 80090b4:	0800b164 	.word	0x0800b164
 80090b8:	7ff00000 	.word	0x7ff00000
 80090bc:	0800b149 	.word	0x0800b149
 80090c0:	0800b140 	.word	0x0800b140
 80090c4:	0800b11d 	.word	0x0800b11d
 80090c8:	3ff80000 	.word	0x3ff80000
 80090cc:	0800b260 	.word	0x0800b260
 80090d0:	0800b1c3 	.word	0x0800b1c3
 80090d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090d6:	9a00      	ldr	r2, [sp, #0]
 80090d8:	601a      	str	r2, [r3, #0]
 80090da:	9b01      	ldr	r3, [sp, #4]
 80090dc:	2b0e      	cmp	r3, #14
 80090de:	f200 80ad 	bhi.w	800923c <_dtoa_r+0x484>
 80090e2:	2d00      	cmp	r5, #0
 80090e4:	f000 80aa 	beq.w	800923c <_dtoa_r+0x484>
 80090e8:	f1ba 0f00 	cmp.w	sl, #0
 80090ec:	dd36      	ble.n	800915c <_dtoa_r+0x3a4>
 80090ee:	4ac3      	ldr	r2, [pc, #780]	; (80093fc <_dtoa_r+0x644>)
 80090f0:	f00a 030f 	and.w	r3, sl, #15
 80090f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80090f8:	ed93 7b00 	vldr	d7, [r3]
 80090fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009100:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009104:	eeb0 8a47 	vmov.f32	s16, s14
 8009108:	eef0 8a67 	vmov.f32	s17, s15
 800910c:	d016      	beq.n	800913c <_dtoa_r+0x384>
 800910e:	4bbc      	ldr	r3, [pc, #752]	; (8009400 <_dtoa_r+0x648>)
 8009110:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009114:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009118:	f7f7 fbb8 	bl	800088c <__aeabi_ddiv>
 800911c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009120:	f007 070f 	and.w	r7, r7, #15
 8009124:	2503      	movs	r5, #3
 8009126:	4eb6      	ldr	r6, [pc, #728]	; (8009400 <_dtoa_r+0x648>)
 8009128:	b957      	cbnz	r7, 8009140 <_dtoa_r+0x388>
 800912a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800912e:	ec53 2b18 	vmov	r2, r3, d8
 8009132:	f7f7 fbab 	bl	800088c <__aeabi_ddiv>
 8009136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800913a:	e029      	b.n	8009190 <_dtoa_r+0x3d8>
 800913c:	2502      	movs	r5, #2
 800913e:	e7f2      	b.n	8009126 <_dtoa_r+0x36e>
 8009140:	07f9      	lsls	r1, r7, #31
 8009142:	d508      	bpl.n	8009156 <_dtoa_r+0x39e>
 8009144:	ec51 0b18 	vmov	r0, r1, d8
 8009148:	e9d6 2300 	ldrd	r2, r3, [r6]
 800914c:	f7f7 fa74 	bl	8000638 <__aeabi_dmul>
 8009150:	ec41 0b18 	vmov	d8, r0, r1
 8009154:	3501      	adds	r5, #1
 8009156:	107f      	asrs	r7, r7, #1
 8009158:	3608      	adds	r6, #8
 800915a:	e7e5      	b.n	8009128 <_dtoa_r+0x370>
 800915c:	f000 80a6 	beq.w	80092ac <_dtoa_r+0x4f4>
 8009160:	f1ca 0600 	rsb	r6, sl, #0
 8009164:	4ba5      	ldr	r3, [pc, #660]	; (80093fc <_dtoa_r+0x644>)
 8009166:	4fa6      	ldr	r7, [pc, #664]	; (8009400 <_dtoa_r+0x648>)
 8009168:	f006 020f 	and.w	r2, r6, #15
 800916c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009178:	f7f7 fa5e 	bl	8000638 <__aeabi_dmul>
 800917c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009180:	1136      	asrs	r6, r6, #4
 8009182:	2300      	movs	r3, #0
 8009184:	2502      	movs	r5, #2
 8009186:	2e00      	cmp	r6, #0
 8009188:	f040 8085 	bne.w	8009296 <_dtoa_r+0x4de>
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1d2      	bne.n	8009136 <_dtoa_r+0x37e>
 8009190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 808c 	beq.w	80092b0 <_dtoa_r+0x4f8>
 8009198:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800919c:	4b99      	ldr	r3, [pc, #612]	; (8009404 <_dtoa_r+0x64c>)
 800919e:	2200      	movs	r2, #0
 80091a0:	4630      	mov	r0, r6
 80091a2:	4639      	mov	r1, r7
 80091a4:	f7f7 fcba 	bl	8000b1c <__aeabi_dcmplt>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	f000 8081 	beq.w	80092b0 <_dtoa_r+0x4f8>
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d07d      	beq.n	80092b0 <_dtoa_r+0x4f8>
 80091b4:	f1b9 0f00 	cmp.w	r9, #0
 80091b8:	dd3c      	ble.n	8009234 <_dtoa_r+0x47c>
 80091ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80091be:	9307      	str	r3, [sp, #28]
 80091c0:	2200      	movs	r2, #0
 80091c2:	4b91      	ldr	r3, [pc, #580]	; (8009408 <_dtoa_r+0x650>)
 80091c4:	4630      	mov	r0, r6
 80091c6:	4639      	mov	r1, r7
 80091c8:	f7f7 fa36 	bl	8000638 <__aeabi_dmul>
 80091cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091d0:	3501      	adds	r5, #1
 80091d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80091d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091da:	4628      	mov	r0, r5
 80091dc:	f7f7 f9c2 	bl	8000564 <__aeabi_i2d>
 80091e0:	4632      	mov	r2, r6
 80091e2:	463b      	mov	r3, r7
 80091e4:	f7f7 fa28 	bl	8000638 <__aeabi_dmul>
 80091e8:	4b88      	ldr	r3, [pc, #544]	; (800940c <_dtoa_r+0x654>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	f7f7 f86e 	bl	80002cc <__adddf3>
 80091f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80091f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091f8:	9303      	str	r3, [sp, #12]
 80091fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d15c      	bne.n	80092ba <_dtoa_r+0x502>
 8009200:	4b83      	ldr	r3, [pc, #524]	; (8009410 <_dtoa_r+0x658>)
 8009202:	2200      	movs	r2, #0
 8009204:	4630      	mov	r0, r6
 8009206:	4639      	mov	r1, r7
 8009208:	f7f7 f85e 	bl	80002c8 <__aeabi_dsub>
 800920c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009210:	4606      	mov	r6, r0
 8009212:	460f      	mov	r7, r1
 8009214:	f7f7 fca0 	bl	8000b58 <__aeabi_dcmpgt>
 8009218:	2800      	cmp	r0, #0
 800921a:	f040 8296 	bne.w	800974a <_dtoa_r+0x992>
 800921e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009222:	4630      	mov	r0, r6
 8009224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009228:	4639      	mov	r1, r7
 800922a:	f7f7 fc77 	bl	8000b1c <__aeabi_dcmplt>
 800922e:	2800      	cmp	r0, #0
 8009230:	f040 8288 	bne.w	8009744 <_dtoa_r+0x98c>
 8009234:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009238:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800923c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800923e:	2b00      	cmp	r3, #0
 8009240:	f2c0 8158 	blt.w	80094f4 <_dtoa_r+0x73c>
 8009244:	f1ba 0f0e 	cmp.w	sl, #14
 8009248:	f300 8154 	bgt.w	80094f4 <_dtoa_r+0x73c>
 800924c:	4b6b      	ldr	r3, [pc, #428]	; (80093fc <_dtoa_r+0x644>)
 800924e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009252:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009258:	2b00      	cmp	r3, #0
 800925a:	f280 80e3 	bge.w	8009424 <_dtoa_r+0x66c>
 800925e:	9b01      	ldr	r3, [sp, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	f300 80df 	bgt.w	8009424 <_dtoa_r+0x66c>
 8009266:	f040 826d 	bne.w	8009744 <_dtoa_r+0x98c>
 800926a:	4b69      	ldr	r3, [pc, #420]	; (8009410 <_dtoa_r+0x658>)
 800926c:	2200      	movs	r2, #0
 800926e:	4640      	mov	r0, r8
 8009270:	4649      	mov	r1, r9
 8009272:	f7f7 f9e1 	bl	8000638 <__aeabi_dmul>
 8009276:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800927a:	f7f7 fc63 	bl	8000b44 <__aeabi_dcmpge>
 800927e:	9e01      	ldr	r6, [sp, #4]
 8009280:	4637      	mov	r7, r6
 8009282:	2800      	cmp	r0, #0
 8009284:	f040 8243 	bne.w	800970e <_dtoa_r+0x956>
 8009288:	9d00      	ldr	r5, [sp, #0]
 800928a:	2331      	movs	r3, #49	; 0x31
 800928c:	f805 3b01 	strb.w	r3, [r5], #1
 8009290:	f10a 0a01 	add.w	sl, sl, #1
 8009294:	e23f      	b.n	8009716 <_dtoa_r+0x95e>
 8009296:	07f2      	lsls	r2, r6, #31
 8009298:	d505      	bpl.n	80092a6 <_dtoa_r+0x4ee>
 800929a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800929e:	f7f7 f9cb 	bl	8000638 <__aeabi_dmul>
 80092a2:	3501      	adds	r5, #1
 80092a4:	2301      	movs	r3, #1
 80092a6:	1076      	asrs	r6, r6, #1
 80092a8:	3708      	adds	r7, #8
 80092aa:	e76c      	b.n	8009186 <_dtoa_r+0x3ce>
 80092ac:	2502      	movs	r5, #2
 80092ae:	e76f      	b.n	8009190 <_dtoa_r+0x3d8>
 80092b0:	9b01      	ldr	r3, [sp, #4]
 80092b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80092b6:	930c      	str	r3, [sp, #48]	; 0x30
 80092b8:	e78d      	b.n	80091d6 <_dtoa_r+0x41e>
 80092ba:	9900      	ldr	r1, [sp, #0]
 80092bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80092be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092c0:	4b4e      	ldr	r3, [pc, #312]	; (80093fc <_dtoa_r+0x644>)
 80092c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092c6:	4401      	add	r1, r0
 80092c8:	9102      	str	r1, [sp, #8]
 80092ca:	9908      	ldr	r1, [sp, #32]
 80092cc:	eeb0 8a47 	vmov.f32	s16, s14
 80092d0:	eef0 8a67 	vmov.f32	s17, s15
 80092d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092dc:	2900      	cmp	r1, #0
 80092de:	d045      	beq.n	800936c <_dtoa_r+0x5b4>
 80092e0:	494c      	ldr	r1, [pc, #304]	; (8009414 <_dtoa_r+0x65c>)
 80092e2:	2000      	movs	r0, #0
 80092e4:	f7f7 fad2 	bl	800088c <__aeabi_ddiv>
 80092e8:	ec53 2b18 	vmov	r2, r3, d8
 80092ec:	f7f6 ffec 	bl	80002c8 <__aeabi_dsub>
 80092f0:	9d00      	ldr	r5, [sp, #0]
 80092f2:	ec41 0b18 	vmov	d8, r0, r1
 80092f6:	4639      	mov	r1, r7
 80092f8:	4630      	mov	r0, r6
 80092fa:	f7f7 fc4d 	bl	8000b98 <__aeabi_d2iz>
 80092fe:	900c      	str	r0, [sp, #48]	; 0x30
 8009300:	f7f7 f930 	bl	8000564 <__aeabi_i2d>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4630      	mov	r0, r6
 800930a:	4639      	mov	r1, r7
 800930c:	f7f6 ffdc 	bl	80002c8 <__aeabi_dsub>
 8009310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009312:	3330      	adds	r3, #48	; 0x30
 8009314:	f805 3b01 	strb.w	r3, [r5], #1
 8009318:	ec53 2b18 	vmov	r2, r3, d8
 800931c:	4606      	mov	r6, r0
 800931e:	460f      	mov	r7, r1
 8009320:	f7f7 fbfc 	bl	8000b1c <__aeabi_dcmplt>
 8009324:	2800      	cmp	r0, #0
 8009326:	d165      	bne.n	80093f4 <_dtoa_r+0x63c>
 8009328:	4632      	mov	r2, r6
 800932a:	463b      	mov	r3, r7
 800932c:	4935      	ldr	r1, [pc, #212]	; (8009404 <_dtoa_r+0x64c>)
 800932e:	2000      	movs	r0, #0
 8009330:	f7f6 ffca 	bl	80002c8 <__aeabi_dsub>
 8009334:	ec53 2b18 	vmov	r2, r3, d8
 8009338:	f7f7 fbf0 	bl	8000b1c <__aeabi_dcmplt>
 800933c:	2800      	cmp	r0, #0
 800933e:	f040 80b9 	bne.w	80094b4 <_dtoa_r+0x6fc>
 8009342:	9b02      	ldr	r3, [sp, #8]
 8009344:	429d      	cmp	r5, r3
 8009346:	f43f af75 	beq.w	8009234 <_dtoa_r+0x47c>
 800934a:	4b2f      	ldr	r3, [pc, #188]	; (8009408 <_dtoa_r+0x650>)
 800934c:	ec51 0b18 	vmov	r0, r1, d8
 8009350:	2200      	movs	r2, #0
 8009352:	f7f7 f971 	bl	8000638 <__aeabi_dmul>
 8009356:	4b2c      	ldr	r3, [pc, #176]	; (8009408 <_dtoa_r+0x650>)
 8009358:	ec41 0b18 	vmov	d8, r0, r1
 800935c:	2200      	movs	r2, #0
 800935e:	4630      	mov	r0, r6
 8009360:	4639      	mov	r1, r7
 8009362:	f7f7 f969 	bl	8000638 <__aeabi_dmul>
 8009366:	4606      	mov	r6, r0
 8009368:	460f      	mov	r7, r1
 800936a:	e7c4      	b.n	80092f6 <_dtoa_r+0x53e>
 800936c:	ec51 0b17 	vmov	r0, r1, d7
 8009370:	f7f7 f962 	bl	8000638 <__aeabi_dmul>
 8009374:	9b02      	ldr	r3, [sp, #8]
 8009376:	9d00      	ldr	r5, [sp, #0]
 8009378:	930c      	str	r3, [sp, #48]	; 0x30
 800937a:	ec41 0b18 	vmov	d8, r0, r1
 800937e:	4639      	mov	r1, r7
 8009380:	4630      	mov	r0, r6
 8009382:	f7f7 fc09 	bl	8000b98 <__aeabi_d2iz>
 8009386:	9011      	str	r0, [sp, #68]	; 0x44
 8009388:	f7f7 f8ec 	bl	8000564 <__aeabi_i2d>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	4630      	mov	r0, r6
 8009392:	4639      	mov	r1, r7
 8009394:	f7f6 ff98 	bl	80002c8 <__aeabi_dsub>
 8009398:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800939a:	3330      	adds	r3, #48	; 0x30
 800939c:	f805 3b01 	strb.w	r3, [r5], #1
 80093a0:	9b02      	ldr	r3, [sp, #8]
 80093a2:	429d      	cmp	r5, r3
 80093a4:	4606      	mov	r6, r0
 80093a6:	460f      	mov	r7, r1
 80093a8:	f04f 0200 	mov.w	r2, #0
 80093ac:	d134      	bne.n	8009418 <_dtoa_r+0x660>
 80093ae:	4b19      	ldr	r3, [pc, #100]	; (8009414 <_dtoa_r+0x65c>)
 80093b0:	ec51 0b18 	vmov	r0, r1, d8
 80093b4:	f7f6 ff8a 	bl	80002cc <__adddf3>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4630      	mov	r0, r6
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f7 fbca 	bl	8000b58 <__aeabi_dcmpgt>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d175      	bne.n	80094b4 <_dtoa_r+0x6fc>
 80093c8:	ec53 2b18 	vmov	r2, r3, d8
 80093cc:	4911      	ldr	r1, [pc, #68]	; (8009414 <_dtoa_r+0x65c>)
 80093ce:	2000      	movs	r0, #0
 80093d0:	f7f6 ff7a 	bl	80002c8 <__aeabi_dsub>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4630      	mov	r0, r6
 80093da:	4639      	mov	r1, r7
 80093dc:	f7f7 fb9e 	bl	8000b1c <__aeabi_dcmplt>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	f43f af27 	beq.w	8009234 <_dtoa_r+0x47c>
 80093e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093e8:	1e6b      	subs	r3, r5, #1
 80093ea:	930c      	str	r3, [sp, #48]	; 0x30
 80093ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093f0:	2b30      	cmp	r3, #48	; 0x30
 80093f2:	d0f8      	beq.n	80093e6 <_dtoa_r+0x62e>
 80093f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80093f8:	e04a      	b.n	8009490 <_dtoa_r+0x6d8>
 80093fa:	bf00      	nop
 80093fc:	0800b260 	.word	0x0800b260
 8009400:	0800b238 	.word	0x0800b238
 8009404:	3ff00000 	.word	0x3ff00000
 8009408:	40240000 	.word	0x40240000
 800940c:	401c0000 	.word	0x401c0000
 8009410:	40140000 	.word	0x40140000
 8009414:	3fe00000 	.word	0x3fe00000
 8009418:	4baf      	ldr	r3, [pc, #700]	; (80096d8 <_dtoa_r+0x920>)
 800941a:	f7f7 f90d 	bl	8000638 <__aeabi_dmul>
 800941e:	4606      	mov	r6, r0
 8009420:	460f      	mov	r7, r1
 8009422:	e7ac      	b.n	800937e <_dtoa_r+0x5c6>
 8009424:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009428:	9d00      	ldr	r5, [sp, #0]
 800942a:	4642      	mov	r2, r8
 800942c:	464b      	mov	r3, r9
 800942e:	4630      	mov	r0, r6
 8009430:	4639      	mov	r1, r7
 8009432:	f7f7 fa2b 	bl	800088c <__aeabi_ddiv>
 8009436:	f7f7 fbaf 	bl	8000b98 <__aeabi_d2iz>
 800943a:	9002      	str	r0, [sp, #8]
 800943c:	f7f7 f892 	bl	8000564 <__aeabi_i2d>
 8009440:	4642      	mov	r2, r8
 8009442:	464b      	mov	r3, r9
 8009444:	f7f7 f8f8 	bl	8000638 <__aeabi_dmul>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4630      	mov	r0, r6
 800944e:	4639      	mov	r1, r7
 8009450:	f7f6 ff3a 	bl	80002c8 <__aeabi_dsub>
 8009454:	9e02      	ldr	r6, [sp, #8]
 8009456:	9f01      	ldr	r7, [sp, #4]
 8009458:	3630      	adds	r6, #48	; 0x30
 800945a:	f805 6b01 	strb.w	r6, [r5], #1
 800945e:	9e00      	ldr	r6, [sp, #0]
 8009460:	1bae      	subs	r6, r5, r6
 8009462:	42b7      	cmp	r7, r6
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	d137      	bne.n	80094da <_dtoa_r+0x722>
 800946a:	f7f6 ff2f 	bl	80002cc <__adddf3>
 800946e:	4642      	mov	r2, r8
 8009470:	464b      	mov	r3, r9
 8009472:	4606      	mov	r6, r0
 8009474:	460f      	mov	r7, r1
 8009476:	f7f7 fb6f 	bl	8000b58 <__aeabi_dcmpgt>
 800947a:	b9c8      	cbnz	r0, 80094b0 <_dtoa_r+0x6f8>
 800947c:	4642      	mov	r2, r8
 800947e:	464b      	mov	r3, r9
 8009480:	4630      	mov	r0, r6
 8009482:	4639      	mov	r1, r7
 8009484:	f7f7 fb40 	bl	8000b08 <__aeabi_dcmpeq>
 8009488:	b110      	cbz	r0, 8009490 <_dtoa_r+0x6d8>
 800948a:	9b02      	ldr	r3, [sp, #8]
 800948c:	07d9      	lsls	r1, r3, #31
 800948e:	d40f      	bmi.n	80094b0 <_dtoa_r+0x6f8>
 8009490:	4620      	mov	r0, r4
 8009492:	4659      	mov	r1, fp
 8009494:	f000 fad6 	bl	8009a44 <_Bfree>
 8009498:	2300      	movs	r3, #0
 800949a:	702b      	strb	r3, [r5, #0]
 800949c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800949e:	f10a 0001 	add.w	r0, sl, #1
 80094a2:	6018      	str	r0, [r3, #0]
 80094a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f43f acd8 	beq.w	8008e5c <_dtoa_r+0xa4>
 80094ac:	601d      	str	r5, [r3, #0]
 80094ae:	e4d5      	b.n	8008e5c <_dtoa_r+0xa4>
 80094b0:	f8cd a01c 	str.w	sl, [sp, #28]
 80094b4:	462b      	mov	r3, r5
 80094b6:	461d      	mov	r5, r3
 80094b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094bc:	2a39      	cmp	r2, #57	; 0x39
 80094be:	d108      	bne.n	80094d2 <_dtoa_r+0x71a>
 80094c0:	9a00      	ldr	r2, [sp, #0]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d1f7      	bne.n	80094b6 <_dtoa_r+0x6fe>
 80094c6:	9a07      	ldr	r2, [sp, #28]
 80094c8:	9900      	ldr	r1, [sp, #0]
 80094ca:	3201      	adds	r2, #1
 80094cc:	9207      	str	r2, [sp, #28]
 80094ce:	2230      	movs	r2, #48	; 0x30
 80094d0:	700a      	strb	r2, [r1, #0]
 80094d2:	781a      	ldrb	r2, [r3, #0]
 80094d4:	3201      	adds	r2, #1
 80094d6:	701a      	strb	r2, [r3, #0]
 80094d8:	e78c      	b.n	80093f4 <_dtoa_r+0x63c>
 80094da:	4b7f      	ldr	r3, [pc, #508]	; (80096d8 <_dtoa_r+0x920>)
 80094dc:	2200      	movs	r2, #0
 80094de:	f7f7 f8ab 	bl	8000638 <__aeabi_dmul>
 80094e2:	2200      	movs	r2, #0
 80094e4:	2300      	movs	r3, #0
 80094e6:	4606      	mov	r6, r0
 80094e8:	460f      	mov	r7, r1
 80094ea:	f7f7 fb0d 	bl	8000b08 <__aeabi_dcmpeq>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d09b      	beq.n	800942a <_dtoa_r+0x672>
 80094f2:	e7cd      	b.n	8009490 <_dtoa_r+0x6d8>
 80094f4:	9a08      	ldr	r2, [sp, #32]
 80094f6:	2a00      	cmp	r2, #0
 80094f8:	f000 80c4 	beq.w	8009684 <_dtoa_r+0x8cc>
 80094fc:	9a05      	ldr	r2, [sp, #20]
 80094fe:	2a01      	cmp	r2, #1
 8009500:	f300 80a8 	bgt.w	8009654 <_dtoa_r+0x89c>
 8009504:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009506:	2a00      	cmp	r2, #0
 8009508:	f000 80a0 	beq.w	800964c <_dtoa_r+0x894>
 800950c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009510:	9e06      	ldr	r6, [sp, #24]
 8009512:	4645      	mov	r5, r8
 8009514:	9a04      	ldr	r2, [sp, #16]
 8009516:	2101      	movs	r1, #1
 8009518:	441a      	add	r2, r3
 800951a:	4620      	mov	r0, r4
 800951c:	4498      	add	r8, r3
 800951e:	9204      	str	r2, [sp, #16]
 8009520:	f000 fb4c 	bl	8009bbc <__i2b>
 8009524:	4607      	mov	r7, r0
 8009526:	2d00      	cmp	r5, #0
 8009528:	dd0b      	ble.n	8009542 <_dtoa_r+0x78a>
 800952a:	9b04      	ldr	r3, [sp, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	dd08      	ble.n	8009542 <_dtoa_r+0x78a>
 8009530:	42ab      	cmp	r3, r5
 8009532:	9a04      	ldr	r2, [sp, #16]
 8009534:	bfa8      	it	ge
 8009536:	462b      	movge	r3, r5
 8009538:	eba8 0803 	sub.w	r8, r8, r3
 800953c:	1aed      	subs	r5, r5, r3
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	9304      	str	r3, [sp, #16]
 8009542:	9b06      	ldr	r3, [sp, #24]
 8009544:	b1fb      	cbz	r3, 8009586 <_dtoa_r+0x7ce>
 8009546:	9b08      	ldr	r3, [sp, #32]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 809f 	beq.w	800968c <_dtoa_r+0x8d4>
 800954e:	2e00      	cmp	r6, #0
 8009550:	dd11      	ble.n	8009576 <_dtoa_r+0x7be>
 8009552:	4639      	mov	r1, r7
 8009554:	4632      	mov	r2, r6
 8009556:	4620      	mov	r0, r4
 8009558:	f000 fbec 	bl	8009d34 <__pow5mult>
 800955c:	465a      	mov	r2, fp
 800955e:	4601      	mov	r1, r0
 8009560:	4607      	mov	r7, r0
 8009562:	4620      	mov	r0, r4
 8009564:	f000 fb40 	bl	8009be8 <__multiply>
 8009568:	4659      	mov	r1, fp
 800956a:	9007      	str	r0, [sp, #28]
 800956c:	4620      	mov	r0, r4
 800956e:	f000 fa69 	bl	8009a44 <_Bfree>
 8009572:	9b07      	ldr	r3, [sp, #28]
 8009574:	469b      	mov	fp, r3
 8009576:	9b06      	ldr	r3, [sp, #24]
 8009578:	1b9a      	subs	r2, r3, r6
 800957a:	d004      	beq.n	8009586 <_dtoa_r+0x7ce>
 800957c:	4659      	mov	r1, fp
 800957e:	4620      	mov	r0, r4
 8009580:	f000 fbd8 	bl	8009d34 <__pow5mult>
 8009584:	4683      	mov	fp, r0
 8009586:	2101      	movs	r1, #1
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fb17 	bl	8009bbc <__i2b>
 800958e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009590:	2b00      	cmp	r3, #0
 8009592:	4606      	mov	r6, r0
 8009594:	dd7c      	ble.n	8009690 <_dtoa_r+0x8d8>
 8009596:	461a      	mov	r2, r3
 8009598:	4601      	mov	r1, r0
 800959a:	4620      	mov	r0, r4
 800959c:	f000 fbca 	bl	8009d34 <__pow5mult>
 80095a0:	9b05      	ldr	r3, [sp, #20]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	4606      	mov	r6, r0
 80095a6:	dd76      	ble.n	8009696 <_dtoa_r+0x8de>
 80095a8:	2300      	movs	r3, #0
 80095aa:	9306      	str	r3, [sp, #24]
 80095ac:	6933      	ldr	r3, [r6, #16]
 80095ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095b2:	6918      	ldr	r0, [r3, #16]
 80095b4:	f000 fab2 	bl	8009b1c <__hi0bits>
 80095b8:	f1c0 0020 	rsb	r0, r0, #32
 80095bc:	9b04      	ldr	r3, [sp, #16]
 80095be:	4418      	add	r0, r3
 80095c0:	f010 001f 	ands.w	r0, r0, #31
 80095c4:	f000 8086 	beq.w	80096d4 <_dtoa_r+0x91c>
 80095c8:	f1c0 0320 	rsb	r3, r0, #32
 80095cc:	2b04      	cmp	r3, #4
 80095ce:	dd7f      	ble.n	80096d0 <_dtoa_r+0x918>
 80095d0:	f1c0 001c 	rsb	r0, r0, #28
 80095d4:	9b04      	ldr	r3, [sp, #16]
 80095d6:	4403      	add	r3, r0
 80095d8:	4480      	add	r8, r0
 80095da:	4405      	add	r5, r0
 80095dc:	9304      	str	r3, [sp, #16]
 80095de:	f1b8 0f00 	cmp.w	r8, #0
 80095e2:	dd05      	ble.n	80095f0 <_dtoa_r+0x838>
 80095e4:	4659      	mov	r1, fp
 80095e6:	4642      	mov	r2, r8
 80095e8:	4620      	mov	r0, r4
 80095ea:	f000 fbfd 	bl	8009de8 <__lshift>
 80095ee:	4683      	mov	fp, r0
 80095f0:	9b04      	ldr	r3, [sp, #16]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	dd05      	ble.n	8009602 <_dtoa_r+0x84a>
 80095f6:	4631      	mov	r1, r6
 80095f8:	461a      	mov	r2, r3
 80095fa:	4620      	mov	r0, r4
 80095fc:	f000 fbf4 	bl	8009de8 <__lshift>
 8009600:	4606      	mov	r6, r0
 8009602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009604:	2b00      	cmp	r3, #0
 8009606:	d069      	beq.n	80096dc <_dtoa_r+0x924>
 8009608:	4631      	mov	r1, r6
 800960a:	4658      	mov	r0, fp
 800960c:	f000 fc58 	bl	8009ec0 <__mcmp>
 8009610:	2800      	cmp	r0, #0
 8009612:	da63      	bge.n	80096dc <_dtoa_r+0x924>
 8009614:	2300      	movs	r3, #0
 8009616:	4659      	mov	r1, fp
 8009618:	220a      	movs	r2, #10
 800961a:	4620      	mov	r0, r4
 800961c:	f000 fa34 	bl	8009a88 <__multadd>
 8009620:	9b08      	ldr	r3, [sp, #32]
 8009622:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009626:	4683      	mov	fp, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 818f 	beq.w	800994c <_dtoa_r+0xb94>
 800962e:	4639      	mov	r1, r7
 8009630:	2300      	movs	r3, #0
 8009632:	220a      	movs	r2, #10
 8009634:	4620      	mov	r0, r4
 8009636:	f000 fa27 	bl	8009a88 <__multadd>
 800963a:	f1b9 0f00 	cmp.w	r9, #0
 800963e:	4607      	mov	r7, r0
 8009640:	f300 808e 	bgt.w	8009760 <_dtoa_r+0x9a8>
 8009644:	9b05      	ldr	r3, [sp, #20]
 8009646:	2b02      	cmp	r3, #2
 8009648:	dc50      	bgt.n	80096ec <_dtoa_r+0x934>
 800964a:	e089      	b.n	8009760 <_dtoa_r+0x9a8>
 800964c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800964e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009652:	e75d      	b.n	8009510 <_dtoa_r+0x758>
 8009654:	9b01      	ldr	r3, [sp, #4]
 8009656:	1e5e      	subs	r6, r3, #1
 8009658:	9b06      	ldr	r3, [sp, #24]
 800965a:	42b3      	cmp	r3, r6
 800965c:	bfbf      	itttt	lt
 800965e:	9b06      	ldrlt	r3, [sp, #24]
 8009660:	9606      	strlt	r6, [sp, #24]
 8009662:	1af2      	sublt	r2, r6, r3
 8009664:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009666:	bfb6      	itet	lt
 8009668:	189b      	addlt	r3, r3, r2
 800966a:	1b9e      	subge	r6, r3, r6
 800966c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800966e:	9b01      	ldr	r3, [sp, #4]
 8009670:	bfb8      	it	lt
 8009672:	2600      	movlt	r6, #0
 8009674:	2b00      	cmp	r3, #0
 8009676:	bfb5      	itete	lt
 8009678:	eba8 0503 	sublt.w	r5, r8, r3
 800967c:	9b01      	ldrge	r3, [sp, #4]
 800967e:	2300      	movlt	r3, #0
 8009680:	4645      	movge	r5, r8
 8009682:	e747      	b.n	8009514 <_dtoa_r+0x75c>
 8009684:	9e06      	ldr	r6, [sp, #24]
 8009686:	9f08      	ldr	r7, [sp, #32]
 8009688:	4645      	mov	r5, r8
 800968a:	e74c      	b.n	8009526 <_dtoa_r+0x76e>
 800968c:	9a06      	ldr	r2, [sp, #24]
 800968e:	e775      	b.n	800957c <_dtoa_r+0x7c4>
 8009690:	9b05      	ldr	r3, [sp, #20]
 8009692:	2b01      	cmp	r3, #1
 8009694:	dc18      	bgt.n	80096c8 <_dtoa_r+0x910>
 8009696:	9b02      	ldr	r3, [sp, #8]
 8009698:	b9b3      	cbnz	r3, 80096c8 <_dtoa_r+0x910>
 800969a:	9b03      	ldr	r3, [sp, #12]
 800969c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096a0:	b9a3      	cbnz	r3, 80096cc <_dtoa_r+0x914>
 80096a2:	9b03      	ldr	r3, [sp, #12]
 80096a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096a8:	0d1b      	lsrs	r3, r3, #20
 80096aa:	051b      	lsls	r3, r3, #20
 80096ac:	b12b      	cbz	r3, 80096ba <_dtoa_r+0x902>
 80096ae:	9b04      	ldr	r3, [sp, #16]
 80096b0:	3301      	adds	r3, #1
 80096b2:	9304      	str	r3, [sp, #16]
 80096b4:	f108 0801 	add.w	r8, r8, #1
 80096b8:	2301      	movs	r3, #1
 80096ba:	9306      	str	r3, [sp, #24]
 80096bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f47f af74 	bne.w	80095ac <_dtoa_r+0x7f4>
 80096c4:	2001      	movs	r0, #1
 80096c6:	e779      	b.n	80095bc <_dtoa_r+0x804>
 80096c8:	2300      	movs	r3, #0
 80096ca:	e7f6      	b.n	80096ba <_dtoa_r+0x902>
 80096cc:	9b02      	ldr	r3, [sp, #8]
 80096ce:	e7f4      	b.n	80096ba <_dtoa_r+0x902>
 80096d0:	d085      	beq.n	80095de <_dtoa_r+0x826>
 80096d2:	4618      	mov	r0, r3
 80096d4:	301c      	adds	r0, #28
 80096d6:	e77d      	b.n	80095d4 <_dtoa_r+0x81c>
 80096d8:	40240000 	.word	0x40240000
 80096dc:	9b01      	ldr	r3, [sp, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	dc38      	bgt.n	8009754 <_dtoa_r+0x99c>
 80096e2:	9b05      	ldr	r3, [sp, #20]
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	dd35      	ble.n	8009754 <_dtoa_r+0x99c>
 80096e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80096ec:	f1b9 0f00 	cmp.w	r9, #0
 80096f0:	d10d      	bne.n	800970e <_dtoa_r+0x956>
 80096f2:	4631      	mov	r1, r6
 80096f4:	464b      	mov	r3, r9
 80096f6:	2205      	movs	r2, #5
 80096f8:	4620      	mov	r0, r4
 80096fa:	f000 f9c5 	bl	8009a88 <__multadd>
 80096fe:	4601      	mov	r1, r0
 8009700:	4606      	mov	r6, r0
 8009702:	4658      	mov	r0, fp
 8009704:	f000 fbdc 	bl	8009ec0 <__mcmp>
 8009708:	2800      	cmp	r0, #0
 800970a:	f73f adbd 	bgt.w	8009288 <_dtoa_r+0x4d0>
 800970e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009710:	9d00      	ldr	r5, [sp, #0]
 8009712:	ea6f 0a03 	mvn.w	sl, r3
 8009716:	f04f 0800 	mov.w	r8, #0
 800971a:	4631      	mov	r1, r6
 800971c:	4620      	mov	r0, r4
 800971e:	f000 f991 	bl	8009a44 <_Bfree>
 8009722:	2f00      	cmp	r7, #0
 8009724:	f43f aeb4 	beq.w	8009490 <_dtoa_r+0x6d8>
 8009728:	f1b8 0f00 	cmp.w	r8, #0
 800972c:	d005      	beq.n	800973a <_dtoa_r+0x982>
 800972e:	45b8      	cmp	r8, r7
 8009730:	d003      	beq.n	800973a <_dtoa_r+0x982>
 8009732:	4641      	mov	r1, r8
 8009734:	4620      	mov	r0, r4
 8009736:	f000 f985 	bl	8009a44 <_Bfree>
 800973a:	4639      	mov	r1, r7
 800973c:	4620      	mov	r0, r4
 800973e:	f000 f981 	bl	8009a44 <_Bfree>
 8009742:	e6a5      	b.n	8009490 <_dtoa_r+0x6d8>
 8009744:	2600      	movs	r6, #0
 8009746:	4637      	mov	r7, r6
 8009748:	e7e1      	b.n	800970e <_dtoa_r+0x956>
 800974a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800974c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009750:	4637      	mov	r7, r6
 8009752:	e599      	b.n	8009288 <_dtoa_r+0x4d0>
 8009754:	9b08      	ldr	r3, [sp, #32]
 8009756:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 80fd 	beq.w	800995a <_dtoa_r+0xba2>
 8009760:	2d00      	cmp	r5, #0
 8009762:	dd05      	ble.n	8009770 <_dtoa_r+0x9b8>
 8009764:	4639      	mov	r1, r7
 8009766:	462a      	mov	r2, r5
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fb3d 	bl	8009de8 <__lshift>
 800976e:	4607      	mov	r7, r0
 8009770:	9b06      	ldr	r3, [sp, #24]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d05c      	beq.n	8009830 <_dtoa_r+0xa78>
 8009776:	6879      	ldr	r1, [r7, #4]
 8009778:	4620      	mov	r0, r4
 800977a:	f000 f923 	bl	80099c4 <_Balloc>
 800977e:	4605      	mov	r5, r0
 8009780:	b928      	cbnz	r0, 800978e <_dtoa_r+0x9d6>
 8009782:	4b80      	ldr	r3, [pc, #512]	; (8009984 <_dtoa_r+0xbcc>)
 8009784:	4602      	mov	r2, r0
 8009786:	f240 21ea 	movw	r1, #746	; 0x2ea
 800978a:	f7ff bb2e 	b.w	8008dea <_dtoa_r+0x32>
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	3202      	adds	r2, #2
 8009792:	0092      	lsls	r2, r2, #2
 8009794:	f107 010c 	add.w	r1, r7, #12
 8009798:	300c      	adds	r0, #12
 800979a:	f000 f905 	bl	80099a8 <memcpy>
 800979e:	2201      	movs	r2, #1
 80097a0:	4629      	mov	r1, r5
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 fb20 	bl	8009de8 <__lshift>
 80097a8:	9b00      	ldr	r3, [sp, #0]
 80097aa:	3301      	adds	r3, #1
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	9b00      	ldr	r3, [sp, #0]
 80097b0:	444b      	add	r3, r9
 80097b2:	9307      	str	r3, [sp, #28]
 80097b4:	9b02      	ldr	r3, [sp, #8]
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	46b8      	mov	r8, r7
 80097bc:	9306      	str	r3, [sp, #24]
 80097be:	4607      	mov	r7, r0
 80097c0:	9b01      	ldr	r3, [sp, #4]
 80097c2:	4631      	mov	r1, r6
 80097c4:	3b01      	subs	r3, #1
 80097c6:	4658      	mov	r0, fp
 80097c8:	9302      	str	r3, [sp, #8]
 80097ca:	f7ff fa69 	bl	8008ca0 <quorem>
 80097ce:	4603      	mov	r3, r0
 80097d0:	3330      	adds	r3, #48	; 0x30
 80097d2:	9004      	str	r0, [sp, #16]
 80097d4:	4641      	mov	r1, r8
 80097d6:	4658      	mov	r0, fp
 80097d8:	9308      	str	r3, [sp, #32]
 80097da:	f000 fb71 	bl	8009ec0 <__mcmp>
 80097de:	463a      	mov	r2, r7
 80097e0:	4681      	mov	r9, r0
 80097e2:	4631      	mov	r1, r6
 80097e4:	4620      	mov	r0, r4
 80097e6:	f000 fb87 	bl	8009ef8 <__mdiff>
 80097ea:	68c2      	ldr	r2, [r0, #12]
 80097ec:	9b08      	ldr	r3, [sp, #32]
 80097ee:	4605      	mov	r5, r0
 80097f0:	bb02      	cbnz	r2, 8009834 <_dtoa_r+0xa7c>
 80097f2:	4601      	mov	r1, r0
 80097f4:	4658      	mov	r0, fp
 80097f6:	f000 fb63 	bl	8009ec0 <__mcmp>
 80097fa:	9b08      	ldr	r3, [sp, #32]
 80097fc:	4602      	mov	r2, r0
 80097fe:	4629      	mov	r1, r5
 8009800:	4620      	mov	r0, r4
 8009802:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009806:	f000 f91d 	bl	8009a44 <_Bfree>
 800980a:	9b05      	ldr	r3, [sp, #20]
 800980c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800980e:	9d01      	ldr	r5, [sp, #4]
 8009810:	ea43 0102 	orr.w	r1, r3, r2
 8009814:	9b06      	ldr	r3, [sp, #24]
 8009816:	430b      	orrs	r3, r1
 8009818:	9b08      	ldr	r3, [sp, #32]
 800981a:	d10d      	bne.n	8009838 <_dtoa_r+0xa80>
 800981c:	2b39      	cmp	r3, #57	; 0x39
 800981e:	d029      	beq.n	8009874 <_dtoa_r+0xabc>
 8009820:	f1b9 0f00 	cmp.w	r9, #0
 8009824:	dd01      	ble.n	800982a <_dtoa_r+0xa72>
 8009826:	9b04      	ldr	r3, [sp, #16]
 8009828:	3331      	adds	r3, #49	; 0x31
 800982a:	9a02      	ldr	r2, [sp, #8]
 800982c:	7013      	strb	r3, [r2, #0]
 800982e:	e774      	b.n	800971a <_dtoa_r+0x962>
 8009830:	4638      	mov	r0, r7
 8009832:	e7b9      	b.n	80097a8 <_dtoa_r+0x9f0>
 8009834:	2201      	movs	r2, #1
 8009836:	e7e2      	b.n	80097fe <_dtoa_r+0xa46>
 8009838:	f1b9 0f00 	cmp.w	r9, #0
 800983c:	db06      	blt.n	800984c <_dtoa_r+0xa94>
 800983e:	9905      	ldr	r1, [sp, #20]
 8009840:	ea41 0909 	orr.w	r9, r1, r9
 8009844:	9906      	ldr	r1, [sp, #24]
 8009846:	ea59 0101 	orrs.w	r1, r9, r1
 800984a:	d120      	bne.n	800988e <_dtoa_r+0xad6>
 800984c:	2a00      	cmp	r2, #0
 800984e:	ddec      	ble.n	800982a <_dtoa_r+0xa72>
 8009850:	4659      	mov	r1, fp
 8009852:	2201      	movs	r2, #1
 8009854:	4620      	mov	r0, r4
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	f000 fac6 	bl	8009de8 <__lshift>
 800985c:	4631      	mov	r1, r6
 800985e:	4683      	mov	fp, r0
 8009860:	f000 fb2e 	bl	8009ec0 <__mcmp>
 8009864:	2800      	cmp	r0, #0
 8009866:	9b01      	ldr	r3, [sp, #4]
 8009868:	dc02      	bgt.n	8009870 <_dtoa_r+0xab8>
 800986a:	d1de      	bne.n	800982a <_dtoa_r+0xa72>
 800986c:	07da      	lsls	r2, r3, #31
 800986e:	d5dc      	bpl.n	800982a <_dtoa_r+0xa72>
 8009870:	2b39      	cmp	r3, #57	; 0x39
 8009872:	d1d8      	bne.n	8009826 <_dtoa_r+0xa6e>
 8009874:	9a02      	ldr	r2, [sp, #8]
 8009876:	2339      	movs	r3, #57	; 0x39
 8009878:	7013      	strb	r3, [r2, #0]
 800987a:	462b      	mov	r3, r5
 800987c:	461d      	mov	r5, r3
 800987e:	3b01      	subs	r3, #1
 8009880:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009884:	2a39      	cmp	r2, #57	; 0x39
 8009886:	d050      	beq.n	800992a <_dtoa_r+0xb72>
 8009888:	3201      	adds	r2, #1
 800988a:	701a      	strb	r2, [r3, #0]
 800988c:	e745      	b.n	800971a <_dtoa_r+0x962>
 800988e:	2a00      	cmp	r2, #0
 8009890:	dd03      	ble.n	800989a <_dtoa_r+0xae2>
 8009892:	2b39      	cmp	r3, #57	; 0x39
 8009894:	d0ee      	beq.n	8009874 <_dtoa_r+0xabc>
 8009896:	3301      	adds	r3, #1
 8009898:	e7c7      	b.n	800982a <_dtoa_r+0xa72>
 800989a:	9a01      	ldr	r2, [sp, #4]
 800989c:	9907      	ldr	r1, [sp, #28]
 800989e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80098a2:	428a      	cmp	r2, r1
 80098a4:	d02a      	beq.n	80098fc <_dtoa_r+0xb44>
 80098a6:	4659      	mov	r1, fp
 80098a8:	2300      	movs	r3, #0
 80098aa:	220a      	movs	r2, #10
 80098ac:	4620      	mov	r0, r4
 80098ae:	f000 f8eb 	bl	8009a88 <__multadd>
 80098b2:	45b8      	cmp	r8, r7
 80098b4:	4683      	mov	fp, r0
 80098b6:	f04f 0300 	mov.w	r3, #0
 80098ba:	f04f 020a 	mov.w	r2, #10
 80098be:	4641      	mov	r1, r8
 80098c0:	4620      	mov	r0, r4
 80098c2:	d107      	bne.n	80098d4 <_dtoa_r+0xb1c>
 80098c4:	f000 f8e0 	bl	8009a88 <__multadd>
 80098c8:	4680      	mov	r8, r0
 80098ca:	4607      	mov	r7, r0
 80098cc:	9b01      	ldr	r3, [sp, #4]
 80098ce:	3301      	adds	r3, #1
 80098d0:	9301      	str	r3, [sp, #4]
 80098d2:	e775      	b.n	80097c0 <_dtoa_r+0xa08>
 80098d4:	f000 f8d8 	bl	8009a88 <__multadd>
 80098d8:	4639      	mov	r1, r7
 80098da:	4680      	mov	r8, r0
 80098dc:	2300      	movs	r3, #0
 80098de:	220a      	movs	r2, #10
 80098e0:	4620      	mov	r0, r4
 80098e2:	f000 f8d1 	bl	8009a88 <__multadd>
 80098e6:	4607      	mov	r7, r0
 80098e8:	e7f0      	b.n	80098cc <_dtoa_r+0xb14>
 80098ea:	f1b9 0f00 	cmp.w	r9, #0
 80098ee:	9a00      	ldr	r2, [sp, #0]
 80098f0:	bfcc      	ite	gt
 80098f2:	464d      	movgt	r5, r9
 80098f4:	2501      	movle	r5, #1
 80098f6:	4415      	add	r5, r2
 80098f8:	f04f 0800 	mov.w	r8, #0
 80098fc:	4659      	mov	r1, fp
 80098fe:	2201      	movs	r2, #1
 8009900:	4620      	mov	r0, r4
 8009902:	9301      	str	r3, [sp, #4]
 8009904:	f000 fa70 	bl	8009de8 <__lshift>
 8009908:	4631      	mov	r1, r6
 800990a:	4683      	mov	fp, r0
 800990c:	f000 fad8 	bl	8009ec0 <__mcmp>
 8009910:	2800      	cmp	r0, #0
 8009912:	dcb2      	bgt.n	800987a <_dtoa_r+0xac2>
 8009914:	d102      	bne.n	800991c <_dtoa_r+0xb64>
 8009916:	9b01      	ldr	r3, [sp, #4]
 8009918:	07db      	lsls	r3, r3, #31
 800991a:	d4ae      	bmi.n	800987a <_dtoa_r+0xac2>
 800991c:	462b      	mov	r3, r5
 800991e:	461d      	mov	r5, r3
 8009920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009924:	2a30      	cmp	r2, #48	; 0x30
 8009926:	d0fa      	beq.n	800991e <_dtoa_r+0xb66>
 8009928:	e6f7      	b.n	800971a <_dtoa_r+0x962>
 800992a:	9a00      	ldr	r2, [sp, #0]
 800992c:	429a      	cmp	r2, r3
 800992e:	d1a5      	bne.n	800987c <_dtoa_r+0xac4>
 8009930:	f10a 0a01 	add.w	sl, sl, #1
 8009934:	2331      	movs	r3, #49	; 0x31
 8009936:	e779      	b.n	800982c <_dtoa_r+0xa74>
 8009938:	4b13      	ldr	r3, [pc, #76]	; (8009988 <_dtoa_r+0xbd0>)
 800993a:	f7ff baaf 	b.w	8008e9c <_dtoa_r+0xe4>
 800993e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009940:	2b00      	cmp	r3, #0
 8009942:	f47f aa86 	bne.w	8008e52 <_dtoa_r+0x9a>
 8009946:	4b11      	ldr	r3, [pc, #68]	; (800998c <_dtoa_r+0xbd4>)
 8009948:	f7ff baa8 	b.w	8008e9c <_dtoa_r+0xe4>
 800994c:	f1b9 0f00 	cmp.w	r9, #0
 8009950:	dc03      	bgt.n	800995a <_dtoa_r+0xba2>
 8009952:	9b05      	ldr	r3, [sp, #20]
 8009954:	2b02      	cmp	r3, #2
 8009956:	f73f aec9 	bgt.w	80096ec <_dtoa_r+0x934>
 800995a:	9d00      	ldr	r5, [sp, #0]
 800995c:	4631      	mov	r1, r6
 800995e:	4658      	mov	r0, fp
 8009960:	f7ff f99e 	bl	8008ca0 <quorem>
 8009964:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009968:	f805 3b01 	strb.w	r3, [r5], #1
 800996c:	9a00      	ldr	r2, [sp, #0]
 800996e:	1aaa      	subs	r2, r5, r2
 8009970:	4591      	cmp	r9, r2
 8009972:	ddba      	ble.n	80098ea <_dtoa_r+0xb32>
 8009974:	4659      	mov	r1, fp
 8009976:	2300      	movs	r3, #0
 8009978:	220a      	movs	r2, #10
 800997a:	4620      	mov	r0, r4
 800997c:	f000 f884 	bl	8009a88 <__multadd>
 8009980:	4683      	mov	fp, r0
 8009982:	e7eb      	b.n	800995c <_dtoa_r+0xba4>
 8009984:	0800b1c3 	.word	0x0800b1c3
 8009988:	0800b11c 	.word	0x0800b11c
 800998c:	0800b140 	.word	0x0800b140

08009990 <_localeconv_r>:
 8009990:	4800      	ldr	r0, [pc, #0]	; (8009994 <_localeconv_r+0x4>)
 8009992:	4770      	bx	lr
 8009994:	2000017c 	.word	0x2000017c

08009998 <malloc>:
 8009998:	4b02      	ldr	r3, [pc, #8]	; (80099a4 <malloc+0xc>)
 800999a:	4601      	mov	r1, r0
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	f000 bbef 	b.w	800a180 <_malloc_r>
 80099a2:	bf00      	nop
 80099a4:	20000028 	.word	0x20000028

080099a8 <memcpy>:
 80099a8:	440a      	add	r2, r1
 80099aa:	4291      	cmp	r1, r2
 80099ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80099b0:	d100      	bne.n	80099b4 <memcpy+0xc>
 80099b2:	4770      	bx	lr
 80099b4:	b510      	push	{r4, lr}
 80099b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099be:	4291      	cmp	r1, r2
 80099c0:	d1f9      	bne.n	80099b6 <memcpy+0xe>
 80099c2:	bd10      	pop	{r4, pc}

080099c4 <_Balloc>:
 80099c4:	b570      	push	{r4, r5, r6, lr}
 80099c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099c8:	4604      	mov	r4, r0
 80099ca:	460d      	mov	r5, r1
 80099cc:	b976      	cbnz	r6, 80099ec <_Balloc+0x28>
 80099ce:	2010      	movs	r0, #16
 80099d0:	f7ff ffe2 	bl	8009998 <malloc>
 80099d4:	4602      	mov	r2, r0
 80099d6:	6260      	str	r0, [r4, #36]	; 0x24
 80099d8:	b920      	cbnz	r0, 80099e4 <_Balloc+0x20>
 80099da:	4b18      	ldr	r3, [pc, #96]	; (8009a3c <_Balloc+0x78>)
 80099dc:	4818      	ldr	r0, [pc, #96]	; (8009a40 <_Balloc+0x7c>)
 80099de:	2166      	movs	r1, #102	; 0x66
 80099e0:	f000 fd94 	bl	800a50c <__assert_func>
 80099e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099e8:	6006      	str	r6, [r0, #0]
 80099ea:	60c6      	str	r6, [r0, #12]
 80099ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099ee:	68f3      	ldr	r3, [r6, #12]
 80099f0:	b183      	cbz	r3, 8009a14 <_Balloc+0x50>
 80099f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099fa:	b9b8      	cbnz	r0, 8009a2c <_Balloc+0x68>
 80099fc:	2101      	movs	r1, #1
 80099fe:	fa01 f605 	lsl.w	r6, r1, r5
 8009a02:	1d72      	adds	r2, r6, #5
 8009a04:	0092      	lsls	r2, r2, #2
 8009a06:	4620      	mov	r0, r4
 8009a08:	f000 fb5a 	bl	800a0c0 <_calloc_r>
 8009a0c:	b160      	cbz	r0, 8009a28 <_Balloc+0x64>
 8009a0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a12:	e00e      	b.n	8009a32 <_Balloc+0x6e>
 8009a14:	2221      	movs	r2, #33	; 0x21
 8009a16:	2104      	movs	r1, #4
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f000 fb51 	bl	800a0c0 <_calloc_r>
 8009a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a20:	60f0      	str	r0, [r6, #12]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1e4      	bne.n	80099f2 <_Balloc+0x2e>
 8009a28:	2000      	movs	r0, #0
 8009a2a:	bd70      	pop	{r4, r5, r6, pc}
 8009a2c:	6802      	ldr	r2, [r0, #0]
 8009a2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a32:	2300      	movs	r3, #0
 8009a34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a38:	e7f7      	b.n	8009a2a <_Balloc+0x66>
 8009a3a:	bf00      	nop
 8009a3c:	0800b14d 	.word	0x0800b14d
 8009a40:	0800b1d4 	.word	0x0800b1d4

08009a44 <_Bfree>:
 8009a44:	b570      	push	{r4, r5, r6, lr}
 8009a46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a48:	4605      	mov	r5, r0
 8009a4a:	460c      	mov	r4, r1
 8009a4c:	b976      	cbnz	r6, 8009a6c <_Bfree+0x28>
 8009a4e:	2010      	movs	r0, #16
 8009a50:	f7ff ffa2 	bl	8009998 <malloc>
 8009a54:	4602      	mov	r2, r0
 8009a56:	6268      	str	r0, [r5, #36]	; 0x24
 8009a58:	b920      	cbnz	r0, 8009a64 <_Bfree+0x20>
 8009a5a:	4b09      	ldr	r3, [pc, #36]	; (8009a80 <_Bfree+0x3c>)
 8009a5c:	4809      	ldr	r0, [pc, #36]	; (8009a84 <_Bfree+0x40>)
 8009a5e:	218a      	movs	r1, #138	; 0x8a
 8009a60:	f000 fd54 	bl	800a50c <__assert_func>
 8009a64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a68:	6006      	str	r6, [r0, #0]
 8009a6a:	60c6      	str	r6, [r0, #12]
 8009a6c:	b13c      	cbz	r4, 8009a7e <_Bfree+0x3a>
 8009a6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a70:	6862      	ldr	r2, [r4, #4]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a78:	6021      	str	r1, [r4, #0]
 8009a7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a7e:	bd70      	pop	{r4, r5, r6, pc}
 8009a80:	0800b14d 	.word	0x0800b14d
 8009a84:	0800b1d4 	.word	0x0800b1d4

08009a88 <__multadd>:
 8009a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a8c:	690e      	ldr	r6, [r1, #16]
 8009a8e:	4607      	mov	r7, r0
 8009a90:	4698      	mov	r8, r3
 8009a92:	460c      	mov	r4, r1
 8009a94:	f101 0014 	add.w	r0, r1, #20
 8009a98:	2300      	movs	r3, #0
 8009a9a:	6805      	ldr	r5, [r0, #0]
 8009a9c:	b2a9      	uxth	r1, r5
 8009a9e:	fb02 8101 	mla	r1, r2, r1, r8
 8009aa2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009aa6:	0c2d      	lsrs	r5, r5, #16
 8009aa8:	fb02 c505 	mla	r5, r2, r5, ip
 8009aac:	b289      	uxth	r1, r1
 8009aae:	3301      	adds	r3, #1
 8009ab0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009ab4:	429e      	cmp	r6, r3
 8009ab6:	f840 1b04 	str.w	r1, [r0], #4
 8009aba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009abe:	dcec      	bgt.n	8009a9a <__multadd+0x12>
 8009ac0:	f1b8 0f00 	cmp.w	r8, #0
 8009ac4:	d022      	beq.n	8009b0c <__multadd+0x84>
 8009ac6:	68a3      	ldr	r3, [r4, #8]
 8009ac8:	42b3      	cmp	r3, r6
 8009aca:	dc19      	bgt.n	8009b00 <__multadd+0x78>
 8009acc:	6861      	ldr	r1, [r4, #4]
 8009ace:	4638      	mov	r0, r7
 8009ad0:	3101      	adds	r1, #1
 8009ad2:	f7ff ff77 	bl	80099c4 <_Balloc>
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	b928      	cbnz	r0, 8009ae6 <__multadd+0x5e>
 8009ada:	4602      	mov	r2, r0
 8009adc:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <__multadd+0x8c>)
 8009ade:	480e      	ldr	r0, [pc, #56]	; (8009b18 <__multadd+0x90>)
 8009ae0:	21b5      	movs	r1, #181	; 0xb5
 8009ae2:	f000 fd13 	bl	800a50c <__assert_func>
 8009ae6:	6922      	ldr	r2, [r4, #16]
 8009ae8:	3202      	adds	r2, #2
 8009aea:	f104 010c 	add.w	r1, r4, #12
 8009aee:	0092      	lsls	r2, r2, #2
 8009af0:	300c      	adds	r0, #12
 8009af2:	f7ff ff59 	bl	80099a8 <memcpy>
 8009af6:	4621      	mov	r1, r4
 8009af8:	4638      	mov	r0, r7
 8009afa:	f7ff ffa3 	bl	8009a44 <_Bfree>
 8009afe:	462c      	mov	r4, r5
 8009b00:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009b04:	3601      	adds	r6, #1
 8009b06:	f8c3 8014 	str.w	r8, [r3, #20]
 8009b0a:	6126      	str	r6, [r4, #16]
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b12:	bf00      	nop
 8009b14:	0800b1c3 	.word	0x0800b1c3
 8009b18:	0800b1d4 	.word	0x0800b1d4

08009b1c <__hi0bits>:
 8009b1c:	0c03      	lsrs	r3, r0, #16
 8009b1e:	041b      	lsls	r3, r3, #16
 8009b20:	b9d3      	cbnz	r3, 8009b58 <__hi0bits+0x3c>
 8009b22:	0400      	lsls	r0, r0, #16
 8009b24:	2310      	movs	r3, #16
 8009b26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b2a:	bf04      	itt	eq
 8009b2c:	0200      	lsleq	r0, r0, #8
 8009b2e:	3308      	addeq	r3, #8
 8009b30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b34:	bf04      	itt	eq
 8009b36:	0100      	lsleq	r0, r0, #4
 8009b38:	3304      	addeq	r3, #4
 8009b3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b3e:	bf04      	itt	eq
 8009b40:	0080      	lsleq	r0, r0, #2
 8009b42:	3302      	addeq	r3, #2
 8009b44:	2800      	cmp	r0, #0
 8009b46:	db05      	blt.n	8009b54 <__hi0bits+0x38>
 8009b48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b4c:	f103 0301 	add.w	r3, r3, #1
 8009b50:	bf08      	it	eq
 8009b52:	2320      	moveq	r3, #32
 8009b54:	4618      	mov	r0, r3
 8009b56:	4770      	bx	lr
 8009b58:	2300      	movs	r3, #0
 8009b5a:	e7e4      	b.n	8009b26 <__hi0bits+0xa>

08009b5c <__lo0bits>:
 8009b5c:	6803      	ldr	r3, [r0, #0]
 8009b5e:	f013 0207 	ands.w	r2, r3, #7
 8009b62:	4601      	mov	r1, r0
 8009b64:	d00b      	beq.n	8009b7e <__lo0bits+0x22>
 8009b66:	07da      	lsls	r2, r3, #31
 8009b68:	d424      	bmi.n	8009bb4 <__lo0bits+0x58>
 8009b6a:	0798      	lsls	r0, r3, #30
 8009b6c:	bf49      	itett	mi
 8009b6e:	085b      	lsrmi	r3, r3, #1
 8009b70:	089b      	lsrpl	r3, r3, #2
 8009b72:	2001      	movmi	r0, #1
 8009b74:	600b      	strmi	r3, [r1, #0]
 8009b76:	bf5c      	itt	pl
 8009b78:	600b      	strpl	r3, [r1, #0]
 8009b7a:	2002      	movpl	r0, #2
 8009b7c:	4770      	bx	lr
 8009b7e:	b298      	uxth	r0, r3
 8009b80:	b9b0      	cbnz	r0, 8009bb0 <__lo0bits+0x54>
 8009b82:	0c1b      	lsrs	r3, r3, #16
 8009b84:	2010      	movs	r0, #16
 8009b86:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b8a:	bf04      	itt	eq
 8009b8c:	0a1b      	lsreq	r3, r3, #8
 8009b8e:	3008      	addeq	r0, #8
 8009b90:	071a      	lsls	r2, r3, #28
 8009b92:	bf04      	itt	eq
 8009b94:	091b      	lsreq	r3, r3, #4
 8009b96:	3004      	addeq	r0, #4
 8009b98:	079a      	lsls	r2, r3, #30
 8009b9a:	bf04      	itt	eq
 8009b9c:	089b      	lsreq	r3, r3, #2
 8009b9e:	3002      	addeq	r0, #2
 8009ba0:	07da      	lsls	r2, r3, #31
 8009ba2:	d403      	bmi.n	8009bac <__lo0bits+0x50>
 8009ba4:	085b      	lsrs	r3, r3, #1
 8009ba6:	f100 0001 	add.w	r0, r0, #1
 8009baa:	d005      	beq.n	8009bb8 <__lo0bits+0x5c>
 8009bac:	600b      	str	r3, [r1, #0]
 8009bae:	4770      	bx	lr
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	e7e8      	b.n	8009b86 <__lo0bits+0x2a>
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	4770      	bx	lr
 8009bb8:	2020      	movs	r0, #32
 8009bba:	4770      	bx	lr

08009bbc <__i2b>:
 8009bbc:	b510      	push	{r4, lr}
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	f7ff feff 	bl	80099c4 <_Balloc>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	b928      	cbnz	r0, 8009bd6 <__i2b+0x1a>
 8009bca:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <__i2b+0x24>)
 8009bcc:	4805      	ldr	r0, [pc, #20]	; (8009be4 <__i2b+0x28>)
 8009bce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bd2:	f000 fc9b 	bl	800a50c <__assert_func>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	6144      	str	r4, [r0, #20]
 8009bda:	6103      	str	r3, [r0, #16]
 8009bdc:	bd10      	pop	{r4, pc}
 8009bde:	bf00      	nop
 8009be0:	0800b1c3 	.word	0x0800b1c3
 8009be4:	0800b1d4 	.word	0x0800b1d4

08009be8 <__multiply>:
 8009be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bec:	4614      	mov	r4, r2
 8009bee:	690a      	ldr	r2, [r1, #16]
 8009bf0:	6923      	ldr	r3, [r4, #16]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	bfb8      	it	lt
 8009bf6:	460b      	movlt	r3, r1
 8009bf8:	460d      	mov	r5, r1
 8009bfa:	bfbc      	itt	lt
 8009bfc:	4625      	movlt	r5, r4
 8009bfe:	461c      	movlt	r4, r3
 8009c00:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009c04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009c08:	68ab      	ldr	r3, [r5, #8]
 8009c0a:	6869      	ldr	r1, [r5, #4]
 8009c0c:	eb0a 0709 	add.w	r7, sl, r9
 8009c10:	42bb      	cmp	r3, r7
 8009c12:	b085      	sub	sp, #20
 8009c14:	bfb8      	it	lt
 8009c16:	3101      	addlt	r1, #1
 8009c18:	f7ff fed4 	bl	80099c4 <_Balloc>
 8009c1c:	b930      	cbnz	r0, 8009c2c <__multiply+0x44>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	4b42      	ldr	r3, [pc, #264]	; (8009d2c <__multiply+0x144>)
 8009c22:	4843      	ldr	r0, [pc, #268]	; (8009d30 <__multiply+0x148>)
 8009c24:	f240 115d 	movw	r1, #349	; 0x15d
 8009c28:	f000 fc70 	bl	800a50c <__assert_func>
 8009c2c:	f100 0614 	add.w	r6, r0, #20
 8009c30:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009c34:	4633      	mov	r3, r6
 8009c36:	2200      	movs	r2, #0
 8009c38:	4543      	cmp	r3, r8
 8009c3a:	d31e      	bcc.n	8009c7a <__multiply+0x92>
 8009c3c:	f105 0c14 	add.w	ip, r5, #20
 8009c40:	f104 0314 	add.w	r3, r4, #20
 8009c44:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009c48:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009c4c:	9202      	str	r2, [sp, #8]
 8009c4e:	ebac 0205 	sub.w	r2, ip, r5
 8009c52:	3a15      	subs	r2, #21
 8009c54:	f022 0203 	bic.w	r2, r2, #3
 8009c58:	3204      	adds	r2, #4
 8009c5a:	f105 0115 	add.w	r1, r5, #21
 8009c5e:	458c      	cmp	ip, r1
 8009c60:	bf38      	it	cc
 8009c62:	2204      	movcc	r2, #4
 8009c64:	9201      	str	r2, [sp, #4]
 8009c66:	9a02      	ldr	r2, [sp, #8]
 8009c68:	9303      	str	r3, [sp, #12]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d808      	bhi.n	8009c80 <__multiply+0x98>
 8009c6e:	2f00      	cmp	r7, #0
 8009c70:	dc55      	bgt.n	8009d1e <__multiply+0x136>
 8009c72:	6107      	str	r7, [r0, #16]
 8009c74:	b005      	add	sp, #20
 8009c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c7a:	f843 2b04 	str.w	r2, [r3], #4
 8009c7e:	e7db      	b.n	8009c38 <__multiply+0x50>
 8009c80:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c84:	f1ba 0f00 	cmp.w	sl, #0
 8009c88:	d020      	beq.n	8009ccc <__multiply+0xe4>
 8009c8a:	f105 0e14 	add.w	lr, r5, #20
 8009c8e:	46b1      	mov	r9, r6
 8009c90:	2200      	movs	r2, #0
 8009c92:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009c96:	f8d9 b000 	ldr.w	fp, [r9]
 8009c9a:	b2a1      	uxth	r1, r4
 8009c9c:	fa1f fb8b 	uxth.w	fp, fp
 8009ca0:	fb0a b101 	mla	r1, sl, r1, fp
 8009ca4:	4411      	add	r1, r2
 8009ca6:	f8d9 2000 	ldr.w	r2, [r9]
 8009caa:	0c24      	lsrs	r4, r4, #16
 8009cac:	0c12      	lsrs	r2, r2, #16
 8009cae:	fb0a 2404 	mla	r4, sl, r4, r2
 8009cb2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009cb6:	b289      	uxth	r1, r1
 8009cb8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009cbc:	45f4      	cmp	ip, lr
 8009cbe:	f849 1b04 	str.w	r1, [r9], #4
 8009cc2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009cc6:	d8e4      	bhi.n	8009c92 <__multiply+0xaa>
 8009cc8:	9901      	ldr	r1, [sp, #4]
 8009cca:	5072      	str	r2, [r6, r1]
 8009ccc:	9a03      	ldr	r2, [sp, #12]
 8009cce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cd2:	3304      	adds	r3, #4
 8009cd4:	f1b9 0f00 	cmp.w	r9, #0
 8009cd8:	d01f      	beq.n	8009d1a <__multiply+0x132>
 8009cda:	6834      	ldr	r4, [r6, #0]
 8009cdc:	f105 0114 	add.w	r1, r5, #20
 8009ce0:	46b6      	mov	lr, r6
 8009ce2:	f04f 0a00 	mov.w	sl, #0
 8009ce6:	880a      	ldrh	r2, [r1, #0]
 8009ce8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009cec:	fb09 b202 	mla	r2, r9, r2, fp
 8009cf0:	4492      	add	sl, r2
 8009cf2:	b2a4      	uxth	r4, r4
 8009cf4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009cf8:	f84e 4b04 	str.w	r4, [lr], #4
 8009cfc:	f851 4b04 	ldr.w	r4, [r1], #4
 8009d00:	f8be 2000 	ldrh.w	r2, [lr]
 8009d04:	0c24      	lsrs	r4, r4, #16
 8009d06:	fb09 2404 	mla	r4, r9, r4, r2
 8009d0a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009d0e:	458c      	cmp	ip, r1
 8009d10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009d14:	d8e7      	bhi.n	8009ce6 <__multiply+0xfe>
 8009d16:	9a01      	ldr	r2, [sp, #4]
 8009d18:	50b4      	str	r4, [r6, r2]
 8009d1a:	3604      	adds	r6, #4
 8009d1c:	e7a3      	b.n	8009c66 <__multiply+0x7e>
 8009d1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1a5      	bne.n	8009c72 <__multiply+0x8a>
 8009d26:	3f01      	subs	r7, #1
 8009d28:	e7a1      	b.n	8009c6e <__multiply+0x86>
 8009d2a:	bf00      	nop
 8009d2c:	0800b1c3 	.word	0x0800b1c3
 8009d30:	0800b1d4 	.word	0x0800b1d4

08009d34 <__pow5mult>:
 8009d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d38:	4615      	mov	r5, r2
 8009d3a:	f012 0203 	ands.w	r2, r2, #3
 8009d3e:	4606      	mov	r6, r0
 8009d40:	460f      	mov	r7, r1
 8009d42:	d007      	beq.n	8009d54 <__pow5mult+0x20>
 8009d44:	4c25      	ldr	r4, [pc, #148]	; (8009ddc <__pow5mult+0xa8>)
 8009d46:	3a01      	subs	r2, #1
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d4e:	f7ff fe9b 	bl	8009a88 <__multadd>
 8009d52:	4607      	mov	r7, r0
 8009d54:	10ad      	asrs	r5, r5, #2
 8009d56:	d03d      	beq.n	8009dd4 <__pow5mult+0xa0>
 8009d58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d5a:	b97c      	cbnz	r4, 8009d7c <__pow5mult+0x48>
 8009d5c:	2010      	movs	r0, #16
 8009d5e:	f7ff fe1b 	bl	8009998 <malloc>
 8009d62:	4602      	mov	r2, r0
 8009d64:	6270      	str	r0, [r6, #36]	; 0x24
 8009d66:	b928      	cbnz	r0, 8009d74 <__pow5mult+0x40>
 8009d68:	4b1d      	ldr	r3, [pc, #116]	; (8009de0 <__pow5mult+0xac>)
 8009d6a:	481e      	ldr	r0, [pc, #120]	; (8009de4 <__pow5mult+0xb0>)
 8009d6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d70:	f000 fbcc 	bl	800a50c <__assert_func>
 8009d74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d78:	6004      	str	r4, [r0, #0]
 8009d7a:	60c4      	str	r4, [r0, #12]
 8009d7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d84:	b94c      	cbnz	r4, 8009d9a <__pow5mult+0x66>
 8009d86:	f240 2171 	movw	r1, #625	; 0x271
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	f7ff ff16 	bl	8009bbc <__i2b>
 8009d90:	2300      	movs	r3, #0
 8009d92:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d96:	4604      	mov	r4, r0
 8009d98:	6003      	str	r3, [r0, #0]
 8009d9a:	f04f 0900 	mov.w	r9, #0
 8009d9e:	07eb      	lsls	r3, r5, #31
 8009da0:	d50a      	bpl.n	8009db8 <__pow5mult+0x84>
 8009da2:	4639      	mov	r1, r7
 8009da4:	4622      	mov	r2, r4
 8009da6:	4630      	mov	r0, r6
 8009da8:	f7ff ff1e 	bl	8009be8 <__multiply>
 8009dac:	4639      	mov	r1, r7
 8009dae:	4680      	mov	r8, r0
 8009db0:	4630      	mov	r0, r6
 8009db2:	f7ff fe47 	bl	8009a44 <_Bfree>
 8009db6:	4647      	mov	r7, r8
 8009db8:	106d      	asrs	r5, r5, #1
 8009dba:	d00b      	beq.n	8009dd4 <__pow5mult+0xa0>
 8009dbc:	6820      	ldr	r0, [r4, #0]
 8009dbe:	b938      	cbnz	r0, 8009dd0 <__pow5mult+0x9c>
 8009dc0:	4622      	mov	r2, r4
 8009dc2:	4621      	mov	r1, r4
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f7ff ff0f 	bl	8009be8 <__multiply>
 8009dca:	6020      	str	r0, [r4, #0]
 8009dcc:	f8c0 9000 	str.w	r9, [r0]
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	e7e4      	b.n	8009d9e <__pow5mult+0x6a>
 8009dd4:	4638      	mov	r0, r7
 8009dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dda:	bf00      	nop
 8009ddc:	0800b328 	.word	0x0800b328
 8009de0:	0800b14d 	.word	0x0800b14d
 8009de4:	0800b1d4 	.word	0x0800b1d4

08009de8 <__lshift>:
 8009de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dec:	460c      	mov	r4, r1
 8009dee:	6849      	ldr	r1, [r1, #4]
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009df6:	68a3      	ldr	r3, [r4, #8]
 8009df8:	4607      	mov	r7, r0
 8009dfa:	4691      	mov	r9, r2
 8009dfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e00:	f108 0601 	add.w	r6, r8, #1
 8009e04:	42b3      	cmp	r3, r6
 8009e06:	db0b      	blt.n	8009e20 <__lshift+0x38>
 8009e08:	4638      	mov	r0, r7
 8009e0a:	f7ff fddb 	bl	80099c4 <_Balloc>
 8009e0e:	4605      	mov	r5, r0
 8009e10:	b948      	cbnz	r0, 8009e26 <__lshift+0x3e>
 8009e12:	4602      	mov	r2, r0
 8009e14:	4b28      	ldr	r3, [pc, #160]	; (8009eb8 <__lshift+0xd0>)
 8009e16:	4829      	ldr	r0, [pc, #164]	; (8009ebc <__lshift+0xd4>)
 8009e18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e1c:	f000 fb76 	bl	800a50c <__assert_func>
 8009e20:	3101      	adds	r1, #1
 8009e22:	005b      	lsls	r3, r3, #1
 8009e24:	e7ee      	b.n	8009e04 <__lshift+0x1c>
 8009e26:	2300      	movs	r3, #0
 8009e28:	f100 0114 	add.w	r1, r0, #20
 8009e2c:	f100 0210 	add.w	r2, r0, #16
 8009e30:	4618      	mov	r0, r3
 8009e32:	4553      	cmp	r3, sl
 8009e34:	db33      	blt.n	8009e9e <__lshift+0xb6>
 8009e36:	6920      	ldr	r0, [r4, #16]
 8009e38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e3c:	f104 0314 	add.w	r3, r4, #20
 8009e40:	f019 091f 	ands.w	r9, r9, #31
 8009e44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e4c:	d02b      	beq.n	8009ea6 <__lshift+0xbe>
 8009e4e:	f1c9 0e20 	rsb	lr, r9, #32
 8009e52:	468a      	mov	sl, r1
 8009e54:	2200      	movs	r2, #0
 8009e56:	6818      	ldr	r0, [r3, #0]
 8009e58:	fa00 f009 	lsl.w	r0, r0, r9
 8009e5c:	4302      	orrs	r2, r0
 8009e5e:	f84a 2b04 	str.w	r2, [sl], #4
 8009e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e66:	459c      	cmp	ip, r3
 8009e68:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e6c:	d8f3      	bhi.n	8009e56 <__lshift+0x6e>
 8009e6e:	ebac 0304 	sub.w	r3, ip, r4
 8009e72:	3b15      	subs	r3, #21
 8009e74:	f023 0303 	bic.w	r3, r3, #3
 8009e78:	3304      	adds	r3, #4
 8009e7a:	f104 0015 	add.w	r0, r4, #21
 8009e7e:	4584      	cmp	ip, r0
 8009e80:	bf38      	it	cc
 8009e82:	2304      	movcc	r3, #4
 8009e84:	50ca      	str	r2, [r1, r3]
 8009e86:	b10a      	cbz	r2, 8009e8c <__lshift+0xa4>
 8009e88:	f108 0602 	add.w	r6, r8, #2
 8009e8c:	3e01      	subs	r6, #1
 8009e8e:	4638      	mov	r0, r7
 8009e90:	612e      	str	r6, [r5, #16]
 8009e92:	4621      	mov	r1, r4
 8009e94:	f7ff fdd6 	bl	8009a44 <_Bfree>
 8009e98:	4628      	mov	r0, r5
 8009e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	e7c5      	b.n	8009e32 <__lshift+0x4a>
 8009ea6:	3904      	subs	r1, #4
 8009ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eac:	f841 2f04 	str.w	r2, [r1, #4]!
 8009eb0:	459c      	cmp	ip, r3
 8009eb2:	d8f9      	bhi.n	8009ea8 <__lshift+0xc0>
 8009eb4:	e7ea      	b.n	8009e8c <__lshift+0xa4>
 8009eb6:	bf00      	nop
 8009eb8:	0800b1c3 	.word	0x0800b1c3
 8009ebc:	0800b1d4 	.word	0x0800b1d4

08009ec0 <__mcmp>:
 8009ec0:	b530      	push	{r4, r5, lr}
 8009ec2:	6902      	ldr	r2, [r0, #16]
 8009ec4:	690c      	ldr	r4, [r1, #16]
 8009ec6:	1b12      	subs	r2, r2, r4
 8009ec8:	d10e      	bne.n	8009ee8 <__mcmp+0x28>
 8009eca:	f100 0314 	add.w	r3, r0, #20
 8009ece:	3114      	adds	r1, #20
 8009ed0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ed4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ed8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009edc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ee0:	42a5      	cmp	r5, r4
 8009ee2:	d003      	beq.n	8009eec <__mcmp+0x2c>
 8009ee4:	d305      	bcc.n	8009ef2 <__mcmp+0x32>
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	4610      	mov	r0, r2
 8009eea:	bd30      	pop	{r4, r5, pc}
 8009eec:	4283      	cmp	r3, r0
 8009eee:	d3f3      	bcc.n	8009ed8 <__mcmp+0x18>
 8009ef0:	e7fa      	b.n	8009ee8 <__mcmp+0x28>
 8009ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef6:	e7f7      	b.n	8009ee8 <__mcmp+0x28>

08009ef8 <__mdiff>:
 8009ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	460c      	mov	r4, r1
 8009efe:	4606      	mov	r6, r0
 8009f00:	4611      	mov	r1, r2
 8009f02:	4620      	mov	r0, r4
 8009f04:	4617      	mov	r7, r2
 8009f06:	f7ff ffdb 	bl	8009ec0 <__mcmp>
 8009f0a:	1e05      	subs	r5, r0, #0
 8009f0c:	d110      	bne.n	8009f30 <__mdiff+0x38>
 8009f0e:	4629      	mov	r1, r5
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff fd57 	bl	80099c4 <_Balloc>
 8009f16:	b930      	cbnz	r0, 8009f26 <__mdiff+0x2e>
 8009f18:	4b39      	ldr	r3, [pc, #228]	; (800a000 <__mdiff+0x108>)
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	f240 2132 	movw	r1, #562	; 0x232
 8009f20:	4838      	ldr	r0, [pc, #224]	; (800a004 <__mdiff+0x10c>)
 8009f22:	f000 faf3 	bl	800a50c <__assert_func>
 8009f26:	2301      	movs	r3, #1
 8009f28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f30:	bfa4      	itt	ge
 8009f32:	463b      	movge	r3, r7
 8009f34:	4627      	movge	r7, r4
 8009f36:	4630      	mov	r0, r6
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	bfa6      	itte	ge
 8009f3c:	461c      	movge	r4, r3
 8009f3e:	2500      	movge	r5, #0
 8009f40:	2501      	movlt	r5, #1
 8009f42:	f7ff fd3f 	bl	80099c4 <_Balloc>
 8009f46:	b920      	cbnz	r0, 8009f52 <__mdiff+0x5a>
 8009f48:	4b2d      	ldr	r3, [pc, #180]	; (800a000 <__mdiff+0x108>)
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f50:	e7e6      	b.n	8009f20 <__mdiff+0x28>
 8009f52:	693e      	ldr	r6, [r7, #16]
 8009f54:	60c5      	str	r5, [r0, #12]
 8009f56:	6925      	ldr	r5, [r4, #16]
 8009f58:	f107 0114 	add.w	r1, r7, #20
 8009f5c:	f104 0914 	add.w	r9, r4, #20
 8009f60:	f100 0e14 	add.w	lr, r0, #20
 8009f64:	f107 0210 	add.w	r2, r7, #16
 8009f68:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009f6c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009f70:	46f2      	mov	sl, lr
 8009f72:	2700      	movs	r7, #0
 8009f74:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f7c:	fa1f f883 	uxth.w	r8, r3
 8009f80:	fa17 f78b 	uxtah	r7, r7, fp
 8009f84:	0c1b      	lsrs	r3, r3, #16
 8009f86:	eba7 0808 	sub.w	r8, r7, r8
 8009f8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f92:	fa1f f888 	uxth.w	r8, r8
 8009f96:	141f      	asrs	r7, r3, #16
 8009f98:	454d      	cmp	r5, r9
 8009f9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f9e:	f84a 3b04 	str.w	r3, [sl], #4
 8009fa2:	d8e7      	bhi.n	8009f74 <__mdiff+0x7c>
 8009fa4:	1b2b      	subs	r3, r5, r4
 8009fa6:	3b15      	subs	r3, #21
 8009fa8:	f023 0303 	bic.w	r3, r3, #3
 8009fac:	3304      	adds	r3, #4
 8009fae:	3415      	adds	r4, #21
 8009fb0:	42a5      	cmp	r5, r4
 8009fb2:	bf38      	it	cc
 8009fb4:	2304      	movcc	r3, #4
 8009fb6:	4419      	add	r1, r3
 8009fb8:	4473      	add	r3, lr
 8009fba:	469e      	mov	lr, r3
 8009fbc:	460d      	mov	r5, r1
 8009fbe:	4565      	cmp	r5, ip
 8009fc0:	d30e      	bcc.n	8009fe0 <__mdiff+0xe8>
 8009fc2:	f10c 0203 	add.w	r2, ip, #3
 8009fc6:	1a52      	subs	r2, r2, r1
 8009fc8:	f022 0203 	bic.w	r2, r2, #3
 8009fcc:	3903      	subs	r1, #3
 8009fce:	458c      	cmp	ip, r1
 8009fd0:	bf38      	it	cc
 8009fd2:	2200      	movcc	r2, #0
 8009fd4:	441a      	add	r2, r3
 8009fd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fda:	b17b      	cbz	r3, 8009ffc <__mdiff+0x104>
 8009fdc:	6106      	str	r6, [r0, #16]
 8009fde:	e7a5      	b.n	8009f2c <__mdiff+0x34>
 8009fe0:	f855 8b04 	ldr.w	r8, [r5], #4
 8009fe4:	fa17 f488 	uxtah	r4, r7, r8
 8009fe8:	1422      	asrs	r2, r4, #16
 8009fea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009fee:	b2a4      	uxth	r4, r4
 8009ff0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009ff4:	f84e 4b04 	str.w	r4, [lr], #4
 8009ff8:	1417      	asrs	r7, r2, #16
 8009ffa:	e7e0      	b.n	8009fbe <__mdiff+0xc6>
 8009ffc:	3e01      	subs	r6, #1
 8009ffe:	e7ea      	b.n	8009fd6 <__mdiff+0xde>
 800a000:	0800b1c3 	.word	0x0800b1c3
 800a004:	0800b1d4 	.word	0x0800b1d4

0800a008 <__d2b>:
 800a008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a00c:	4689      	mov	r9, r1
 800a00e:	2101      	movs	r1, #1
 800a010:	ec57 6b10 	vmov	r6, r7, d0
 800a014:	4690      	mov	r8, r2
 800a016:	f7ff fcd5 	bl	80099c4 <_Balloc>
 800a01a:	4604      	mov	r4, r0
 800a01c:	b930      	cbnz	r0, 800a02c <__d2b+0x24>
 800a01e:	4602      	mov	r2, r0
 800a020:	4b25      	ldr	r3, [pc, #148]	; (800a0b8 <__d2b+0xb0>)
 800a022:	4826      	ldr	r0, [pc, #152]	; (800a0bc <__d2b+0xb4>)
 800a024:	f240 310a 	movw	r1, #778	; 0x30a
 800a028:	f000 fa70 	bl	800a50c <__assert_func>
 800a02c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a034:	bb35      	cbnz	r5, 800a084 <__d2b+0x7c>
 800a036:	2e00      	cmp	r6, #0
 800a038:	9301      	str	r3, [sp, #4]
 800a03a:	d028      	beq.n	800a08e <__d2b+0x86>
 800a03c:	4668      	mov	r0, sp
 800a03e:	9600      	str	r6, [sp, #0]
 800a040:	f7ff fd8c 	bl	8009b5c <__lo0bits>
 800a044:	9900      	ldr	r1, [sp, #0]
 800a046:	b300      	cbz	r0, 800a08a <__d2b+0x82>
 800a048:	9a01      	ldr	r2, [sp, #4]
 800a04a:	f1c0 0320 	rsb	r3, r0, #32
 800a04e:	fa02 f303 	lsl.w	r3, r2, r3
 800a052:	430b      	orrs	r3, r1
 800a054:	40c2      	lsrs	r2, r0
 800a056:	6163      	str	r3, [r4, #20]
 800a058:	9201      	str	r2, [sp, #4]
 800a05a:	9b01      	ldr	r3, [sp, #4]
 800a05c:	61a3      	str	r3, [r4, #24]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	bf14      	ite	ne
 800a062:	2202      	movne	r2, #2
 800a064:	2201      	moveq	r2, #1
 800a066:	6122      	str	r2, [r4, #16]
 800a068:	b1d5      	cbz	r5, 800a0a0 <__d2b+0x98>
 800a06a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a06e:	4405      	add	r5, r0
 800a070:	f8c9 5000 	str.w	r5, [r9]
 800a074:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a078:	f8c8 0000 	str.w	r0, [r8]
 800a07c:	4620      	mov	r0, r4
 800a07e:	b003      	add	sp, #12
 800a080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a088:	e7d5      	b.n	800a036 <__d2b+0x2e>
 800a08a:	6161      	str	r1, [r4, #20]
 800a08c:	e7e5      	b.n	800a05a <__d2b+0x52>
 800a08e:	a801      	add	r0, sp, #4
 800a090:	f7ff fd64 	bl	8009b5c <__lo0bits>
 800a094:	9b01      	ldr	r3, [sp, #4]
 800a096:	6163      	str	r3, [r4, #20]
 800a098:	2201      	movs	r2, #1
 800a09a:	6122      	str	r2, [r4, #16]
 800a09c:	3020      	adds	r0, #32
 800a09e:	e7e3      	b.n	800a068 <__d2b+0x60>
 800a0a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0a8:	f8c9 0000 	str.w	r0, [r9]
 800a0ac:	6918      	ldr	r0, [r3, #16]
 800a0ae:	f7ff fd35 	bl	8009b1c <__hi0bits>
 800a0b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0b6:	e7df      	b.n	800a078 <__d2b+0x70>
 800a0b8:	0800b1c3 	.word	0x0800b1c3
 800a0bc:	0800b1d4 	.word	0x0800b1d4

0800a0c0 <_calloc_r>:
 800a0c0:	b513      	push	{r0, r1, r4, lr}
 800a0c2:	434a      	muls	r2, r1
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	9201      	str	r2, [sp, #4]
 800a0c8:	f000 f85a 	bl	800a180 <_malloc_r>
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	b118      	cbz	r0, 800a0d8 <_calloc_r+0x18>
 800a0d0:	9a01      	ldr	r2, [sp, #4]
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	f7fe f952 	bl	800837c <memset>
 800a0d8:	4620      	mov	r0, r4
 800a0da:	b002      	add	sp, #8
 800a0dc:	bd10      	pop	{r4, pc}
	...

0800a0e0 <_free_r>:
 800a0e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0e2:	2900      	cmp	r1, #0
 800a0e4:	d048      	beq.n	800a178 <_free_r+0x98>
 800a0e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ea:	9001      	str	r0, [sp, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f1a1 0404 	sub.w	r4, r1, #4
 800a0f2:	bfb8      	it	lt
 800a0f4:	18e4      	addlt	r4, r4, r3
 800a0f6:	f000 fa65 	bl	800a5c4 <__malloc_lock>
 800a0fa:	4a20      	ldr	r2, [pc, #128]	; (800a17c <_free_r+0x9c>)
 800a0fc:	9801      	ldr	r0, [sp, #4]
 800a0fe:	6813      	ldr	r3, [r2, #0]
 800a100:	4615      	mov	r5, r2
 800a102:	b933      	cbnz	r3, 800a112 <_free_r+0x32>
 800a104:	6063      	str	r3, [r4, #4]
 800a106:	6014      	str	r4, [r2, #0]
 800a108:	b003      	add	sp, #12
 800a10a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a10e:	f000 ba5f 	b.w	800a5d0 <__malloc_unlock>
 800a112:	42a3      	cmp	r3, r4
 800a114:	d90b      	bls.n	800a12e <_free_r+0x4e>
 800a116:	6821      	ldr	r1, [r4, #0]
 800a118:	1862      	adds	r2, r4, r1
 800a11a:	4293      	cmp	r3, r2
 800a11c:	bf04      	itt	eq
 800a11e:	681a      	ldreq	r2, [r3, #0]
 800a120:	685b      	ldreq	r3, [r3, #4]
 800a122:	6063      	str	r3, [r4, #4]
 800a124:	bf04      	itt	eq
 800a126:	1852      	addeq	r2, r2, r1
 800a128:	6022      	streq	r2, [r4, #0]
 800a12a:	602c      	str	r4, [r5, #0]
 800a12c:	e7ec      	b.n	800a108 <_free_r+0x28>
 800a12e:	461a      	mov	r2, r3
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	b10b      	cbz	r3, 800a138 <_free_r+0x58>
 800a134:	42a3      	cmp	r3, r4
 800a136:	d9fa      	bls.n	800a12e <_free_r+0x4e>
 800a138:	6811      	ldr	r1, [r2, #0]
 800a13a:	1855      	adds	r5, r2, r1
 800a13c:	42a5      	cmp	r5, r4
 800a13e:	d10b      	bne.n	800a158 <_free_r+0x78>
 800a140:	6824      	ldr	r4, [r4, #0]
 800a142:	4421      	add	r1, r4
 800a144:	1854      	adds	r4, r2, r1
 800a146:	42a3      	cmp	r3, r4
 800a148:	6011      	str	r1, [r2, #0]
 800a14a:	d1dd      	bne.n	800a108 <_free_r+0x28>
 800a14c:	681c      	ldr	r4, [r3, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	6053      	str	r3, [r2, #4]
 800a152:	4421      	add	r1, r4
 800a154:	6011      	str	r1, [r2, #0]
 800a156:	e7d7      	b.n	800a108 <_free_r+0x28>
 800a158:	d902      	bls.n	800a160 <_free_r+0x80>
 800a15a:	230c      	movs	r3, #12
 800a15c:	6003      	str	r3, [r0, #0]
 800a15e:	e7d3      	b.n	800a108 <_free_r+0x28>
 800a160:	6825      	ldr	r5, [r4, #0]
 800a162:	1961      	adds	r1, r4, r5
 800a164:	428b      	cmp	r3, r1
 800a166:	bf04      	itt	eq
 800a168:	6819      	ldreq	r1, [r3, #0]
 800a16a:	685b      	ldreq	r3, [r3, #4]
 800a16c:	6063      	str	r3, [r4, #4]
 800a16e:	bf04      	itt	eq
 800a170:	1949      	addeq	r1, r1, r5
 800a172:	6021      	streq	r1, [r4, #0]
 800a174:	6054      	str	r4, [r2, #4]
 800a176:	e7c7      	b.n	800a108 <_free_r+0x28>
 800a178:	b003      	add	sp, #12
 800a17a:	bd30      	pop	{r4, r5, pc}
 800a17c:	20000220 	.word	0x20000220

0800a180 <_malloc_r>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	1ccd      	adds	r5, r1, #3
 800a184:	f025 0503 	bic.w	r5, r5, #3
 800a188:	3508      	adds	r5, #8
 800a18a:	2d0c      	cmp	r5, #12
 800a18c:	bf38      	it	cc
 800a18e:	250c      	movcc	r5, #12
 800a190:	2d00      	cmp	r5, #0
 800a192:	4606      	mov	r6, r0
 800a194:	db01      	blt.n	800a19a <_malloc_r+0x1a>
 800a196:	42a9      	cmp	r1, r5
 800a198:	d903      	bls.n	800a1a2 <_malloc_r+0x22>
 800a19a:	230c      	movs	r3, #12
 800a19c:	6033      	str	r3, [r6, #0]
 800a19e:	2000      	movs	r0, #0
 800a1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1a2:	f000 fa0f 	bl	800a5c4 <__malloc_lock>
 800a1a6:	4921      	ldr	r1, [pc, #132]	; (800a22c <_malloc_r+0xac>)
 800a1a8:	680a      	ldr	r2, [r1, #0]
 800a1aa:	4614      	mov	r4, r2
 800a1ac:	b99c      	cbnz	r4, 800a1d6 <_malloc_r+0x56>
 800a1ae:	4f20      	ldr	r7, [pc, #128]	; (800a230 <_malloc_r+0xb0>)
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	b923      	cbnz	r3, 800a1be <_malloc_r+0x3e>
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f000 f998 	bl	800a4ec <_sbrk_r>
 800a1bc:	6038      	str	r0, [r7, #0]
 800a1be:	4629      	mov	r1, r5
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f000 f993 	bl	800a4ec <_sbrk_r>
 800a1c6:	1c43      	adds	r3, r0, #1
 800a1c8:	d123      	bne.n	800a212 <_malloc_r+0x92>
 800a1ca:	230c      	movs	r3, #12
 800a1cc:	6033      	str	r3, [r6, #0]
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f000 f9fe 	bl	800a5d0 <__malloc_unlock>
 800a1d4:	e7e3      	b.n	800a19e <_malloc_r+0x1e>
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	1b5b      	subs	r3, r3, r5
 800a1da:	d417      	bmi.n	800a20c <_malloc_r+0x8c>
 800a1dc:	2b0b      	cmp	r3, #11
 800a1de:	d903      	bls.n	800a1e8 <_malloc_r+0x68>
 800a1e0:	6023      	str	r3, [r4, #0]
 800a1e2:	441c      	add	r4, r3
 800a1e4:	6025      	str	r5, [r4, #0]
 800a1e6:	e004      	b.n	800a1f2 <_malloc_r+0x72>
 800a1e8:	6863      	ldr	r3, [r4, #4]
 800a1ea:	42a2      	cmp	r2, r4
 800a1ec:	bf0c      	ite	eq
 800a1ee:	600b      	streq	r3, [r1, #0]
 800a1f0:	6053      	strne	r3, [r2, #4]
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	f000 f9ec 	bl	800a5d0 <__malloc_unlock>
 800a1f8:	f104 000b 	add.w	r0, r4, #11
 800a1fc:	1d23      	adds	r3, r4, #4
 800a1fe:	f020 0007 	bic.w	r0, r0, #7
 800a202:	1ac2      	subs	r2, r0, r3
 800a204:	d0cc      	beq.n	800a1a0 <_malloc_r+0x20>
 800a206:	1a1b      	subs	r3, r3, r0
 800a208:	50a3      	str	r3, [r4, r2]
 800a20a:	e7c9      	b.n	800a1a0 <_malloc_r+0x20>
 800a20c:	4622      	mov	r2, r4
 800a20e:	6864      	ldr	r4, [r4, #4]
 800a210:	e7cc      	b.n	800a1ac <_malloc_r+0x2c>
 800a212:	1cc4      	adds	r4, r0, #3
 800a214:	f024 0403 	bic.w	r4, r4, #3
 800a218:	42a0      	cmp	r0, r4
 800a21a:	d0e3      	beq.n	800a1e4 <_malloc_r+0x64>
 800a21c:	1a21      	subs	r1, r4, r0
 800a21e:	4630      	mov	r0, r6
 800a220:	f000 f964 	bl	800a4ec <_sbrk_r>
 800a224:	3001      	adds	r0, #1
 800a226:	d1dd      	bne.n	800a1e4 <_malloc_r+0x64>
 800a228:	e7cf      	b.n	800a1ca <_malloc_r+0x4a>
 800a22a:	bf00      	nop
 800a22c:	20000220 	.word	0x20000220
 800a230:	20000224 	.word	0x20000224

0800a234 <__ssputs_r>:
 800a234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a238:	688e      	ldr	r6, [r1, #8]
 800a23a:	429e      	cmp	r6, r3
 800a23c:	4682      	mov	sl, r0
 800a23e:	460c      	mov	r4, r1
 800a240:	4690      	mov	r8, r2
 800a242:	461f      	mov	r7, r3
 800a244:	d838      	bhi.n	800a2b8 <__ssputs_r+0x84>
 800a246:	898a      	ldrh	r2, [r1, #12]
 800a248:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a24c:	d032      	beq.n	800a2b4 <__ssputs_r+0x80>
 800a24e:	6825      	ldr	r5, [r4, #0]
 800a250:	6909      	ldr	r1, [r1, #16]
 800a252:	eba5 0901 	sub.w	r9, r5, r1
 800a256:	6965      	ldr	r5, [r4, #20]
 800a258:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a25c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a260:	3301      	adds	r3, #1
 800a262:	444b      	add	r3, r9
 800a264:	106d      	asrs	r5, r5, #1
 800a266:	429d      	cmp	r5, r3
 800a268:	bf38      	it	cc
 800a26a:	461d      	movcc	r5, r3
 800a26c:	0553      	lsls	r3, r2, #21
 800a26e:	d531      	bpl.n	800a2d4 <__ssputs_r+0xa0>
 800a270:	4629      	mov	r1, r5
 800a272:	f7ff ff85 	bl	800a180 <_malloc_r>
 800a276:	4606      	mov	r6, r0
 800a278:	b950      	cbnz	r0, 800a290 <__ssputs_r+0x5c>
 800a27a:	230c      	movs	r3, #12
 800a27c:	f8ca 3000 	str.w	r3, [sl]
 800a280:	89a3      	ldrh	r3, [r4, #12]
 800a282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a286:	81a3      	strh	r3, [r4, #12]
 800a288:	f04f 30ff 	mov.w	r0, #4294967295
 800a28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a290:	6921      	ldr	r1, [r4, #16]
 800a292:	464a      	mov	r2, r9
 800a294:	f7ff fb88 	bl	80099a8 <memcpy>
 800a298:	89a3      	ldrh	r3, [r4, #12]
 800a29a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a29e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2a2:	81a3      	strh	r3, [r4, #12]
 800a2a4:	6126      	str	r6, [r4, #16]
 800a2a6:	6165      	str	r5, [r4, #20]
 800a2a8:	444e      	add	r6, r9
 800a2aa:	eba5 0509 	sub.w	r5, r5, r9
 800a2ae:	6026      	str	r6, [r4, #0]
 800a2b0:	60a5      	str	r5, [r4, #8]
 800a2b2:	463e      	mov	r6, r7
 800a2b4:	42be      	cmp	r6, r7
 800a2b6:	d900      	bls.n	800a2ba <__ssputs_r+0x86>
 800a2b8:	463e      	mov	r6, r7
 800a2ba:	4632      	mov	r2, r6
 800a2bc:	6820      	ldr	r0, [r4, #0]
 800a2be:	4641      	mov	r1, r8
 800a2c0:	f000 f966 	bl	800a590 <memmove>
 800a2c4:	68a3      	ldr	r3, [r4, #8]
 800a2c6:	6822      	ldr	r2, [r4, #0]
 800a2c8:	1b9b      	subs	r3, r3, r6
 800a2ca:	4432      	add	r2, r6
 800a2cc:	60a3      	str	r3, [r4, #8]
 800a2ce:	6022      	str	r2, [r4, #0]
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	e7db      	b.n	800a28c <__ssputs_r+0x58>
 800a2d4:	462a      	mov	r2, r5
 800a2d6:	f000 f981 	bl	800a5dc <_realloc_r>
 800a2da:	4606      	mov	r6, r0
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d1e1      	bne.n	800a2a4 <__ssputs_r+0x70>
 800a2e0:	6921      	ldr	r1, [r4, #16]
 800a2e2:	4650      	mov	r0, sl
 800a2e4:	f7ff fefc 	bl	800a0e0 <_free_r>
 800a2e8:	e7c7      	b.n	800a27a <__ssputs_r+0x46>
	...

0800a2ec <_svfiprintf_r>:
 800a2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f0:	4698      	mov	r8, r3
 800a2f2:	898b      	ldrh	r3, [r1, #12]
 800a2f4:	061b      	lsls	r3, r3, #24
 800a2f6:	b09d      	sub	sp, #116	; 0x74
 800a2f8:	4607      	mov	r7, r0
 800a2fa:	460d      	mov	r5, r1
 800a2fc:	4614      	mov	r4, r2
 800a2fe:	d50e      	bpl.n	800a31e <_svfiprintf_r+0x32>
 800a300:	690b      	ldr	r3, [r1, #16]
 800a302:	b963      	cbnz	r3, 800a31e <_svfiprintf_r+0x32>
 800a304:	2140      	movs	r1, #64	; 0x40
 800a306:	f7ff ff3b 	bl	800a180 <_malloc_r>
 800a30a:	6028      	str	r0, [r5, #0]
 800a30c:	6128      	str	r0, [r5, #16]
 800a30e:	b920      	cbnz	r0, 800a31a <_svfiprintf_r+0x2e>
 800a310:	230c      	movs	r3, #12
 800a312:	603b      	str	r3, [r7, #0]
 800a314:	f04f 30ff 	mov.w	r0, #4294967295
 800a318:	e0d1      	b.n	800a4be <_svfiprintf_r+0x1d2>
 800a31a:	2340      	movs	r3, #64	; 0x40
 800a31c:	616b      	str	r3, [r5, #20]
 800a31e:	2300      	movs	r3, #0
 800a320:	9309      	str	r3, [sp, #36]	; 0x24
 800a322:	2320      	movs	r3, #32
 800a324:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a328:	f8cd 800c 	str.w	r8, [sp, #12]
 800a32c:	2330      	movs	r3, #48	; 0x30
 800a32e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a4d8 <_svfiprintf_r+0x1ec>
 800a332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a336:	f04f 0901 	mov.w	r9, #1
 800a33a:	4623      	mov	r3, r4
 800a33c:	469a      	mov	sl, r3
 800a33e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a342:	b10a      	cbz	r2, 800a348 <_svfiprintf_r+0x5c>
 800a344:	2a25      	cmp	r2, #37	; 0x25
 800a346:	d1f9      	bne.n	800a33c <_svfiprintf_r+0x50>
 800a348:	ebba 0b04 	subs.w	fp, sl, r4
 800a34c:	d00b      	beq.n	800a366 <_svfiprintf_r+0x7a>
 800a34e:	465b      	mov	r3, fp
 800a350:	4622      	mov	r2, r4
 800a352:	4629      	mov	r1, r5
 800a354:	4638      	mov	r0, r7
 800a356:	f7ff ff6d 	bl	800a234 <__ssputs_r>
 800a35a:	3001      	adds	r0, #1
 800a35c:	f000 80aa 	beq.w	800a4b4 <_svfiprintf_r+0x1c8>
 800a360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a362:	445a      	add	r2, fp
 800a364:	9209      	str	r2, [sp, #36]	; 0x24
 800a366:	f89a 3000 	ldrb.w	r3, [sl]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f000 80a2 	beq.w	800a4b4 <_svfiprintf_r+0x1c8>
 800a370:	2300      	movs	r3, #0
 800a372:	f04f 32ff 	mov.w	r2, #4294967295
 800a376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a37a:	f10a 0a01 	add.w	sl, sl, #1
 800a37e:	9304      	str	r3, [sp, #16]
 800a380:	9307      	str	r3, [sp, #28]
 800a382:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a386:	931a      	str	r3, [sp, #104]	; 0x68
 800a388:	4654      	mov	r4, sl
 800a38a:	2205      	movs	r2, #5
 800a38c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a390:	4851      	ldr	r0, [pc, #324]	; (800a4d8 <_svfiprintf_r+0x1ec>)
 800a392:	f7f5 ff45 	bl	8000220 <memchr>
 800a396:	9a04      	ldr	r2, [sp, #16]
 800a398:	b9d8      	cbnz	r0, 800a3d2 <_svfiprintf_r+0xe6>
 800a39a:	06d0      	lsls	r0, r2, #27
 800a39c:	bf44      	itt	mi
 800a39e:	2320      	movmi	r3, #32
 800a3a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3a4:	0711      	lsls	r1, r2, #28
 800a3a6:	bf44      	itt	mi
 800a3a8:	232b      	movmi	r3, #43	; 0x2b
 800a3aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a3b4:	d015      	beq.n	800a3e2 <_svfiprintf_r+0xf6>
 800a3b6:	9a07      	ldr	r2, [sp, #28]
 800a3b8:	4654      	mov	r4, sl
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	f04f 0c0a 	mov.w	ip, #10
 800a3c0:	4621      	mov	r1, r4
 800a3c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3c6:	3b30      	subs	r3, #48	; 0x30
 800a3c8:	2b09      	cmp	r3, #9
 800a3ca:	d94e      	bls.n	800a46a <_svfiprintf_r+0x17e>
 800a3cc:	b1b0      	cbz	r0, 800a3fc <_svfiprintf_r+0x110>
 800a3ce:	9207      	str	r2, [sp, #28]
 800a3d0:	e014      	b.n	800a3fc <_svfiprintf_r+0x110>
 800a3d2:	eba0 0308 	sub.w	r3, r0, r8
 800a3d6:	fa09 f303 	lsl.w	r3, r9, r3
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	9304      	str	r3, [sp, #16]
 800a3de:	46a2      	mov	sl, r4
 800a3e0:	e7d2      	b.n	800a388 <_svfiprintf_r+0x9c>
 800a3e2:	9b03      	ldr	r3, [sp, #12]
 800a3e4:	1d19      	adds	r1, r3, #4
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	9103      	str	r1, [sp, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	bfbb      	ittet	lt
 800a3ee:	425b      	neglt	r3, r3
 800a3f0:	f042 0202 	orrlt.w	r2, r2, #2
 800a3f4:	9307      	strge	r3, [sp, #28]
 800a3f6:	9307      	strlt	r3, [sp, #28]
 800a3f8:	bfb8      	it	lt
 800a3fa:	9204      	strlt	r2, [sp, #16]
 800a3fc:	7823      	ldrb	r3, [r4, #0]
 800a3fe:	2b2e      	cmp	r3, #46	; 0x2e
 800a400:	d10c      	bne.n	800a41c <_svfiprintf_r+0x130>
 800a402:	7863      	ldrb	r3, [r4, #1]
 800a404:	2b2a      	cmp	r3, #42	; 0x2a
 800a406:	d135      	bne.n	800a474 <_svfiprintf_r+0x188>
 800a408:	9b03      	ldr	r3, [sp, #12]
 800a40a:	1d1a      	adds	r2, r3, #4
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	9203      	str	r2, [sp, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	bfb8      	it	lt
 800a414:	f04f 33ff 	movlt.w	r3, #4294967295
 800a418:	3402      	adds	r4, #2
 800a41a:	9305      	str	r3, [sp, #20]
 800a41c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a4e8 <_svfiprintf_r+0x1fc>
 800a420:	7821      	ldrb	r1, [r4, #0]
 800a422:	2203      	movs	r2, #3
 800a424:	4650      	mov	r0, sl
 800a426:	f7f5 fefb 	bl	8000220 <memchr>
 800a42a:	b140      	cbz	r0, 800a43e <_svfiprintf_r+0x152>
 800a42c:	2340      	movs	r3, #64	; 0x40
 800a42e:	eba0 000a 	sub.w	r0, r0, sl
 800a432:	fa03 f000 	lsl.w	r0, r3, r0
 800a436:	9b04      	ldr	r3, [sp, #16]
 800a438:	4303      	orrs	r3, r0
 800a43a:	3401      	adds	r4, #1
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a442:	4826      	ldr	r0, [pc, #152]	; (800a4dc <_svfiprintf_r+0x1f0>)
 800a444:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a448:	2206      	movs	r2, #6
 800a44a:	f7f5 fee9 	bl	8000220 <memchr>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d038      	beq.n	800a4c4 <_svfiprintf_r+0x1d8>
 800a452:	4b23      	ldr	r3, [pc, #140]	; (800a4e0 <_svfiprintf_r+0x1f4>)
 800a454:	bb1b      	cbnz	r3, 800a49e <_svfiprintf_r+0x1b2>
 800a456:	9b03      	ldr	r3, [sp, #12]
 800a458:	3307      	adds	r3, #7
 800a45a:	f023 0307 	bic.w	r3, r3, #7
 800a45e:	3308      	adds	r3, #8
 800a460:	9303      	str	r3, [sp, #12]
 800a462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a464:	4433      	add	r3, r6
 800a466:	9309      	str	r3, [sp, #36]	; 0x24
 800a468:	e767      	b.n	800a33a <_svfiprintf_r+0x4e>
 800a46a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a46e:	460c      	mov	r4, r1
 800a470:	2001      	movs	r0, #1
 800a472:	e7a5      	b.n	800a3c0 <_svfiprintf_r+0xd4>
 800a474:	2300      	movs	r3, #0
 800a476:	3401      	adds	r4, #1
 800a478:	9305      	str	r3, [sp, #20]
 800a47a:	4619      	mov	r1, r3
 800a47c:	f04f 0c0a 	mov.w	ip, #10
 800a480:	4620      	mov	r0, r4
 800a482:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a486:	3a30      	subs	r2, #48	; 0x30
 800a488:	2a09      	cmp	r2, #9
 800a48a:	d903      	bls.n	800a494 <_svfiprintf_r+0x1a8>
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d0c5      	beq.n	800a41c <_svfiprintf_r+0x130>
 800a490:	9105      	str	r1, [sp, #20]
 800a492:	e7c3      	b.n	800a41c <_svfiprintf_r+0x130>
 800a494:	fb0c 2101 	mla	r1, ip, r1, r2
 800a498:	4604      	mov	r4, r0
 800a49a:	2301      	movs	r3, #1
 800a49c:	e7f0      	b.n	800a480 <_svfiprintf_r+0x194>
 800a49e:	ab03      	add	r3, sp, #12
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	462a      	mov	r2, r5
 800a4a4:	4b0f      	ldr	r3, [pc, #60]	; (800a4e4 <_svfiprintf_r+0x1f8>)
 800a4a6:	a904      	add	r1, sp, #16
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f7fe f80f 	bl	80084cc <_printf_float>
 800a4ae:	1c42      	adds	r2, r0, #1
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	d1d6      	bne.n	800a462 <_svfiprintf_r+0x176>
 800a4b4:	89ab      	ldrh	r3, [r5, #12]
 800a4b6:	065b      	lsls	r3, r3, #25
 800a4b8:	f53f af2c 	bmi.w	800a314 <_svfiprintf_r+0x28>
 800a4bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4be:	b01d      	add	sp, #116	; 0x74
 800a4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c4:	ab03      	add	r3, sp, #12
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	462a      	mov	r2, r5
 800a4ca:	4b06      	ldr	r3, [pc, #24]	; (800a4e4 <_svfiprintf_r+0x1f8>)
 800a4cc:	a904      	add	r1, sp, #16
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	f7fe faa0 	bl	8008a14 <_printf_i>
 800a4d4:	e7eb      	b.n	800a4ae <_svfiprintf_r+0x1c2>
 800a4d6:	bf00      	nop
 800a4d8:	0800b334 	.word	0x0800b334
 800a4dc:	0800b33e 	.word	0x0800b33e
 800a4e0:	080084cd 	.word	0x080084cd
 800a4e4:	0800a235 	.word	0x0800a235
 800a4e8:	0800b33a 	.word	0x0800b33a

0800a4ec <_sbrk_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4d06      	ldr	r5, [pc, #24]	; (800a508 <_sbrk_r+0x1c>)
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	4608      	mov	r0, r1
 800a4f6:	602b      	str	r3, [r5, #0]
 800a4f8:	f7f7 fd4e 	bl	8001f98 <_sbrk>
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	d102      	bne.n	800a506 <_sbrk_r+0x1a>
 800a500:	682b      	ldr	r3, [r5, #0]
 800a502:	b103      	cbz	r3, 800a506 <_sbrk_r+0x1a>
 800a504:	6023      	str	r3, [r4, #0]
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	20000858 	.word	0x20000858

0800a50c <__assert_func>:
 800a50c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a50e:	4614      	mov	r4, r2
 800a510:	461a      	mov	r2, r3
 800a512:	4b09      	ldr	r3, [pc, #36]	; (800a538 <__assert_func+0x2c>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4605      	mov	r5, r0
 800a518:	68d8      	ldr	r0, [r3, #12]
 800a51a:	b14c      	cbz	r4, 800a530 <__assert_func+0x24>
 800a51c:	4b07      	ldr	r3, [pc, #28]	; (800a53c <__assert_func+0x30>)
 800a51e:	9100      	str	r1, [sp, #0]
 800a520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a524:	4906      	ldr	r1, [pc, #24]	; (800a540 <__assert_func+0x34>)
 800a526:	462b      	mov	r3, r5
 800a528:	f000 f80e 	bl	800a548 <fiprintf>
 800a52c:	f000 faa4 	bl	800aa78 <abort>
 800a530:	4b04      	ldr	r3, [pc, #16]	; (800a544 <__assert_func+0x38>)
 800a532:	461c      	mov	r4, r3
 800a534:	e7f3      	b.n	800a51e <__assert_func+0x12>
 800a536:	bf00      	nop
 800a538:	20000028 	.word	0x20000028
 800a53c:	0800b345 	.word	0x0800b345
 800a540:	0800b352 	.word	0x0800b352
 800a544:	0800b380 	.word	0x0800b380

0800a548 <fiprintf>:
 800a548:	b40e      	push	{r1, r2, r3}
 800a54a:	b503      	push	{r0, r1, lr}
 800a54c:	4601      	mov	r1, r0
 800a54e:	ab03      	add	r3, sp, #12
 800a550:	4805      	ldr	r0, [pc, #20]	; (800a568 <fiprintf+0x20>)
 800a552:	f853 2b04 	ldr.w	r2, [r3], #4
 800a556:	6800      	ldr	r0, [r0, #0]
 800a558:	9301      	str	r3, [sp, #4]
 800a55a:	f000 f88f 	bl	800a67c <_vfiprintf_r>
 800a55e:	b002      	add	sp, #8
 800a560:	f85d eb04 	ldr.w	lr, [sp], #4
 800a564:	b003      	add	sp, #12
 800a566:	4770      	bx	lr
 800a568:	20000028 	.word	0x20000028

0800a56c <__ascii_mbtowc>:
 800a56c:	b082      	sub	sp, #8
 800a56e:	b901      	cbnz	r1, 800a572 <__ascii_mbtowc+0x6>
 800a570:	a901      	add	r1, sp, #4
 800a572:	b142      	cbz	r2, 800a586 <__ascii_mbtowc+0x1a>
 800a574:	b14b      	cbz	r3, 800a58a <__ascii_mbtowc+0x1e>
 800a576:	7813      	ldrb	r3, [r2, #0]
 800a578:	600b      	str	r3, [r1, #0]
 800a57a:	7812      	ldrb	r2, [r2, #0]
 800a57c:	1e10      	subs	r0, r2, #0
 800a57e:	bf18      	it	ne
 800a580:	2001      	movne	r0, #1
 800a582:	b002      	add	sp, #8
 800a584:	4770      	bx	lr
 800a586:	4610      	mov	r0, r2
 800a588:	e7fb      	b.n	800a582 <__ascii_mbtowc+0x16>
 800a58a:	f06f 0001 	mvn.w	r0, #1
 800a58e:	e7f8      	b.n	800a582 <__ascii_mbtowc+0x16>

0800a590 <memmove>:
 800a590:	4288      	cmp	r0, r1
 800a592:	b510      	push	{r4, lr}
 800a594:	eb01 0402 	add.w	r4, r1, r2
 800a598:	d902      	bls.n	800a5a0 <memmove+0x10>
 800a59a:	4284      	cmp	r4, r0
 800a59c:	4623      	mov	r3, r4
 800a59e:	d807      	bhi.n	800a5b0 <memmove+0x20>
 800a5a0:	1e43      	subs	r3, r0, #1
 800a5a2:	42a1      	cmp	r1, r4
 800a5a4:	d008      	beq.n	800a5b8 <memmove+0x28>
 800a5a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5ae:	e7f8      	b.n	800a5a2 <memmove+0x12>
 800a5b0:	4402      	add	r2, r0
 800a5b2:	4601      	mov	r1, r0
 800a5b4:	428a      	cmp	r2, r1
 800a5b6:	d100      	bne.n	800a5ba <memmove+0x2a>
 800a5b8:	bd10      	pop	{r4, pc}
 800a5ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5c2:	e7f7      	b.n	800a5b4 <memmove+0x24>

0800a5c4 <__malloc_lock>:
 800a5c4:	4801      	ldr	r0, [pc, #4]	; (800a5cc <__malloc_lock+0x8>)
 800a5c6:	f000 bc17 	b.w	800adf8 <__retarget_lock_acquire_recursive>
 800a5ca:	bf00      	nop
 800a5cc:	20000860 	.word	0x20000860

0800a5d0 <__malloc_unlock>:
 800a5d0:	4801      	ldr	r0, [pc, #4]	; (800a5d8 <__malloc_unlock+0x8>)
 800a5d2:	f000 bc12 	b.w	800adfa <__retarget_lock_release_recursive>
 800a5d6:	bf00      	nop
 800a5d8:	20000860 	.word	0x20000860

0800a5dc <_realloc_r>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	4607      	mov	r7, r0
 800a5e0:	4614      	mov	r4, r2
 800a5e2:	460e      	mov	r6, r1
 800a5e4:	b921      	cbnz	r1, 800a5f0 <_realloc_r+0x14>
 800a5e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	f7ff bdc8 	b.w	800a180 <_malloc_r>
 800a5f0:	b922      	cbnz	r2, 800a5fc <_realloc_r+0x20>
 800a5f2:	f7ff fd75 	bl	800a0e0 <_free_r>
 800a5f6:	4625      	mov	r5, r4
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5fc:	f000 fc62 	bl	800aec4 <_malloc_usable_size_r>
 800a600:	42a0      	cmp	r0, r4
 800a602:	d20f      	bcs.n	800a624 <_realloc_r+0x48>
 800a604:	4621      	mov	r1, r4
 800a606:	4638      	mov	r0, r7
 800a608:	f7ff fdba 	bl	800a180 <_malloc_r>
 800a60c:	4605      	mov	r5, r0
 800a60e:	2800      	cmp	r0, #0
 800a610:	d0f2      	beq.n	800a5f8 <_realloc_r+0x1c>
 800a612:	4631      	mov	r1, r6
 800a614:	4622      	mov	r2, r4
 800a616:	f7ff f9c7 	bl	80099a8 <memcpy>
 800a61a:	4631      	mov	r1, r6
 800a61c:	4638      	mov	r0, r7
 800a61e:	f7ff fd5f 	bl	800a0e0 <_free_r>
 800a622:	e7e9      	b.n	800a5f8 <_realloc_r+0x1c>
 800a624:	4635      	mov	r5, r6
 800a626:	e7e7      	b.n	800a5f8 <_realloc_r+0x1c>

0800a628 <__sfputc_r>:
 800a628:	6893      	ldr	r3, [r2, #8]
 800a62a:	3b01      	subs	r3, #1
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	b410      	push	{r4}
 800a630:	6093      	str	r3, [r2, #8]
 800a632:	da08      	bge.n	800a646 <__sfputc_r+0x1e>
 800a634:	6994      	ldr	r4, [r2, #24]
 800a636:	42a3      	cmp	r3, r4
 800a638:	db01      	blt.n	800a63e <__sfputc_r+0x16>
 800a63a:	290a      	cmp	r1, #10
 800a63c:	d103      	bne.n	800a646 <__sfputc_r+0x1e>
 800a63e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a642:	f000 b94b 	b.w	800a8dc <__swbuf_r>
 800a646:	6813      	ldr	r3, [r2, #0]
 800a648:	1c58      	adds	r0, r3, #1
 800a64a:	6010      	str	r0, [r2, #0]
 800a64c:	7019      	strb	r1, [r3, #0]
 800a64e:	4608      	mov	r0, r1
 800a650:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a654:	4770      	bx	lr

0800a656 <__sfputs_r>:
 800a656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a658:	4606      	mov	r6, r0
 800a65a:	460f      	mov	r7, r1
 800a65c:	4614      	mov	r4, r2
 800a65e:	18d5      	adds	r5, r2, r3
 800a660:	42ac      	cmp	r4, r5
 800a662:	d101      	bne.n	800a668 <__sfputs_r+0x12>
 800a664:	2000      	movs	r0, #0
 800a666:	e007      	b.n	800a678 <__sfputs_r+0x22>
 800a668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a66c:	463a      	mov	r2, r7
 800a66e:	4630      	mov	r0, r6
 800a670:	f7ff ffda 	bl	800a628 <__sfputc_r>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d1f3      	bne.n	800a660 <__sfputs_r+0xa>
 800a678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a67c <_vfiprintf_r>:
 800a67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a680:	460d      	mov	r5, r1
 800a682:	b09d      	sub	sp, #116	; 0x74
 800a684:	4614      	mov	r4, r2
 800a686:	4698      	mov	r8, r3
 800a688:	4606      	mov	r6, r0
 800a68a:	b118      	cbz	r0, 800a694 <_vfiprintf_r+0x18>
 800a68c:	6983      	ldr	r3, [r0, #24]
 800a68e:	b90b      	cbnz	r3, 800a694 <_vfiprintf_r+0x18>
 800a690:	f000 fb14 	bl	800acbc <__sinit>
 800a694:	4b89      	ldr	r3, [pc, #548]	; (800a8bc <_vfiprintf_r+0x240>)
 800a696:	429d      	cmp	r5, r3
 800a698:	d11b      	bne.n	800a6d2 <_vfiprintf_r+0x56>
 800a69a:	6875      	ldr	r5, [r6, #4]
 800a69c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a69e:	07d9      	lsls	r1, r3, #31
 800a6a0:	d405      	bmi.n	800a6ae <_vfiprintf_r+0x32>
 800a6a2:	89ab      	ldrh	r3, [r5, #12]
 800a6a4:	059a      	lsls	r2, r3, #22
 800a6a6:	d402      	bmi.n	800a6ae <_vfiprintf_r+0x32>
 800a6a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6aa:	f000 fba5 	bl	800adf8 <__retarget_lock_acquire_recursive>
 800a6ae:	89ab      	ldrh	r3, [r5, #12]
 800a6b0:	071b      	lsls	r3, r3, #28
 800a6b2:	d501      	bpl.n	800a6b8 <_vfiprintf_r+0x3c>
 800a6b4:	692b      	ldr	r3, [r5, #16]
 800a6b6:	b9eb      	cbnz	r3, 800a6f4 <_vfiprintf_r+0x78>
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	f000 f96e 	bl	800a99c <__swsetup_r>
 800a6c0:	b1c0      	cbz	r0, 800a6f4 <_vfiprintf_r+0x78>
 800a6c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6c4:	07dc      	lsls	r4, r3, #31
 800a6c6:	d50e      	bpl.n	800a6e6 <_vfiprintf_r+0x6a>
 800a6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6cc:	b01d      	add	sp, #116	; 0x74
 800a6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d2:	4b7b      	ldr	r3, [pc, #492]	; (800a8c0 <_vfiprintf_r+0x244>)
 800a6d4:	429d      	cmp	r5, r3
 800a6d6:	d101      	bne.n	800a6dc <_vfiprintf_r+0x60>
 800a6d8:	68b5      	ldr	r5, [r6, #8]
 800a6da:	e7df      	b.n	800a69c <_vfiprintf_r+0x20>
 800a6dc:	4b79      	ldr	r3, [pc, #484]	; (800a8c4 <_vfiprintf_r+0x248>)
 800a6de:	429d      	cmp	r5, r3
 800a6e0:	bf08      	it	eq
 800a6e2:	68f5      	ldreq	r5, [r6, #12]
 800a6e4:	e7da      	b.n	800a69c <_vfiprintf_r+0x20>
 800a6e6:	89ab      	ldrh	r3, [r5, #12]
 800a6e8:	0598      	lsls	r0, r3, #22
 800a6ea:	d4ed      	bmi.n	800a6c8 <_vfiprintf_r+0x4c>
 800a6ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ee:	f000 fb84 	bl	800adfa <__retarget_lock_release_recursive>
 800a6f2:	e7e9      	b.n	800a6c8 <_vfiprintf_r+0x4c>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f8:	2320      	movs	r3, #32
 800a6fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800a702:	2330      	movs	r3, #48	; 0x30
 800a704:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8c8 <_vfiprintf_r+0x24c>
 800a708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a70c:	f04f 0901 	mov.w	r9, #1
 800a710:	4623      	mov	r3, r4
 800a712:	469a      	mov	sl, r3
 800a714:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a718:	b10a      	cbz	r2, 800a71e <_vfiprintf_r+0xa2>
 800a71a:	2a25      	cmp	r2, #37	; 0x25
 800a71c:	d1f9      	bne.n	800a712 <_vfiprintf_r+0x96>
 800a71e:	ebba 0b04 	subs.w	fp, sl, r4
 800a722:	d00b      	beq.n	800a73c <_vfiprintf_r+0xc0>
 800a724:	465b      	mov	r3, fp
 800a726:	4622      	mov	r2, r4
 800a728:	4629      	mov	r1, r5
 800a72a:	4630      	mov	r0, r6
 800a72c:	f7ff ff93 	bl	800a656 <__sfputs_r>
 800a730:	3001      	adds	r0, #1
 800a732:	f000 80aa 	beq.w	800a88a <_vfiprintf_r+0x20e>
 800a736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a738:	445a      	add	r2, fp
 800a73a:	9209      	str	r2, [sp, #36]	; 0x24
 800a73c:	f89a 3000 	ldrb.w	r3, [sl]
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 80a2 	beq.w	800a88a <_vfiprintf_r+0x20e>
 800a746:	2300      	movs	r3, #0
 800a748:	f04f 32ff 	mov.w	r2, #4294967295
 800a74c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a750:	f10a 0a01 	add.w	sl, sl, #1
 800a754:	9304      	str	r3, [sp, #16]
 800a756:	9307      	str	r3, [sp, #28]
 800a758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a75c:	931a      	str	r3, [sp, #104]	; 0x68
 800a75e:	4654      	mov	r4, sl
 800a760:	2205      	movs	r2, #5
 800a762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a766:	4858      	ldr	r0, [pc, #352]	; (800a8c8 <_vfiprintf_r+0x24c>)
 800a768:	f7f5 fd5a 	bl	8000220 <memchr>
 800a76c:	9a04      	ldr	r2, [sp, #16]
 800a76e:	b9d8      	cbnz	r0, 800a7a8 <_vfiprintf_r+0x12c>
 800a770:	06d1      	lsls	r1, r2, #27
 800a772:	bf44      	itt	mi
 800a774:	2320      	movmi	r3, #32
 800a776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a77a:	0713      	lsls	r3, r2, #28
 800a77c:	bf44      	itt	mi
 800a77e:	232b      	movmi	r3, #43	; 0x2b
 800a780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a784:	f89a 3000 	ldrb.w	r3, [sl]
 800a788:	2b2a      	cmp	r3, #42	; 0x2a
 800a78a:	d015      	beq.n	800a7b8 <_vfiprintf_r+0x13c>
 800a78c:	9a07      	ldr	r2, [sp, #28]
 800a78e:	4654      	mov	r4, sl
 800a790:	2000      	movs	r0, #0
 800a792:	f04f 0c0a 	mov.w	ip, #10
 800a796:	4621      	mov	r1, r4
 800a798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a79c:	3b30      	subs	r3, #48	; 0x30
 800a79e:	2b09      	cmp	r3, #9
 800a7a0:	d94e      	bls.n	800a840 <_vfiprintf_r+0x1c4>
 800a7a2:	b1b0      	cbz	r0, 800a7d2 <_vfiprintf_r+0x156>
 800a7a4:	9207      	str	r2, [sp, #28]
 800a7a6:	e014      	b.n	800a7d2 <_vfiprintf_r+0x156>
 800a7a8:	eba0 0308 	sub.w	r3, r0, r8
 800a7ac:	fa09 f303 	lsl.w	r3, r9, r3
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	9304      	str	r3, [sp, #16]
 800a7b4:	46a2      	mov	sl, r4
 800a7b6:	e7d2      	b.n	800a75e <_vfiprintf_r+0xe2>
 800a7b8:	9b03      	ldr	r3, [sp, #12]
 800a7ba:	1d19      	adds	r1, r3, #4
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	9103      	str	r1, [sp, #12]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	bfbb      	ittet	lt
 800a7c4:	425b      	neglt	r3, r3
 800a7c6:	f042 0202 	orrlt.w	r2, r2, #2
 800a7ca:	9307      	strge	r3, [sp, #28]
 800a7cc:	9307      	strlt	r3, [sp, #28]
 800a7ce:	bfb8      	it	lt
 800a7d0:	9204      	strlt	r2, [sp, #16]
 800a7d2:	7823      	ldrb	r3, [r4, #0]
 800a7d4:	2b2e      	cmp	r3, #46	; 0x2e
 800a7d6:	d10c      	bne.n	800a7f2 <_vfiprintf_r+0x176>
 800a7d8:	7863      	ldrb	r3, [r4, #1]
 800a7da:	2b2a      	cmp	r3, #42	; 0x2a
 800a7dc:	d135      	bne.n	800a84a <_vfiprintf_r+0x1ce>
 800a7de:	9b03      	ldr	r3, [sp, #12]
 800a7e0:	1d1a      	adds	r2, r3, #4
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	9203      	str	r2, [sp, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	bfb8      	it	lt
 800a7ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7ee:	3402      	adds	r4, #2
 800a7f0:	9305      	str	r3, [sp, #20]
 800a7f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8d8 <_vfiprintf_r+0x25c>
 800a7f6:	7821      	ldrb	r1, [r4, #0]
 800a7f8:	2203      	movs	r2, #3
 800a7fa:	4650      	mov	r0, sl
 800a7fc:	f7f5 fd10 	bl	8000220 <memchr>
 800a800:	b140      	cbz	r0, 800a814 <_vfiprintf_r+0x198>
 800a802:	2340      	movs	r3, #64	; 0x40
 800a804:	eba0 000a 	sub.w	r0, r0, sl
 800a808:	fa03 f000 	lsl.w	r0, r3, r0
 800a80c:	9b04      	ldr	r3, [sp, #16]
 800a80e:	4303      	orrs	r3, r0
 800a810:	3401      	adds	r4, #1
 800a812:	9304      	str	r3, [sp, #16]
 800a814:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a818:	482c      	ldr	r0, [pc, #176]	; (800a8cc <_vfiprintf_r+0x250>)
 800a81a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a81e:	2206      	movs	r2, #6
 800a820:	f7f5 fcfe 	bl	8000220 <memchr>
 800a824:	2800      	cmp	r0, #0
 800a826:	d03f      	beq.n	800a8a8 <_vfiprintf_r+0x22c>
 800a828:	4b29      	ldr	r3, [pc, #164]	; (800a8d0 <_vfiprintf_r+0x254>)
 800a82a:	bb1b      	cbnz	r3, 800a874 <_vfiprintf_r+0x1f8>
 800a82c:	9b03      	ldr	r3, [sp, #12]
 800a82e:	3307      	adds	r3, #7
 800a830:	f023 0307 	bic.w	r3, r3, #7
 800a834:	3308      	adds	r3, #8
 800a836:	9303      	str	r3, [sp, #12]
 800a838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a83a:	443b      	add	r3, r7
 800a83c:	9309      	str	r3, [sp, #36]	; 0x24
 800a83e:	e767      	b.n	800a710 <_vfiprintf_r+0x94>
 800a840:	fb0c 3202 	mla	r2, ip, r2, r3
 800a844:	460c      	mov	r4, r1
 800a846:	2001      	movs	r0, #1
 800a848:	e7a5      	b.n	800a796 <_vfiprintf_r+0x11a>
 800a84a:	2300      	movs	r3, #0
 800a84c:	3401      	adds	r4, #1
 800a84e:	9305      	str	r3, [sp, #20]
 800a850:	4619      	mov	r1, r3
 800a852:	f04f 0c0a 	mov.w	ip, #10
 800a856:	4620      	mov	r0, r4
 800a858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a85c:	3a30      	subs	r2, #48	; 0x30
 800a85e:	2a09      	cmp	r2, #9
 800a860:	d903      	bls.n	800a86a <_vfiprintf_r+0x1ee>
 800a862:	2b00      	cmp	r3, #0
 800a864:	d0c5      	beq.n	800a7f2 <_vfiprintf_r+0x176>
 800a866:	9105      	str	r1, [sp, #20]
 800a868:	e7c3      	b.n	800a7f2 <_vfiprintf_r+0x176>
 800a86a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a86e:	4604      	mov	r4, r0
 800a870:	2301      	movs	r3, #1
 800a872:	e7f0      	b.n	800a856 <_vfiprintf_r+0x1da>
 800a874:	ab03      	add	r3, sp, #12
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	462a      	mov	r2, r5
 800a87a:	4b16      	ldr	r3, [pc, #88]	; (800a8d4 <_vfiprintf_r+0x258>)
 800a87c:	a904      	add	r1, sp, #16
 800a87e:	4630      	mov	r0, r6
 800a880:	f7fd fe24 	bl	80084cc <_printf_float>
 800a884:	4607      	mov	r7, r0
 800a886:	1c78      	adds	r0, r7, #1
 800a888:	d1d6      	bne.n	800a838 <_vfiprintf_r+0x1bc>
 800a88a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a88c:	07d9      	lsls	r1, r3, #31
 800a88e:	d405      	bmi.n	800a89c <_vfiprintf_r+0x220>
 800a890:	89ab      	ldrh	r3, [r5, #12]
 800a892:	059a      	lsls	r2, r3, #22
 800a894:	d402      	bmi.n	800a89c <_vfiprintf_r+0x220>
 800a896:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a898:	f000 faaf 	bl	800adfa <__retarget_lock_release_recursive>
 800a89c:	89ab      	ldrh	r3, [r5, #12]
 800a89e:	065b      	lsls	r3, r3, #25
 800a8a0:	f53f af12 	bmi.w	800a6c8 <_vfiprintf_r+0x4c>
 800a8a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8a6:	e711      	b.n	800a6cc <_vfiprintf_r+0x50>
 800a8a8:	ab03      	add	r3, sp, #12
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	462a      	mov	r2, r5
 800a8ae:	4b09      	ldr	r3, [pc, #36]	; (800a8d4 <_vfiprintf_r+0x258>)
 800a8b0:	a904      	add	r1, sp, #16
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	f7fe f8ae 	bl	8008a14 <_printf_i>
 800a8b8:	e7e4      	b.n	800a884 <_vfiprintf_r+0x208>
 800a8ba:	bf00      	nop
 800a8bc:	0800b4ac 	.word	0x0800b4ac
 800a8c0:	0800b4cc 	.word	0x0800b4cc
 800a8c4:	0800b48c 	.word	0x0800b48c
 800a8c8:	0800b334 	.word	0x0800b334
 800a8cc:	0800b33e 	.word	0x0800b33e
 800a8d0:	080084cd 	.word	0x080084cd
 800a8d4:	0800a657 	.word	0x0800a657
 800a8d8:	0800b33a 	.word	0x0800b33a

0800a8dc <__swbuf_r>:
 800a8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8de:	460e      	mov	r6, r1
 800a8e0:	4614      	mov	r4, r2
 800a8e2:	4605      	mov	r5, r0
 800a8e4:	b118      	cbz	r0, 800a8ee <__swbuf_r+0x12>
 800a8e6:	6983      	ldr	r3, [r0, #24]
 800a8e8:	b90b      	cbnz	r3, 800a8ee <__swbuf_r+0x12>
 800a8ea:	f000 f9e7 	bl	800acbc <__sinit>
 800a8ee:	4b21      	ldr	r3, [pc, #132]	; (800a974 <__swbuf_r+0x98>)
 800a8f0:	429c      	cmp	r4, r3
 800a8f2:	d12b      	bne.n	800a94c <__swbuf_r+0x70>
 800a8f4:	686c      	ldr	r4, [r5, #4]
 800a8f6:	69a3      	ldr	r3, [r4, #24]
 800a8f8:	60a3      	str	r3, [r4, #8]
 800a8fa:	89a3      	ldrh	r3, [r4, #12]
 800a8fc:	071a      	lsls	r2, r3, #28
 800a8fe:	d52f      	bpl.n	800a960 <__swbuf_r+0x84>
 800a900:	6923      	ldr	r3, [r4, #16]
 800a902:	b36b      	cbz	r3, 800a960 <__swbuf_r+0x84>
 800a904:	6923      	ldr	r3, [r4, #16]
 800a906:	6820      	ldr	r0, [r4, #0]
 800a908:	1ac0      	subs	r0, r0, r3
 800a90a:	6963      	ldr	r3, [r4, #20]
 800a90c:	b2f6      	uxtb	r6, r6
 800a90e:	4283      	cmp	r3, r0
 800a910:	4637      	mov	r7, r6
 800a912:	dc04      	bgt.n	800a91e <__swbuf_r+0x42>
 800a914:	4621      	mov	r1, r4
 800a916:	4628      	mov	r0, r5
 800a918:	f000 f93c 	bl	800ab94 <_fflush_r>
 800a91c:	bb30      	cbnz	r0, 800a96c <__swbuf_r+0x90>
 800a91e:	68a3      	ldr	r3, [r4, #8]
 800a920:	3b01      	subs	r3, #1
 800a922:	60a3      	str	r3, [r4, #8]
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	1c5a      	adds	r2, r3, #1
 800a928:	6022      	str	r2, [r4, #0]
 800a92a:	701e      	strb	r6, [r3, #0]
 800a92c:	6963      	ldr	r3, [r4, #20]
 800a92e:	3001      	adds	r0, #1
 800a930:	4283      	cmp	r3, r0
 800a932:	d004      	beq.n	800a93e <__swbuf_r+0x62>
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	07db      	lsls	r3, r3, #31
 800a938:	d506      	bpl.n	800a948 <__swbuf_r+0x6c>
 800a93a:	2e0a      	cmp	r6, #10
 800a93c:	d104      	bne.n	800a948 <__swbuf_r+0x6c>
 800a93e:	4621      	mov	r1, r4
 800a940:	4628      	mov	r0, r5
 800a942:	f000 f927 	bl	800ab94 <_fflush_r>
 800a946:	b988      	cbnz	r0, 800a96c <__swbuf_r+0x90>
 800a948:	4638      	mov	r0, r7
 800a94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a94c:	4b0a      	ldr	r3, [pc, #40]	; (800a978 <__swbuf_r+0x9c>)
 800a94e:	429c      	cmp	r4, r3
 800a950:	d101      	bne.n	800a956 <__swbuf_r+0x7a>
 800a952:	68ac      	ldr	r4, [r5, #8]
 800a954:	e7cf      	b.n	800a8f6 <__swbuf_r+0x1a>
 800a956:	4b09      	ldr	r3, [pc, #36]	; (800a97c <__swbuf_r+0xa0>)
 800a958:	429c      	cmp	r4, r3
 800a95a:	bf08      	it	eq
 800a95c:	68ec      	ldreq	r4, [r5, #12]
 800a95e:	e7ca      	b.n	800a8f6 <__swbuf_r+0x1a>
 800a960:	4621      	mov	r1, r4
 800a962:	4628      	mov	r0, r5
 800a964:	f000 f81a 	bl	800a99c <__swsetup_r>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d0cb      	beq.n	800a904 <__swbuf_r+0x28>
 800a96c:	f04f 37ff 	mov.w	r7, #4294967295
 800a970:	e7ea      	b.n	800a948 <__swbuf_r+0x6c>
 800a972:	bf00      	nop
 800a974:	0800b4ac 	.word	0x0800b4ac
 800a978:	0800b4cc 	.word	0x0800b4cc
 800a97c:	0800b48c 	.word	0x0800b48c

0800a980 <__ascii_wctomb>:
 800a980:	b149      	cbz	r1, 800a996 <__ascii_wctomb+0x16>
 800a982:	2aff      	cmp	r2, #255	; 0xff
 800a984:	bf85      	ittet	hi
 800a986:	238a      	movhi	r3, #138	; 0x8a
 800a988:	6003      	strhi	r3, [r0, #0]
 800a98a:	700a      	strbls	r2, [r1, #0]
 800a98c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a990:	bf98      	it	ls
 800a992:	2001      	movls	r0, #1
 800a994:	4770      	bx	lr
 800a996:	4608      	mov	r0, r1
 800a998:	4770      	bx	lr
	...

0800a99c <__swsetup_r>:
 800a99c:	4b32      	ldr	r3, [pc, #200]	; (800aa68 <__swsetup_r+0xcc>)
 800a99e:	b570      	push	{r4, r5, r6, lr}
 800a9a0:	681d      	ldr	r5, [r3, #0]
 800a9a2:	4606      	mov	r6, r0
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	b125      	cbz	r5, 800a9b2 <__swsetup_r+0x16>
 800a9a8:	69ab      	ldr	r3, [r5, #24]
 800a9aa:	b913      	cbnz	r3, 800a9b2 <__swsetup_r+0x16>
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	f000 f985 	bl	800acbc <__sinit>
 800a9b2:	4b2e      	ldr	r3, [pc, #184]	; (800aa6c <__swsetup_r+0xd0>)
 800a9b4:	429c      	cmp	r4, r3
 800a9b6:	d10f      	bne.n	800a9d8 <__swsetup_r+0x3c>
 800a9b8:	686c      	ldr	r4, [r5, #4]
 800a9ba:	89a3      	ldrh	r3, [r4, #12]
 800a9bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9c0:	0719      	lsls	r1, r3, #28
 800a9c2:	d42c      	bmi.n	800aa1e <__swsetup_r+0x82>
 800a9c4:	06dd      	lsls	r5, r3, #27
 800a9c6:	d411      	bmi.n	800a9ec <__swsetup_r+0x50>
 800a9c8:	2309      	movs	r3, #9
 800a9ca:	6033      	str	r3, [r6, #0]
 800a9cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9d0:	81a3      	strh	r3, [r4, #12]
 800a9d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d6:	e03e      	b.n	800aa56 <__swsetup_r+0xba>
 800a9d8:	4b25      	ldr	r3, [pc, #148]	; (800aa70 <__swsetup_r+0xd4>)
 800a9da:	429c      	cmp	r4, r3
 800a9dc:	d101      	bne.n	800a9e2 <__swsetup_r+0x46>
 800a9de:	68ac      	ldr	r4, [r5, #8]
 800a9e0:	e7eb      	b.n	800a9ba <__swsetup_r+0x1e>
 800a9e2:	4b24      	ldr	r3, [pc, #144]	; (800aa74 <__swsetup_r+0xd8>)
 800a9e4:	429c      	cmp	r4, r3
 800a9e6:	bf08      	it	eq
 800a9e8:	68ec      	ldreq	r4, [r5, #12]
 800a9ea:	e7e6      	b.n	800a9ba <__swsetup_r+0x1e>
 800a9ec:	0758      	lsls	r0, r3, #29
 800a9ee:	d512      	bpl.n	800aa16 <__swsetup_r+0x7a>
 800a9f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9f2:	b141      	cbz	r1, 800aa06 <__swsetup_r+0x6a>
 800a9f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9f8:	4299      	cmp	r1, r3
 800a9fa:	d002      	beq.n	800aa02 <__swsetup_r+0x66>
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f7ff fb6f 	bl	800a0e0 <_free_r>
 800aa02:	2300      	movs	r3, #0
 800aa04:	6363      	str	r3, [r4, #52]	; 0x34
 800aa06:	89a3      	ldrh	r3, [r4, #12]
 800aa08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa0c:	81a3      	strh	r3, [r4, #12]
 800aa0e:	2300      	movs	r3, #0
 800aa10:	6063      	str	r3, [r4, #4]
 800aa12:	6923      	ldr	r3, [r4, #16]
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	f043 0308 	orr.w	r3, r3, #8
 800aa1c:	81a3      	strh	r3, [r4, #12]
 800aa1e:	6923      	ldr	r3, [r4, #16]
 800aa20:	b94b      	cbnz	r3, 800aa36 <__swsetup_r+0x9a>
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa2c:	d003      	beq.n	800aa36 <__swsetup_r+0x9a>
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4630      	mov	r0, r6
 800aa32:	f000 fa07 	bl	800ae44 <__smakebuf_r>
 800aa36:	89a0      	ldrh	r0, [r4, #12]
 800aa38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa3c:	f010 0301 	ands.w	r3, r0, #1
 800aa40:	d00a      	beq.n	800aa58 <__swsetup_r+0xbc>
 800aa42:	2300      	movs	r3, #0
 800aa44:	60a3      	str	r3, [r4, #8]
 800aa46:	6963      	ldr	r3, [r4, #20]
 800aa48:	425b      	negs	r3, r3
 800aa4a:	61a3      	str	r3, [r4, #24]
 800aa4c:	6923      	ldr	r3, [r4, #16]
 800aa4e:	b943      	cbnz	r3, 800aa62 <__swsetup_r+0xc6>
 800aa50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa54:	d1ba      	bne.n	800a9cc <__swsetup_r+0x30>
 800aa56:	bd70      	pop	{r4, r5, r6, pc}
 800aa58:	0781      	lsls	r1, r0, #30
 800aa5a:	bf58      	it	pl
 800aa5c:	6963      	ldrpl	r3, [r4, #20]
 800aa5e:	60a3      	str	r3, [r4, #8]
 800aa60:	e7f4      	b.n	800aa4c <__swsetup_r+0xb0>
 800aa62:	2000      	movs	r0, #0
 800aa64:	e7f7      	b.n	800aa56 <__swsetup_r+0xba>
 800aa66:	bf00      	nop
 800aa68:	20000028 	.word	0x20000028
 800aa6c:	0800b4ac 	.word	0x0800b4ac
 800aa70:	0800b4cc 	.word	0x0800b4cc
 800aa74:	0800b48c 	.word	0x0800b48c

0800aa78 <abort>:
 800aa78:	b508      	push	{r3, lr}
 800aa7a:	2006      	movs	r0, #6
 800aa7c:	f000 fa52 	bl	800af24 <raise>
 800aa80:	2001      	movs	r0, #1
 800aa82:	f7f7 fa11 	bl	8001ea8 <_exit>
	...

0800aa88 <__sflush_r>:
 800aa88:	898a      	ldrh	r2, [r1, #12]
 800aa8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8e:	4605      	mov	r5, r0
 800aa90:	0710      	lsls	r0, r2, #28
 800aa92:	460c      	mov	r4, r1
 800aa94:	d458      	bmi.n	800ab48 <__sflush_r+0xc0>
 800aa96:	684b      	ldr	r3, [r1, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	dc05      	bgt.n	800aaa8 <__sflush_r+0x20>
 800aa9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	dc02      	bgt.n	800aaa8 <__sflush_r+0x20>
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aaaa:	2e00      	cmp	r6, #0
 800aaac:	d0f9      	beq.n	800aaa2 <__sflush_r+0x1a>
 800aaae:	2300      	movs	r3, #0
 800aab0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aab4:	682f      	ldr	r7, [r5, #0]
 800aab6:	602b      	str	r3, [r5, #0]
 800aab8:	d032      	beq.n	800ab20 <__sflush_r+0x98>
 800aaba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aabc:	89a3      	ldrh	r3, [r4, #12]
 800aabe:	075a      	lsls	r2, r3, #29
 800aac0:	d505      	bpl.n	800aace <__sflush_r+0x46>
 800aac2:	6863      	ldr	r3, [r4, #4]
 800aac4:	1ac0      	subs	r0, r0, r3
 800aac6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aac8:	b10b      	cbz	r3, 800aace <__sflush_r+0x46>
 800aaca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aacc:	1ac0      	subs	r0, r0, r3
 800aace:	2300      	movs	r3, #0
 800aad0:	4602      	mov	r2, r0
 800aad2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aad4:	6a21      	ldr	r1, [r4, #32]
 800aad6:	4628      	mov	r0, r5
 800aad8:	47b0      	blx	r6
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	d106      	bne.n	800aaee <__sflush_r+0x66>
 800aae0:	6829      	ldr	r1, [r5, #0]
 800aae2:	291d      	cmp	r1, #29
 800aae4:	d82c      	bhi.n	800ab40 <__sflush_r+0xb8>
 800aae6:	4a2a      	ldr	r2, [pc, #168]	; (800ab90 <__sflush_r+0x108>)
 800aae8:	40ca      	lsrs	r2, r1
 800aaea:	07d6      	lsls	r6, r2, #31
 800aaec:	d528      	bpl.n	800ab40 <__sflush_r+0xb8>
 800aaee:	2200      	movs	r2, #0
 800aaf0:	6062      	str	r2, [r4, #4]
 800aaf2:	04d9      	lsls	r1, r3, #19
 800aaf4:	6922      	ldr	r2, [r4, #16]
 800aaf6:	6022      	str	r2, [r4, #0]
 800aaf8:	d504      	bpl.n	800ab04 <__sflush_r+0x7c>
 800aafa:	1c42      	adds	r2, r0, #1
 800aafc:	d101      	bne.n	800ab02 <__sflush_r+0x7a>
 800aafe:	682b      	ldr	r3, [r5, #0]
 800ab00:	b903      	cbnz	r3, 800ab04 <__sflush_r+0x7c>
 800ab02:	6560      	str	r0, [r4, #84]	; 0x54
 800ab04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab06:	602f      	str	r7, [r5, #0]
 800ab08:	2900      	cmp	r1, #0
 800ab0a:	d0ca      	beq.n	800aaa2 <__sflush_r+0x1a>
 800ab0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab10:	4299      	cmp	r1, r3
 800ab12:	d002      	beq.n	800ab1a <__sflush_r+0x92>
 800ab14:	4628      	mov	r0, r5
 800ab16:	f7ff fae3 	bl	800a0e0 <_free_r>
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	6360      	str	r0, [r4, #52]	; 0x34
 800ab1e:	e7c1      	b.n	800aaa4 <__sflush_r+0x1c>
 800ab20:	6a21      	ldr	r1, [r4, #32]
 800ab22:	2301      	movs	r3, #1
 800ab24:	4628      	mov	r0, r5
 800ab26:	47b0      	blx	r6
 800ab28:	1c41      	adds	r1, r0, #1
 800ab2a:	d1c7      	bne.n	800aabc <__sflush_r+0x34>
 800ab2c:	682b      	ldr	r3, [r5, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d0c4      	beq.n	800aabc <__sflush_r+0x34>
 800ab32:	2b1d      	cmp	r3, #29
 800ab34:	d001      	beq.n	800ab3a <__sflush_r+0xb2>
 800ab36:	2b16      	cmp	r3, #22
 800ab38:	d101      	bne.n	800ab3e <__sflush_r+0xb6>
 800ab3a:	602f      	str	r7, [r5, #0]
 800ab3c:	e7b1      	b.n	800aaa2 <__sflush_r+0x1a>
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab44:	81a3      	strh	r3, [r4, #12]
 800ab46:	e7ad      	b.n	800aaa4 <__sflush_r+0x1c>
 800ab48:	690f      	ldr	r7, [r1, #16]
 800ab4a:	2f00      	cmp	r7, #0
 800ab4c:	d0a9      	beq.n	800aaa2 <__sflush_r+0x1a>
 800ab4e:	0793      	lsls	r3, r2, #30
 800ab50:	680e      	ldr	r6, [r1, #0]
 800ab52:	bf08      	it	eq
 800ab54:	694b      	ldreq	r3, [r1, #20]
 800ab56:	600f      	str	r7, [r1, #0]
 800ab58:	bf18      	it	ne
 800ab5a:	2300      	movne	r3, #0
 800ab5c:	eba6 0807 	sub.w	r8, r6, r7
 800ab60:	608b      	str	r3, [r1, #8]
 800ab62:	f1b8 0f00 	cmp.w	r8, #0
 800ab66:	dd9c      	ble.n	800aaa2 <__sflush_r+0x1a>
 800ab68:	6a21      	ldr	r1, [r4, #32]
 800ab6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab6c:	4643      	mov	r3, r8
 800ab6e:	463a      	mov	r2, r7
 800ab70:	4628      	mov	r0, r5
 800ab72:	47b0      	blx	r6
 800ab74:	2800      	cmp	r0, #0
 800ab76:	dc06      	bgt.n	800ab86 <__sflush_r+0xfe>
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab7e:	81a3      	strh	r3, [r4, #12]
 800ab80:	f04f 30ff 	mov.w	r0, #4294967295
 800ab84:	e78e      	b.n	800aaa4 <__sflush_r+0x1c>
 800ab86:	4407      	add	r7, r0
 800ab88:	eba8 0800 	sub.w	r8, r8, r0
 800ab8c:	e7e9      	b.n	800ab62 <__sflush_r+0xda>
 800ab8e:	bf00      	nop
 800ab90:	20400001 	.word	0x20400001

0800ab94 <_fflush_r>:
 800ab94:	b538      	push	{r3, r4, r5, lr}
 800ab96:	690b      	ldr	r3, [r1, #16]
 800ab98:	4605      	mov	r5, r0
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	b913      	cbnz	r3, 800aba4 <_fflush_r+0x10>
 800ab9e:	2500      	movs	r5, #0
 800aba0:	4628      	mov	r0, r5
 800aba2:	bd38      	pop	{r3, r4, r5, pc}
 800aba4:	b118      	cbz	r0, 800abae <_fflush_r+0x1a>
 800aba6:	6983      	ldr	r3, [r0, #24]
 800aba8:	b90b      	cbnz	r3, 800abae <_fflush_r+0x1a>
 800abaa:	f000 f887 	bl	800acbc <__sinit>
 800abae:	4b14      	ldr	r3, [pc, #80]	; (800ac00 <_fflush_r+0x6c>)
 800abb0:	429c      	cmp	r4, r3
 800abb2:	d11b      	bne.n	800abec <_fflush_r+0x58>
 800abb4:	686c      	ldr	r4, [r5, #4]
 800abb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d0ef      	beq.n	800ab9e <_fflush_r+0xa>
 800abbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abc0:	07d0      	lsls	r0, r2, #31
 800abc2:	d404      	bmi.n	800abce <_fflush_r+0x3a>
 800abc4:	0599      	lsls	r1, r3, #22
 800abc6:	d402      	bmi.n	800abce <_fflush_r+0x3a>
 800abc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abca:	f000 f915 	bl	800adf8 <__retarget_lock_acquire_recursive>
 800abce:	4628      	mov	r0, r5
 800abd0:	4621      	mov	r1, r4
 800abd2:	f7ff ff59 	bl	800aa88 <__sflush_r>
 800abd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abd8:	07da      	lsls	r2, r3, #31
 800abda:	4605      	mov	r5, r0
 800abdc:	d4e0      	bmi.n	800aba0 <_fflush_r+0xc>
 800abde:	89a3      	ldrh	r3, [r4, #12]
 800abe0:	059b      	lsls	r3, r3, #22
 800abe2:	d4dd      	bmi.n	800aba0 <_fflush_r+0xc>
 800abe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abe6:	f000 f908 	bl	800adfa <__retarget_lock_release_recursive>
 800abea:	e7d9      	b.n	800aba0 <_fflush_r+0xc>
 800abec:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <_fflush_r+0x70>)
 800abee:	429c      	cmp	r4, r3
 800abf0:	d101      	bne.n	800abf6 <_fflush_r+0x62>
 800abf2:	68ac      	ldr	r4, [r5, #8]
 800abf4:	e7df      	b.n	800abb6 <_fflush_r+0x22>
 800abf6:	4b04      	ldr	r3, [pc, #16]	; (800ac08 <_fflush_r+0x74>)
 800abf8:	429c      	cmp	r4, r3
 800abfa:	bf08      	it	eq
 800abfc:	68ec      	ldreq	r4, [r5, #12]
 800abfe:	e7da      	b.n	800abb6 <_fflush_r+0x22>
 800ac00:	0800b4ac 	.word	0x0800b4ac
 800ac04:	0800b4cc 	.word	0x0800b4cc
 800ac08:	0800b48c 	.word	0x0800b48c

0800ac0c <std>:
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	b510      	push	{r4, lr}
 800ac10:	4604      	mov	r4, r0
 800ac12:	e9c0 3300 	strd	r3, r3, [r0]
 800ac16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac1a:	6083      	str	r3, [r0, #8]
 800ac1c:	8181      	strh	r1, [r0, #12]
 800ac1e:	6643      	str	r3, [r0, #100]	; 0x64
 800ac20:	81c2      	strh	r2, [r0, #14]
 800ac22:	6183      	str	r3, [r0, #24]
 800ac24:	4619      	mov	r1, r3
 800ac26:	2208      	movs	r2, #8
 800ac28:	305c      	adds	r0, #92	; 0x5c
 800ac2a:	f7fd fba7 	bl	800837c <memset>
 800ac2e:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <std+0x38>)
 800ac30:	6263      	str	r3, [r4, #36]	; 0x24
 800ac32:	4b05      	ldr	r3, [pc, #20]	; (800ac48 <std+0x3c>)
 800ac34:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac36:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <std+0x40>)
 800ac38:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac3a:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <std+0x44>)
 800ac3c:	6224      	str	r4, [r4, #32]
 800ac3e:	6323      	str	r3, [r4, #48]	; 0x30
 800ac40:	bd10      	pop	{r4, pc}
 800ac42:	bf00      	nop
 800ac44:	0800af5d 	.word	0x0800af5d
 800ac48:	0800af7f 	.word	0x0800af7f
 800ac4c:	0800afb7 	.word	0x0800afb7
 800ac50:	0800afdb 	.word	0x0800afdb

0800ac54 <_cleanup_r>:
 800ac54:	4901      	ldr	r1, [pc, #4]	; (800ac5c <_cleanup_r+0x8>)
 800ac56:	f000 b8af 	b.w	800adb8 <_fwalk_reent>
 800ac5a:	bf00      	nop
 800ac5c:	0800ab95 	.word	0x0800ab95

0800ac60 <__sfmoreglue>:
 800ac60:	b570      	push	{r4, r5, r6, lr}
 800ac62:	1e4a      	subs	r2, r1, #1
 800ac64:	2568      	movs	r5, #104	; 0x68
 800ac66:	4355      	muls	r5, r2
 800ac68:	460e      	mov	r6, r1
 800ac6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac6e:	f7ff fa87 	bl	800a180 <_malloc_r>
 800ac72:	4604      	mov	r4, r0
 800ac74:	b140      	cbz	r0, 800ac88 <__sfmoreglue+0x28>
 800ac76:	2100      	movs	r1, #0
 800ac78:	e9c0 1600 	strd	r1, r6, [r0]
 800ac7c:	300c      	adds	r0, #12
 800ac7e:	60a0      	str	r0, [r4, #8]
 800ac80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac84:	f7fd fb7a 	bl	800837c <memset>
 800ac88:	4620      	mov	r0, r4
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}

0800ac8c <__sfp_lock_acquire>:
 800ac8c:	4801      	ldr	r0, [pc, #4]	; (800ac94 <__sfp_lock_acquire+0x8>)
 800ac8e:	f000 b8b3 	b.w	800adf8 <__retarget_lock_acquire_recursive>
 800ac92:	bf00      	nop
 800ac94:	20000864 	.word	0x20000864

0800ac98 <__sfp_lock_release>:
 800ac98:	4801      	ldr	r0, [pc, #4]	; (800aca0 <__sfp_lock_release+0x8>)
 800ac9a:	f000 b8ae 	b.w	800adfa <__retarget_lock_release_recursive>
 800ac9e:	bf00      	nop
 800aca0:	20000864 	.word	0x20000864

0800aca4 <__sinit_lock_acquire>:
 800aca4:	4801      	ldr	r0, [pc, #4]	; (800acac <__sinit_lock_acquire+0x8>)
 800aca6:	f000 b8a7 	b.w	800adf8 <__retarget_lock_acquire_recursive>
 800acaa:	bf00      	nop
 800acac:	2000085f 	.word	0x2000085f

0800acb0 <__sinit_lock_release>:
 800acb0:	4801      	ldr	r0, [pc, #4]	; (800acb8 <__sinit_lock_release+0x8>)
 800acb2:	f000 b8a2 	b.w	800adfa <__retarget_lock_release_recursive>
 800acb6:	bf00      	nop
 800acb8:	2000085f 	.word	0x2000085f

0800acbc <__sinit>:
 800acbc:	b510      	push	{r4, lr}
 800acbe:	4604      	mov	r4, r0
 800acc0:	f7ff fff0 	bl	800aca4 <__sinit_lock_acquire>
 800acc4:	69a3      	ldr	r3, [r4, #24]
 800acc6:	b11b      	cbz	r3, 800acd0 <__sinit+0x14>
 800acc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800accc:	f7ff bff0 	b.w	800acb0 <__sinit_lock_release>
 800acd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800acd4:	6523      	str	r3, [r4, #80]	; 0x50
 800acd6:	4b13      	ldr	r3, [pc, #76]	; (800ad24 <__sinit+0x68>)
 800acd8:	4a13      	ldr	r2, [pc, #76]	; (800ad28 <__sinit+0x6c>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	62a2      	str	r2, [r4, #40]	; 0x28
 800acde:	42a3      	cmp	r3, r4
 800ace0:	bf04      	itt	eq
 800ace2:	2301      	moveq	r3, #1
 800ace4:	61a3      	streq	r3, [r4, #24]
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 f820 	bl	800ad2c <__sfp>
 800acec:	6060      	str	r0, [r4, #4]
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 f81c 	bl	800ad2c <__sfp>
 800acf4:	60a0      	str	r0, [r4, #8]
 800acf6:	4620      	mov	r0, r4
 800acf8:	f000 f818 	bl	800ad2c <__sfp>
 800acfc:	2200      	movs	r2, #0
 800acfe:	60e0      	str	r0, [r4, #12]
 800ad00:	2104      	movs	r1, #4
 800ad02:	6860      	ldr	r0, [r4, #4]
 800ad04:	f7ff ff82 	bl	800ac0c <std>
 800ad08:	68a0      	ldr	r0, [r4, #8]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	2109      	movs	r1, #9
 800ad0e:	f7ff ff7d 	bl	800ac0c <std>
 800ad12:	68e0      	ldr	r0, [r4, #12]
 800ad14:	2202      	movs	r2, #2
 800ad16:	2112      	movs	r1, #18
 800ad18:	f7ff ff78 	bl	800ac0c <std>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	61a3      	str	r3, [r4, #24]
 800ad20:	e7d2      	b.n	800acc8 <__sinit+0xc>
 800ad22:	bf00      	nop
 800ad24:	0800b108 	.word	0x0800b108
 800ad28:	0800ac55 	.word	0x0800ac55

0800ad2c <__sfp>:
 800ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2e:	4607      	mov	r7, r0
 800ad30:	f7ff ffac 	bl	800ac8c <__sfp_lock_acquire>
 800ad34:	4b1e      	ldr	r3, [pc, #120]	; (800adb0 <__sfp+0x84>)
 800ad36:	681e      	ldr	r6, [r3, #0]
 800ad38:	69b3      	ldr	r3, [r6, #24]
 800ad3a:	b913      	cbnz	r3, 800ad42 <__sfp+0x16>
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	f7ff ffbd 	bl	800acbc <__sinit>
 800ad42:	3648      	adds	r6, #72	; 0x48
 800ad44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	d503      	bpl.n	800ad54 <__sfp+0x28>
 800ad4c:	6833      	ldr	r3, [r6, #0]
 800ad4e:	b30b      	cbz	r3, 800ad94 <__sfp+0x68>
 800ad50:	6836      	ldr	r6, [r6, #0]
 800ad52:	e7f7      	b.n	800ad44 <__sfp+0x18>
 800ad54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad58:	b9d5      	cbnz	r5, 800ad90 <__sfp+0x64>
 800ad5a:	4b16      	ldr	r3, [pc, #88]	; (800adb4 <__sfp+0x88>)
 800ad5c:	60e3      	str	r3, [r4, #12]
 800ad5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad62:	6665      	str	r5, [r4, #100]	; 0x64
 800ad64:	f000 f847 	bl	800adf6 <__retarget_lock_init_recursive>
 800ad68:	f7ff ff96 	bl	800ac98 <__sfp_lock_release>
 800ad6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad74:	6025      	str	r5, [r4, #0]
 800ad76:	61a5      	str	r5, [r4, #24]
 800ad78:	2208      	movs	r2, #8
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad80:	f7fd fafc 	bl	800837c <memset>
 800ad84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad90:	3468      	adds	r4, #104	; 0x68
 800ad92:	e7d9      	b.n	800ad48 <__sfp+0x1c>
 800ad94:	2104      	movs	r1, #4
 800ad96:	4638      	mov	r0, r7
 800ad98:	f7ff ff62 	bl	800ac60 <__sfmoreglue>
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	6030      	str	r0, [r6, #0]
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d1d5      	bne.n	800ad50 <__sfp+0x24>
 800ada4:	f7ff ff78 	bl	800ac98 <__sfp_lock_release>
 800ada8:	230c      	movs	r3, #12
 800adaa:	603b      	str	r3, [r7, #0]
 800adac:	e7ee      	b.n	800ad8c <__sfp+0x60>
 800adae:	bf00      	nop
 800adb0:	0800b108 	.word	0x0800b108
 800adb4:	ffff0001 	.word	0xffff0001

0800adb8 <_fwalk_reent>:
 800adb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adbc:	4606      	mov	r6, r0
 800adbe:	4688      	mov	r8, r1
 800adc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adc4:	2700      	movs	r7, #0
 800adc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adca:	f1b9 0901 	subs.w	r9, r9, #1
 800adce:	d505      	bpl.n	800addc <_fwalk_reent+0x24>
 800add0:	6824      	ldr	r4, [r4, #0]
 800add2:	2c00      	cmp	r4, #0
 800add4:	d1f7      	bne.n	800adc6 <_fwalk_reent+0xe>
 800add6:	4638      	mov	r0, r7
 800add8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800addc:	89ab      	ldrh	r3, [r5, #12]
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d907      	bls.n	800adf2 <_fwalk_reent+0x3a>
 800ade2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ade6:	3301      	adds	r3, #1
 800ade8:	d003      	beq.n	800adf2 <_fwalk_reent+0x3a>
 800adea:	4629      	mov	r1, r5
 800adec:	4630      	mov	r0, r6
 800adee:	47c0      	blx	r8
 800adf0:	4307      	orrs	r7, r0
 800adf2:	3568      	adds	r5, #104	; 0x68
 800adf4:	e7e9      	b.n	800adca <_fwalk_reent+0x12>

0800adf6 <__retarget_lock_init_recursive>:
 800adf6:	4770      	bx	lr

0800adf8 <__retarget_lock_acquire_recursive>:
 800adf8:	4770      	bx	lr

0800adfa <__retarget_lock_release_recursive>:
 800adfa:	4770      	bx	lr

0800adfc <__swhatbuf_r>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	460e      	mov	r6, r1
 800ae00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae04:	2900      	cmp	r1, #0
 800ae06:	b096      	sub	sp, #88	; 0x58
 800ae08:	4614      	mov	r4, r2
 800ae0a:	461d      	mov	r5, r3
 800ae0c:	da07      	bge.n	800ae1e <__swhatbuf_r+0x22>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	602b      	str	r3, [r5, #0]
 800ae12:	89b3      	ldrh	r3, [r6, #12]
 800ae14:	061a      	lsls	r2, r3, #24
 800ae16:	d410      	bmi.n	800ae3a <__swhatbuf_r+0x3e>
 800ae18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae1c:	e00e      	b.n	800ae3c <__swhatbuf_r+0x40>
 800ae1e:	466a      	mov	r2, sp
 800ae20:	f000 f902 	bl	800b028 <_fstat_r>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	dbf2      	blt.n	800ae0e <__swhatbuf_r+0x12>
 800ae28:	9a01      	ldr	r2, [sp, #4]
 800ae2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae32:	425a      	negs	r2, r3
 800ae34:	415a      	adcs	r2, r3
 800ae36:	602a      	str	r2, [r5, #0]
 800ae38:	e7ee      	b.n	800ae18 <__swhatbuf_r+0x1c>
 800ae3a:	2340      	movs	r3, #64	; 0x40
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	6023      	str	r3, [r4, #0]
 800ae40:	b016      	add	sp, #88	; 0x58
 800ae42:	bd70      	pop	{r4, r5, r6, pc}

0800ae44 <__smakebuf_r>:
 800ae44:	898b      	ldrh	r3, [r1, #12]
 800ae46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae48:	079d      	lsls	r5, r3, #30
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	d507      	bpl.n	800ae60 <__smakebuf_r+0x1c>
 800ae50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	6123      	str	r3, [r4, #16]
 800ae58:	2301      	movs	r3, #1
 800ae5a:	6163      	str	r3, [r4, #20]
 800ae5c:	b002      	add	sp, #8
 800ae5e:	bd70      	pop	{r4, r5, r6, pc}
 800ae60:	ab01      	add	r3, sp, #4
 800ae62:	466a      	mov	r2, sp
 800ae64:	f7ff ffca 	bl	800adfc <__swhatbuf_r>
 800ae68:	9900      	ldr	r1, [sp, #0]
 800ae6a:	4605      	mov	r5, r0
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f7ff f987 	bl	800a180 <_malloc_r>
 800ae72:	b948      	cbnz	r0, 800ae88 <__smakebuf_r+0x44>
 800ae74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae78:	059a      	lsls	r2, r3, #22
 800ae7a:	d4ef      	bmi.n	800ae5c <__smakebuf_r+0x18>
 800ae7c:	f023 0303 	bic.w	r3, r3, #3
 800ae80:	f043 0302 	orr.w	r3, r3, #2
 800ae84:	81a3      	strh	r3, [r4, #12]
 800ae86:	e7e3      	b.n	800ae50 <__smakebuf_r+0xc>
 800ae88:	4b0d      	ldr	r3, [pc, #52]	; (800aec0 <__smakebuf_r+0x7c>)
 800ae8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	6020      	str	r0, [r4, #0]
 800ae90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae94:	81a3      	strh	r3, [r4, #12]
 800ae96:	9b00      	ldr	r3, [sp, #0]
 800ae98:	6163      	str	r3, [r4, #20]
 800ae9a:	9b01      	ldr	r3, [sp, #4]
 800ae9c:	6120      	str	r0, [r4, #16]
 800ae9e:	b15b      	cbz	r3, 800aeb8 <__smakebuf_r+0x74>
 800aea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aea4:	4630      	mov	r0, r6
 800aea6:	f000 f8d1 	bl	800b04c <_isatty_r>
 800aeaa:	b128      	cbz	r0, 800aeb8 <__smakebuf_r+0x74>
 800aeac:	89a3      	ldrh	r3, [r4, #12]
 800aeae:	f023 0303 	bic.w	r3, r3, #3
 800aeb2:	f043 0301 	orr.w	r3, r3, #1
 800aeb6:	81a3      	strh	r3, [r4, #12]
 800aeb8:	89a0      	ldrh	r0, [r4, #12]
 800aeba:	4305      	orrs	r5, r0
 800aebc:	81a5      	strh	r5, [r4, #12]
 800aebe:	e7cd      	b.n	800ae5c <__smakebuf_r+0x18>
 800aec0:	0800ac55 	.word	0x0800ac55

0800aec4 <_malloc_usable_size_r>:
 800aec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aec8:	1f18      	subs	r0, r3, #4
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	bfbc      	itt	lt
 800aece:	580b      	ldrlt	r3, [r1, r0]
 800aed0:	18c0      	addlt	r0, r0, r3
 800aed2:	4770      	bx	lr

0800aed4 <_raise_r>:
 800aed4:	291f      	cmp	r1, #31
 800aed6:	b538      	push	{r3, r4, r5, lr}
 800aed8:	4604      	mov	r4, r0
 800aeda:	460d      	mov	r5, r1
 800aedc:	d904      	bls.n	800aee8 <_raise_r+0x14>
 800aede:	2316      	movs	r3, #22
 800aee0:	6003      	str	r3, [r0, #0]
 800aee2:	f04f 30ff 	mov.w	r0, #4294967295
 800aee6:	bd38      	pop	{r3, r4, r5, pc}
 800aee8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aeea:	b112      	cbz	r2, 800aef2 <_raise_r+0x1e>
 800aeec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aef0:	b94b      	cbnz	r3, 800af06 <_raise_r+0x32>
 800aef2:	4620      	mov	r0, r4
 800aef4:	f000 f830 	bl	800af58 <_getpid_r>
 800aef8:	462a      	mov	r2, r5
 800aefa:	4601      	mov	r1, r0
 800aefc:	4620      	mov	r0, r4
 800aefe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af02:	f000 b817 	b.w	800af34 <_kill_r>
 800af06:	2b01      	cmp	r3, #1
 800af08:	d00a      	beq.n	800af20 <_raise_r+0x4c>
 800af0a:	1c59      	adds	r1, r3, #1
 800af0c:	d103      	bne.n	800af16 <_raise_r+0x42>
 800af0e:	2316      	movs	r3, #22
 800af10:	6003      	str	r3, [r0, #0]
 800af12:	2001      	movs	r0, #1
 800af14:	e7e7      	b.n	800aee6 <_raise_r+0x12>
 800af16:	2400      	movs	r4, #0
 800af18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af1c:	4628      	mov	r0, r5
 800af1e:	4798      	blx	r3
 800af20:	2000      	movs	r0, #0
 800af22:	e7e0      	b.n	800aee6 <_raise_r+0x12>

0800af24 <raise>:
 800af24:	4b02      	ldr	r3, [pc, #8]	; (800af30 <raise+0xc>)
 800af26:	4601      	mov	r1, r0
 800af28:	6818      	ldr	r0, [r3, #0]
 800af2a:	f7ff bfd3 	b.w	800aed4 <_raise_r>
 800af2e:	bf00      	nop
 800af30:	20000028 	.word	0x20000028

0800af34 <_kill_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d07      	ldr	r5, [pc, #28]	; (800af54 <_kill_r+0x20>)
 800af38:	2300      	movs	r3, #0
 800af3a:	4604      	mov	r4, r0
 800af3c:	4608      	mov	r0, r1
 800af3e:	4611      	mov	r1, r2
 800af40:	602b      	str	r3, [r5, #0]
 800af42:	f7f6 ffa1 	bl	8001e88 <_kill>
 800af46:	1c43      	adds	r3, r0, #1
 800af48:	d102      	bne.n	800af50 <_kill_r+0x1c>
 800af4a:	682b      	ldr	r3, [r5, #0]
 800af4c:	b103      	cbz	r3, 800af50 <_kill_r+0x1c>
 800af4e:	6023      	str	r3, [r4, #0]
 800af50:	bd38      	pop	{r3, r4, r5, pc}
 800af52:	bf00      	nop
 800af54:	20000858 	.word	0x20000858

0800af58 <_getpid_r>:
 800af58:	f7f6 bf8e 	b.w	8001e78 <_getpid>

0800af5c <__sread>:
 800af5c:	b510      	push	{r4, lr}
 800af5e:	460c      	mov	r4, r1
 800af60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af64:	f000 f894 	bl	800b090 <_read_r>
 800af68:	2800      	cmp	r0, #0
 800af6a:	bfab      	itete	ge
 800af6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af6e:	89a3      	ldrhlt	r3, [r4, #12]
 800af70:	181b      	addge	r3, r3, r0
 800af72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af76:	bfac      	ite	ge
 800af78:	6563      	strge	r3, [r4, #84]	; 0x54
 800af7a:	81a3      	strhlt	r3, [r4, #12]
 800af7c:	bd10      	pop	{r4, pc}

0800af7e <__swrite>:
 800af7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af82:	461f      	mov	r7, r3
 800af84:	898b      	ldrh	r3, [r1, #12]
 800af86:	05db      	lsls	r3, r3, #23
 800af88:	4605      	mov	r5, r0
 800af8a:	460c      	mov	r4, r1
 800af8c:	4616      	mov	r6, r2
 800af8e:	d505      	bpl.n	800af9c <__swrite+0x1e>
 800af90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af94:	2302      	movs	r3, #2
 800af96:	2200      	movs	r2, #0
 800af98:	f000 f868 	bl	800b06c <_lseek_r>
 800af9c:	89a3      	ldrh	r3, [r4, #12]
 800af9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afa6:	81a3      	strh	r3, [r4, #12]
 800afa8:	4632      	mov	r2, r6
 800afaa:	463b      	mov	r3, r7
 800afac:	4628      	mov	r0, r5
 800afae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afb2:	f000 b817 	b.w	800afe4 <_write_r>

0800afb6 <__sseek>:
 800afb6:	b510      	push	{r4, lr}
 800afb8:	460c      	mov	r4, r1
 800afba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afbe:	f000 f855 	bl	800b06c <_lseek_r>
 800afc2:	1c43      	adds	r3, r0, #1
 800afc4:	89a3      	ldrh	r3, [r4, #12]
 800afc6:	bf15      	itete	ne
 800afc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800afca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800afd2:	81a3      	strheq	r3, [r4, #12]
 800afd4:	bf18      	it	ne
 800afd6:	81a3      	strhne	r3, [r4, #12]
 800afd8:	bd10      	pop	{r4, pc}

0800afda <__sclose>:
 800afda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afde:	f000 b813 	b.w	800b008 <_close_r>
	...

0800afe4 <_write_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4d07      	ldr	r5, [pc, #28]	; (800b004 <_write_r+0x20>)
 800afe8:	4604      	mov	r4, r0
 800afea:	4608      	mov	r0, r1
 800afec:	4611      	mov	r1, r2
 800afee:	2200      	movs	r2, #0
 800aff0:	602a      	str	r2, [r5, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	f7f6 ff7f 	bl	8001ef6 <_write>
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	d102      	bne.n	800b002 <_write_r+0x1e>
 800affc:	682b      	ldr	r3, [r5, #0]
 800affe:	b103      	cbz	r3, 800b002 <_write_r+0x1e>
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	bd38      	pop	{r3, r4, r5, pc}
 800b004:	20000858 	.word	0x20000858

0800b008 <_close_r>:
 800b008:	b538      	push	{r3, r4, r5, lr}
 800b00a:	4d06      	ldr	r5, [pc, #24]	; (800b024 <_close_r+0x1c>)
 800b00c:	2300      	movs	r3, #0
 800b00e:	4604      	mov	r4, r0
 800b010:	4608      	mov	r0, r1
 800b012:	602b      	str	r3, [r5, #0]
 800b014:	f7f6 ff8b 	bl	8001f2e <_close>
 800b018:	1c43      	adds	r3, r0, #1
 800b01a:	d102      	bne.n	800b022 <_close_r+0x1a>
 800b01c:	682b      	ldr	r3, [r5, #0]
 800b01e:	b103      	cbz	r3, 800b022 <_close_r+0x1a>
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	bd38      	pop	{r3, r4, r5, pc}
 800b024:	20000858 	.word	0x20000858

0800b028 <_fstat_r>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	4d07      	ldr	r5, [pc, #28]	; (800b048 <_fstat_r+0x20>)
 800b02c:	2300      	movs	r3, #0
 800b02e:	4604      	mov	r4, r0
 800b030:	4608      	mov	r0, r1
 800b032:	4611      	mov	r1, r2
 800b034:	602b      	str	r3, [r5, #0]
 800b036:	f7f6 ff86 	bl	8001f46 <_fstat>
 800b03a:	1c43      	adds	r3, r0, #1
 800b03c:	d102      	bne.n	800b044 <_fstat_r+0x1c>
 800b03e:	682b      	ldr	r3, [r5, #0]
 800b040:	b103      	cbz	r3, 800b044 <_fstat_r+0x1c>
 800b042:	6023      	str	r3, [r4, #0]
 800b044:	bd38      	pop	{r3, r4, r5, pc}
 800b046:	bf00      	nop
 800b048:	20000858 	.word	0x20000858

0800b04c <_isatty_r>:
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	4d06      	ldr	r5, [pc, #24]	; (800b068 <_isatty_r+0x1c>)
 800b050:	2300      	movs	r3, #0
 800b052:	4604      	mov	r4, r0
 800b054:	4608      	mov	r0, r1
 800b056:	602b      	str	r3, [r5, #0]
 800b058:	f7f6 ff85 	bl	8001f66 <_isatty>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_isatty_r+0x1a>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	b103      	cbz	r3, 800b066 <_isatty_r+0x1a>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	20000858 	.word	0x20000858

0800b06c <_lseek_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	4d07      	ldr	r5, [pc, #28]	; (800b08c <_lseek_r+0x20>)
 800b070:	4604      	mov	r4, r0
 800b072:	4608      	mov	r0, r1
 800b074:	4611      	mov	r1, r2
 800b076:	2200      	movs	r2, #0
 800b078:	602a      	str	r2, [r5, #0]
 800b07a:	461a      	mov	r2, r3
 800b07c:	f7f6 ff7e 	bl	8001f7c <_lseek>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	d102      	bne.n	800b08a <_lseek_r+0x1e>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	b103      	cbz	r3, 800b08a <_lseek_r+0x1e>
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	bd38      	pop	{r3, r4, r5, pc}
 800b08c:	20000858 	.word	0x20000858

0800b090 <_read_r>:
 800b090:	b538      	push	{r3, r4, r5, lr}
 800b092:	4d07      	ldr	r5, [pc, #28]	; (800b0b0 <_read_r+0x20>)
 800b094:	4604      	mov	r4, r0
 800b096:	4608      	mov	r0, r1
 800b098:	4611      	mov	r1, r2
 800b09a:	2200      	movs	r2, #0
 800b09c:	602a      	str	r2, [r5, #0]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	f7f6 ff0c 	bl	8001ebc <_read>
 800b0a4:	1c43      	adds	r3, r0, #1
 800b0a6:	d102      	bne.n	800b0ae <_read_r+0x1e>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	b103      	cbz	r3, 800b0ae <_read_r+0x1e>
 800b0ac:	6023      	str	r3, [r4, #0]
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	20000858 	.word	0x20000858

0800b0b4 <_init>:
 800b0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b6:	bf00      	nop
 800b0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ba:	bc08      	pop	{r3}
 800b0bc:	469e      	mov	lr, r3
 800b0be:	4770      	bx	lr

0800b0c0 <_fini>:
 800b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c2:	bf00      	nop
 800b0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0c6:	bc08      	pop	{r3}
 800b0c8:	469e      	mov	lr, r3
 800b0ca:	4770      	bx	lr
